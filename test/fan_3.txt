دانشگاه شیخ بهایی دانشکده فنی و مهندسی پایان نامه کارشناسی ارشد مهندسی کامپیوتر – گرایش نرم افزار ارائه روشی کارا برای بازیابی وبسرویسهای مشابه پژوهشگر: مهسا جمال ویشکایی استاد راهنما: دکتر کمال جمشیدی استاد مشاور: دکتر احمد براآنی دستجردی مهرماه 1390 دانشگاه شیخ بهایی دانشکده فنی و مهندسی پایان نامه کارشناسی ارشد مهندسی کامپیوتر – گرایش نرم افزار ارائه روشی کارا برای بازیابی وبسرویسهای مشابه پژوهشگر: مهسا جمال ویشکایی استاد راهنما: دکتر کمال جمشیدی استاد مشاور: دکتر احمد براآنی دستجردی مهرماه 1390 تقديم به: پدر ارجمند و مادر مهربانم به خاطر تشويقها، راهنماييها و حمايتهاي دلسوزانهشان در تمام دوران تحصيلم. و به همسر عزیزم که با صبر و بردباری، محبت و گذشت سختی راه را بر من هموار نمود. «من لم یشکر المخلوق لم یشکر الخالق» گرچه بهترین پاداشها، خشنودی خداوند و آرامش وجدانی است که انسان در پی زحمات صادقانه خویش و به جهت رضای خداوند بدست میآورد. لیکن بر خود واجب میدانم از زحمات و راهنماییهای ارزندهی اساتید گرانقدر و ارجمندم : آقایان دکتر احمد براآنی دستجردی و دکتر کمال جمشیدی که به حق مرا در این راه یاری کردهاند از صمیم قلب تشکر و قدردانی بنمایم. و توفیق روز افزون ایشان را در خدمت هر چه بیشتر به فرهنگ این مرزوبوم از درگاه ایزد متعال خواستارم. چکیده با افزایش محبوبیت معماری سرویسگرا استفاده از وبسرویسها در برنامههای کاربردی افزایش زیادی یافتهاست. در این محیط کامپوننتهای برنامهکاربردی به صورت شبکهای از سرویسهایی با پیوند سست هستند، که از آنها برای پشتیبانی در توسعه برنامههای کاربردی سریع و بسیار توزیع شده استفاده میشود. در چنین محیطی وبسرویسها رفتار بسیار پویایی دارند و ممکن است محیط اجرایی با محیطی که در زمان طراحی در نظر گرفته شدهاست متفاوت باشد. در نتیجه امکان دارد وبسرویس مناسبی انتخاب شود ولی با گذشت زمان، آن وبسرویس کارایی لازم را از خود نشان ندهد و یا بنا به شرایطی نتوان از آن استفاده نمود. بروز این مشکلات در وبسرویسها باعث کاهش کیفیت و یا از کار افتادن فرایندها و برنامههای کاربردی میشود که از آن سرویسها استفاده میکنند. برای رفتن به سمت محیط سرویسگرای انعطافپذیر و قابل اطمینان با خصوصیات تطبیق خودکار نیاز میباشد در صورت بروز این مشکلات به صورت خودکار وبسرویسی مشابه با وبسرویس اولیه انتخاب شده و جهت جایگزینی معرفی شود. بازیابی وبسرویس مشابه، مشخص کردن سرویسی مناسب میباشد که نيازمنديهاي سرویس قبلي را مرتفع سازد. از سرویس مشابه در شرایطی که سرويسي از كار بیفتد و يا به دلایلی مثل وجود بار زیاد روی میزبان آن قادر به پاسخگویی نباشد، استفاده میشود. در اکثر کارهای ارائه شده تا به حال بر اساس شباهت عملکردی،k تا از بهترین سرویسها انتخاب و مرتب میشوند. در این روشها، کاربر باید در ادامه بر اساس ترجیحات خود یکی از آنها را انتخاب نماید. یکی از معیارهای مهم در بازیابی وبسرویس مشابه، درنظر گرفتن خصوصیات کیفی و در نظر گرفتن ترجیحات کاربر در این زمینه میباشد. به دلیل اهمیت این موضوع در این پایاننامه چارچوبی ارائه شدهاست که از ویژگیهای کیفی و ترجیحات کاربر برای تصمیمگیری در انتخاب سرویس مشابه علاوه بر ارزیابی شباهت عملکردی استفاده کردهاست. با استفاده از چارچوب پیشنهادی میزان بهره حاصل از بازیابی سرویس مشابه افزایش یافتهاست و سرویسهای مشابه با بهترین ترتیب به کاربر معرفی میشوند. این امر باعث بهینهسازی در انتخاب سرویس مشابه شدهاست. کلیدواژه : وبسرویس، تطبیق خودکار، شباهت عملکردی، خصوصیات کیفی و ترجیحات کاربر فهرست مطالب فهرست اشکال فهرست جداول فهرست فرمولها فصل اول دیباچه در این فصل با ارائه مقدمه، اهداف تحقیق، اهمیت و ارزش تحقیق و کاربرد آن سعی شدهاست مسئله مورد تحقیق در این پایاننامه بصورت مختصر معرفی گردد. در ادامه نیز ساختار این پایاننامه و مختصری از فصول آن جهت درک بهتر مطالب آورده شدهاست. مقدمه معماری سرویسگرا بعنوان یکی از برجستهترین معماریهای دهه اخیر با ایجاد یک معماری چند لایه و اتکا به موجودیت پایهای سرویس سعی در پیادهسازی سیستمهای نرمافزاری توزیع شده و نامتجانس دارد . این معماری به صورت عمیقی بر پایه مفهوم پنهانسازی منطق برنامه توسط سرویسها و پروتکلهای ارتباطی متداول بنا شدهاست. یکی از اهداف محاسبات سرویسگرا توسعه برنامههای کاربردی جدید با استفاده از وبسرویس میباشد. در محاسبات سرویسگرا کامپوننتهای برنامهکاربردی به صورت شبکهای از سرویسهایی با پیوند سست هستند، که از آنها برای پشتیبانی از توسعه برنامههای کاربردی سریع و بسیار توزیع شده استفاده میشود . فعالیت در حوزه محاسبات سرویسگرا، در حقیقت فعالیت در حوزه سیستمهای توزیع شدهاست و باید در آن علاوه بر حل دغدغههای موجود برای توسعه برنامههای کاربردی چالشهای جدی مانند توزیع شدگی، نامتجانس بودن محیط و منابع و وجود پیوند سست میان اجزا را نیز در نظر گرفت. در محاسبات سرویسگرا یکسری ابزار و متد جهت پشتیبانی از طراحی و اجرای برنامههای کاربردی بر اساس وبسرویسها بوجود آمدهاست، طبق این نظر در زمان طراحی، توسعه دهنده مشخص مینماید که چه فعالیتهایی باید صورت بگیرد و در ادامه وبسرویسی که نزدیکترین شباهت به نیازمندیهای موجود را دارد، انتخاب مینماید. سرویسگرایی محیطی با پیوند سست ایجاد مینماید و محیط واقعی اجرا ممکن است به صورت زیادی با فرضهایی که در زمان طراحی در نظر گرفته شدهاست متفاوت باشد . وبسرویسها در چنین محیطی رفتار بسیار پویایی دارند و ممکن است تغییراتی در شرایط سرویس مانند عدم در دسترس بودن سرویس یا کاهش کیفیت سرویس در زمان اجرا رخ دهد. در نتیجه ممکن است وبسرویس مناسبی انتخاب شود ولی با گذشت زمان، آن وبسرویس کارایی لازم را از خود نشان ندهد. در چنین حالتی مصرف کننده سرویس برای رفع نیاز خود مجبور به انجام پروسه کشف مجدد سرویسی مشابه با سرویس اولیه میباشد به صورتیکه سرویس جدید نیازمندیهای قبلی را بر طرف سازد. در نتیجه باید دوباره فرایند زمانبر یافتن سرویس جدید تکرار شود. سیستمهای نرم افزاری باید انعطاف پذیرتر، قابل اطمینانتر و وفقپذیر با تغییر در محیط عملیاتی باشند . بنابراین حرکت سیستمهای نرم افزاری به سمت سیستمهایی با خصوصیات تطبیق خودکار پیش میرود. این سیستمها میتوانند خود را تنظیم و به کارایی خود افزوده، از خود محافظت نموده و هم چنین توانایی احیاء خود را دارند، در حالیکه بیشتر پیچیدگیها را از کاربر و مدیر سیستم میپوشانند. برای جلوگیری از فرایند زمانبر کشف مجدد سرویس و درگیر ساختن زیاد کاربر به این مسئله در زمان اجرا و رفتن به سمت محیط سرویسگرای انعطافپذیر، قابل اطمینان و با خصوصیات تطبیق خودکار در این پایاننامه برای بازیابی، وبسرویس مشابه با وبسرویس معیوب راهکاری پیشنهاد شدهاست. این موضوع نقش مهمی در محاسبات سرویسگرا دارد. با استفاده از بازیابی وبسرویس مشابه در صورت عدم عملکرد مناسب سرویسی، وبسرویسهای مشابه به آن به صورت اتوماتیک یافت و جهت جایگزینی به کاربر معرفی میشوند. در نتیجه چنانچه سرويسي از كار بیفتد يا به دلایلی مثل وجود بار زیاد روی میزبان آن قادر به پاسخگویی نباشد، سرویسی مشابه که نيازمنديهاي قبلي را مرتفع سازد، فراهم میشود. کارهای انجام شده در زمینه یافتن سرویس مشابه نواقصی دارند. به عنوان مثال در آن کارها، به صورت ایستا از قبل سرویسهای مشابه مشخص شدهاند و در زمان اجرا فقط بر حسب معیاری از بین این سرویسها، یکی انتخاب میشود. از این رویکرد فقط در شرایط خاص میتوان استفاده نمود و روش عامی جهت حل مسئله نیست. برای یافتن سرویس مشابه از جنبه پویا نیز کارهایی صورت گرفتهاست، در این دسته از روشها با آمدن درخواست برای یافتن سرویس مشابه، به صورت پویا جستجویی برای یافتن سرویسهای مشابه صورت میگیرد. هر کدام از این روشها محدودیتهایی دارند. نکته مهم این مسئله میباشد که در اکثر این کارها تا به حال بر اساس شباهت عملکردی،k تا از بهترین سرویسها انتخاب و مرتب میشوند. در این روشها کاربر باید در ادامه دوباره سرویسها را بررسی نموده و بر اساس ترجیحات خود یکی از آنها را انتخاب نماید. در این روشها از جنبه تطبیق خودکار به موضوع نگریسته نشدهاست. در فرایند یافتن سرویس مشابه پس از یافتن چند سرویس که از نظر عملکردی مشابه هستند معیار مهم برای کاربر انتخاب سرویسی میباشد که کیفیت را در سطح خوبی برآورده سازد. در نتیجه یک جنبه مهم در انتخاب سرویس مشابه درنظر گرفتن خصوصیات کیفی سرویسها و در نظر گرفتن ترجیحات کاربر در این زمینه میباشد. در کارهای گذشته کاربر مجبور است طی فرایندی دیگر وبسرویسهای مشابه را به صورت دستی مورد بررسی قرار دهد. این امر ممکن است بسیار زمانگیر باشد چون از یک طرف به اطلاعات کیفی این وبسرویسهای مشابه دسترسی ندارد و یا در صورت وجود این اطلاعات نحوه استفاده از این اطلاعات مشکل است و باید موازنهای بین دو ویژگی عملکردی و کیفی وبسرویسها برای انتخاب، ایجاد شود به صورتی که دقت انتخاب دستخوش تغییرات نادرست نشود. به دلیل اهمیت این موضوع چارچوبی معرفی شدهاست که از دو جنبه عملکردی و کیفی سرویسها را مورد بررسی قرار میدهد و هدف از آن استفاده دراز مدت و تطبیق خودکار میباشد. در این چارچوب از جنبه عملکردی به دنبال یافتن سرویسهایی است که کار مشابه با سرویس مورد نظر را انجام دهند و در این زمینه شباهت رابطکاربر سرویسها مورد ارزیابی قرار گرفته شدهاست. و از جنبه کیفی به بدست آوردن ویژگیهای کیفی سرویسها و بررسی نزدیکی آنها به ترجیحات کاربر پرداخته شدهاست. در آخر شباهت کلی بر اساس دو شباهت بدست آمده با استفاده از روش انعطافپذیری محاسبه میشود. استفاده از ویژگیهای کیفی باعث میشود که سرویسهایی که از جهت عملکردی مشابه معرفی شدهاند تغییر رتبه پیدا کنند، در نتیجه بهترین انتخاب از دو جنبه عملکردی و کیفی صورت میگیرد و یافتن سرویس مشابه با کیفیت بهتری عمل خواهد کرد. با استفاده از چارچوب پیشنهادی میزان بهره حاصله از ارزیابی سرویس مشابه، افزایش یافتهاست و سرویسهای بازیابی شده با بهترین ترتیب در جواب نهایی ظاهر میگردند. این امر باعث بهینهسازی در انتخاب سرویس مشابه شدهاست. برای تعویض وبسرویس باید سه مرحله زیر انجام شود : بازیابی سرویس مشابه ساخت یک لایه واسط بین وبسرویس جدید و برنامه که از سرویس اولیه استفاده میکند ( به این مرحله در حالتی که دو سرویس رابط کاربر کاملا مشابه به هم دارند، نیاز نیست) جایگزین کردن سرویس به جای سرویس اولیه در این پایاننامه راهکاری مناسب برای قسمت اول، یعنی بازیابی سرویس مشابه ارائه شدهاست. و دو مرحله دیگر خارج از حوزهی تحقیقاتی این پایاننامه میباشد. اهداف تحقیق هدف ارائه و پیادهسازی یک روش کارا و پویا برای بازیابی وبسرویس مشابه بر اساس دو جنبه عملکردی و کیفی وبسرویسها است. این امر سبب میشود بهترین سرویسهای مشابه یافته و به کاربر معرفی شوند. اهمیت و ارزش تحقیق امروزه استفاده از وبسرویسها بسیار متداول شدهاست. تعداد وبسرویسهای موجود نیز به صورت زیادی در حال افزایش میباشد. در چنین وضعیتی در صورت بوجود آمدن مشکلی در وبسرویس مورد استفاده، باید بتوان از توان موجود در سایر سرویسها، برای رفع نیاز استفاده نمود. حال در این محیط گسترده یافتن سرویس مشابه با سرویس قبلی کاری دشوار میباشد. برای پوشاندن این پیچیدگیها و ایجاد محیطی با خصوصیات تطبیق خودکار، این تحقیق در صدد ارائه راه حل کارا برای یافتن سرویس مشابه میباشد. کاربرد نتایج تحقیق از نتایج این تحقیق میتوان در محیطهای سرویسگرایی، که از وبسرویسها به عنوان کامپوننتهای توزیع شده استفاده میشود، بهره برد. از بازیابی وبسرویس مشابه میتوان برای مدیریت وبسرویسهای در سازمانها استفاده نمود. و در صورت بروز مشکل در ارائه خدمت از سرویسی، به منظور جلوگیری از توقف در روند اجرایی و از ضررهای ناشی از آن، استفاده نمود. با این کار در صورت خرابی سرویسی، میتوان از میان سرویسهای مشابه یکی را انتخاب نمود، به صورتی که زمان زیادی درگیر مسئله خرابی یا در دسترس نبودن سرویس و فرایند کشف مجدد سرویس مناسب نشد. همچنین از بازیابی وبسرویس مشابه میتوان در طراحی بالا به پایین فرایندهای WS-BPEL نیز استفاده نمود. در این حالت طراح روی تعریف فرایند متمرکز شده و به صورت کلی وبسرویس دلخواه را در نظر میگیرد و در ادامه وبسرویس مشابه را با توجه به نیازمندیهای موجود انتخاب میکند. در نتیجه میتوان از نتایج این پایاننامه در ایجاد اتوماسیون بیشتری در محیط سرویسگرا استفاده نمود. سوالهای تحقيق سوال های اصلی این تحقیق عبارتند از: چه معیارهایی برای بازیابی وبسرویس مشابه اهمیت دارند ؟ وبسرویسها چگونه از جنبه عملکردی مورد بررسی قرار گیرند؟ چگونه میتوان به اطلاعات کیفی وبسرویس پی برد؟ با استفاده از چه روشی میتوان به ترجیحات کاربر در مورد ویژگیهای کیفی پی برد؟ بررسی شباهت ویژگیهای کیفی به ترجیحات کاربر چگونه انجام شود؟ شباهت کلی با توجه به شباهتهای جزئی بدست آمده چگونه محاسبه شود؟ ساختار پایان نامه این پایاننامه در قالب 6 فصل تهیه شدهاست. فصل اول- در این فصل با ارائه مقدمه، اهداف تحقیق، اهمیت و ارزش تحقیق و کاربرد آن سعی شدهاست مسئله مورد تحقیق در این پروژه بصورت مختصر معرفی گردد. فصل دوم- این فصل دربردارنده معرفی مختصری از مفاهیم، استانداردها و تکنولوژیهای پایهای مورد استفاده در جهت اجرایی نمودن اهداف و چارچوب مشخص شده این پروژه میباشد. مفاهیم معماری سرویسگرا و اصول آن، وبسرویس و تکنولوژیهای مربوطه، ویژگیهای کیفی وبسرویس و مسائل مربوط به آن بیان میشود. همچنین چارچوب LAP به اختصار معرفی میگردد. فصل سوم- شناخت، دسته بندی و تحلیل مجموعه اقدامات انجام گرفته در یک حوزه تحقیقاتی گامی بزرگ در جهت انجام پروژه در آن حوزه می باشد. با توجه به حوزه تحقیقاتی این پروژه مبنی بر بازیابی وبسرویس مشابه در این فصل ضمن دستهبندی مجموعه فعالیتهای انجام گرفته در این زمینه سعی شدهاست نفاط قوت و ضعف هر رویکرد مورد بررسی قرار گیرد. فصل چهارم- در این فصل در ابتدا بصورت خلاصه به بررسی صورت مسئله و نیازمندیهای آن پرداخته شدهاست. در ادامه برای روشنتر ساختن موضوع یک بررسی موردی بیان میشود. و سپس چارچوب پیشنهادی به صورت تفصیلی تشریح شدهاست و در آخر جایگاه چارچوب پیشنهادی با توجه به کارهای صورت گرفته روی وبسرویس مشخص مورد بررسی قرار میگیرد. فصل پنجم- در این فصل پیادهسازی چارچوب پیشنهادی بیان شده و در ادامه به ارزیابی و مسائل مربوط به آن پرداخته شدهاست. در این فصل برای ارزیابی دقیق، از معیارهای مختلفی استفاده شدهاست. توسط این معیارها هم کارایی کلی کار سنجیده شده و هم مقایسهای با سایر کارهای پیشین صورت گرفتهاست. فصل ششم - در این فصل در ابتدا نتایج حاصل از این پروژه جمع بندی شده و راهکار بیان شده با روشهای ارائه شده دیگر موجود در این زمینه مورد بررسی قرار میگیرد و سپس کارهای آتی قابل انجام در این حوزه معرفی میگردند. فصل دوم ادبیات موضوع مقدمه این فصل دربردارندهی معرفی مختصری از مفاهیم و استانداردها پایهای مورد استفاده جهت اجرایی نمودن اهداف و چارچوب مشخص شده در این پایاننامه میباشد. مفاهیم معماری سرویسگرا و اصول آن، وبسرویس و تکنولوژیهای مربوط به آن و ویژگیهای کیفی در وبسرویس که هر یک بگونهای مورد استفاده قرار میگیرند به اختصار معرفی میگردد. در آخر نیز چارچوب LAP که جهت سازماندهی تحقیقات صورت گرفته روی وبسرویس استفاده میشود، معرفی شدهاست. معماری سرویسگرا الگوی طراحی سرویسگرا امروزه یکی از پر کاربردترین الگوهای طراحی در مهندسی نرم افزار میباشد. این سبک طراحی جهت ایجاد سیستمهای توزیع شده استفاده میشود که عملیات یک کاربرد نرم افزاری را به صورت سرویسهایی ارائه میکند که قابل استفاده توسط کاربردهای نرم افزاری دیگر نیز میباشد. این معماری به صورت عمیقی بر پایه مفهوم پنهان سازی منطق برنامه توسط سرویسها و پروتکلهای ارتباطی متداول بنا شدهاست. در الگو محاسبات سرویسگرا از موجودیت سرویس به منظور پشتیبانی از توسعه برنامهها به صورت امن، ارزان، اغلب توزیع شده، متعامل و قابل گسترش استفاده میشود. سرویس، مؤلفهای خودمختار و اغلب مستقل از بستر، با قابلیت استفاده مجدد، بصورت دانه درشت و با حفظ ویژگی پیوند ضعیف میباشد که توصیف، ثبت و کشف میشود. در این الگو با تجمیع و ترکیب سرویسها میتوان یک برنامه جدید را ایجاد نمود. بارزترین قابلیت محاسبات سرویسگرا را میتوان امکان ترکیب نمودن مؤلفههای نرم افزاری به منظور ایجاد شبکهای از سرویسها با ارتباطات ضعیف دانست که این امر خود باعث ایجاد فرآیندهای خودکار و نهایتاً ایجاد برنامهها بصورت چابکانه میشود. تعریف معماری سرویسگرا تعریف دقیق معماری سرویسگرا دشوار میباشد. علت این دشواری عدم تعریف برای این معماری نیست بلکه وجود چندین تعریف برای آن است. در ادامه یکی از تعریفهای جامع بیان شده برای این معماری آورده شدهاست. تعریف توماس اِرل (Thomas Erl) از معماری سرویسگرا : "معماری سرویسگرا بیانگر یک معماری باز، قابل توسعه، یکپارچه، با قابلیت ترکیب شدن است که مولفهگرایی را بهبود بخشیده و از مجموعهای سرویس خودمختار، دارای قابلیت کیفی، ساخته شده توسط سازندگان مختلف، قابل کشف، دارای قابلیت استفاده مجدد و قابل ارتباط که به شکل وبسرویسهای پیادهسازی شدهاند، تشکیل شدهاست. معماری سرویسگرا میتواند سطح تجریدی از منطق کسبوکار و تکنولوژی ایجاد کرده و منجر به ارتباط ضعیفی بین دامنههای مختلف شود. این معماری تکامل یافتهی بسترهای قبلی است که ویژگیهای موفق و کارآمد معماریهای قبلی را حفظ نموده و اصول منحصر بفردی را با خود به همراه آورده که باعث رشد و پرورش سرویسگرایی در حمایت از سازمان سرویسگرا گردیدهاست. معماری سرویسگرا در حالت ایدهآل خود توسط یک سازمان استانداردگذاری میشود، اما رسیدن به این حالت نیازمند یک گذر برنامهریزی شده و حمایت از یک مجموعه تکنولوژی در حال تکامل است." معماری سرویسگرا همانگونه که در شکل 2-1 نیز نمایش داده شدهاست بصورت یک معماری چند لایه میباشد. شکل ‏21 : نمایی از لایههای معماری سرویسگرا در تعاریف و معماریهای مختلف ارائه شده برای معماری سرویسگرا لایههای متعددی با نامهای مختلفی ارائه شدهاست. اما درحالت کلان میتوان لایههای زیر را استانداردترین لایههای ارائه شده برای این معماری دانست : لایه منابع: کلیه منابع اطلاعاتی اعم از سیستمهای یکپارچه و پایگاههای اطلاعاتی در این لایه قرار میگیرد. مهمترین چالش موجود در این لایه را میتوان تعداد، تنوع، توزیعشدگی و نامتجانس بودن این منابع دانست. این لایه معرف وضعیت موجود سازمان از دید IT میباشد. لایه سرویس: برطرفسازی چالشهای ارائه شده در لایه اول از طریق ارائه موجودیتی به نام سرویس برعهده این لایه میباشد. در این لایه برروی هر یک از منابع موجود در سازمان یک یا چندین سرویس براساس استانداردها باز و خوش تعریف، تعریف میگردد تا کلیه تبادلات اطلاعاتی با منابع موجود در سازمان از طریق این لایه و بصورت استاندارد و یکنواخت صورت پذیرد. سرویسها در این لایه میتواند بصورت پوششی ایجاد شده و یا اینکه از ابتدا تعریف و پیادهسازی شوند. هدف این سرویسها ارائه توابع با قابلیت استفاده مجدد و مرتبط با دادههای پردازشی درون محیطهای کاربردی جدید یا موجود است. لایه فرایند: عملیات اصلی سیستم در این لایه تعریف میشود. هماهنگسازی یا ترکیب سرویسهای موجود با هدف ایجاد یک خدمت جدید را میتوان براساس استانداردهای مختلف ارائه شده برای این لایه مانند ارکستریشن و کروگرافی وظیفه نهایی این لایه اعلام نمود. در این لایه فرایندها از ترکیب سرویسهای موجود ایجاد میشود. جداسازی مولفههای محاسباتی از منطق هماهنگسازی یکی از برترین امتیازات معماری سرویسگرا است که توسط این لایه محقق میشود. لایه دسترسی: ارتباط با کاربر وظیفه این لایه است. از طرف دیگر مدیریت و دسترسی به کلیه منابع موجود در سیستم نیز از این طریق صورت میگیرد. تکنولوژی پرتال را میتوان تکنولوژی برتر امروزی جهت برآورده سازی نیازمندیهای مطرح برای این لایه دانست. یکی از بارزترین ویژگیهای معماری سرویسگرا مفهوم سرویس است، از این روی اصول متداول این معماری نیز روی تعریف و بیان ویژگیهای سرویس استوار است. در ادامه به اصول متداول سرویسگرایی اشاره شدهاست. سرویسها قابلیت استفاده مجدد دارند. سرویسها به طور بالقوه برای ایجاد استفاده مجدد طراحی شدهاند. با اعمال استانداردهای طراحی که هر سرویس را به صورت بالقوه قابل استفاده مجدد میکند، شانس ایجاد تغییرات در آینده با صرف هزینه و زمان کمتر، افزایش مییابد. سرویسها قرارداد رسمی به اشتراک میگذارند. برای اینکه سرویسها بتوانند با یکدیگر تعامل داشته باشند، فقط به یک قرار داد رسمی نیاز است، تا آن سرویس را شرح داده و شرایط تبادل اطلاعات را تعریف کند. سرویسها پیوند ضعیفی با یکدیگر دارند. سرویس باید بگونهای طراحی شود که بدون نیاز به وابستگی محکم و بین سرویسی، با یکدیگر تعامل داشته باشند. به عبارتی سرویسها فقط نیاز به آگاهی از وجود یکدیگر دارند. این آگاهی از طریق قرارداد سرویس بدست میآید. سرویسها منطق زیرین را جدا میکنند. تجرید در سطح واسط سرویس، اصلی است که توسط آن به سرویسها این امکان داده میشود که به عنوان جعبههای سیاه عمل کنند و جزئیات درون خود را از دنیای بیرون پنهان کنند. تنها بخشی از سرویس که برای جهان خارج قابل رویت است از طریق رابطکاربر سرویس نمایش داده میشود. سرویسها قابل ترکیب هستند. سرویسها میتوانند با یکدیگر ترکیب شوند و منطق را در سطوح مختلفی ارائه نمایند. به این ترتیب قابلیت استفاده مجدد بیشتر میشود. سرویسها خود مختار هستند. منطق هر سرویس در محدوده خاصی قرار دارد و خود سرویس کنترل آن ناحیه را بر عهده دارد و برای مدیریت و کنترل به سرویس دیگری نیاز ندارد. این خصوصیت باعث ساختن واحدهای مجزا از هم میشود، که به سرویس اجازه میدهد که بتواند تمام پردازشهای خود را اداره نماید. سرویسها بدون حالت هستند. سرویس باید مدیریت اطلاعات وضعیتی و مدت زمانی آن را به حداقل برساند. زمانی که یک سرویس پیامی را پردازش میکند موقتا دارای حالت است. اگر یک سرویس مسئول نگهداری وضعیت برای مدت زمان بیشتری باشد، مانع از توانایی آن برای در دسترس باقی ماندن توسط تقاضا کنندگان دیگر خواهد شد. به عبارتی سرویس باید مستقل از حالت طراحی شود حتی اگر به معنی محول نمودن مدیریت حالت به جای دیگری باشد. سرویسها قابل کشف شدن هستند. سرویسها باید این امکان را فراهم نمایند که توصیفشان، توسط استفاده کنندگان سرویس کشف و درک شود. از هشت مورد یادشده خود مختاری، پیوند ضعیف و نیاز به قرارداد رسمی میتواند به عنوان اصول مبنایی سرویسگرا در نظر گرفته شود. سرویسها موجودیتهایی خود مختار و مستقل از بستر هستند که میتوانند توصیف، منتشر و کشف شوند و میتوانند در محدودهی پاسخ به یک درخواست ساده تا اجرای یک فرایند کسبوکار پیچیده که نیاز به ارتباط نظیر به نظیر بین چندین لایه از مصرف کنندگان و تولید کنندگان سرویس، عمل نماید. در طی چند سال اخیر معماری سرویسگرا و محاسبات سرویسگرا به عنوان مدلی برای حل پیچیدگیهایی که عموماً محاسبات توزیع شده با آن همراه میباشد، پذیرفته شدهاست. در تئوری مدل پایه معماری سرویسگرا از سه بخش همانگونه که در شکل2-2 نمایش داده شدهاست، تشکیل شدهاست: تولید کننده سرویس : مسئولیت ساخت و در دسترس قرار دادن سرویس را بر عهده دارد. طی عملیات انتشار سرویس تبلیغ شده و خلاصهای از خصوصیات سرویس در مخزن سرویس قرار میگیرد. زمانی که سرویسی منتشر شد، تولید کننده سرویس منتظر تماس از طرف کاربران علاقهمند به این سرویس میباشد. مخزن سرویس : این کامپوننت اطلاعات مربوط به سرویسها را در خود ذخیره مینماید. کاربران این مخزن میتوانند از این اطلاعات برای پیدا کردن مناسبترین سرویس با توجه به نیازمندیهای موجود استفاده کنند. درخواست کننده سرویس که به آن مصرف کننده سرویس نیز گفته میشود، مخزن سرویس را برای یافتن سرویس مناسب با توجه به نیازمندیهای موجود، جستجو مینماید. پس از یافتن سرویس مورد نظر با تولید کننده آن سرویس ارتباط برقرار میکند و به آن بایند شده و در ادامه سرویس مورد نظر اجرا میگردد. شکل ‏22 : مدل معماری سرویسگرا وبسرویس بنا به تعریف کنسرسیوم W3C، " وبسرویس سیستم نرمافزاری میباشد که برای پشتیبانی از ارتباط سازگار ماشین به ماشین از طریق شبکه طراحی شده است " . در این تعریف به دو ویژگی مهم وبسرویس اشاره شدهاست : وبسرویس به صورت سازگار طراحی شدهاست. به عبارتی طراحی وبسرویس به صورت مستقل از بستر میباشد. در نتیجه میتوان از وبسرویس بدون توجه به زبان برنامه نویسی که برای توسعه آن بکار رفته است ، استفاده نمود. تکنولوژی برای آسانسازی ارتباط بین ماشینها طراحی شدهاست. با اینحال استاندارد طراحی شده برای توصیف سرویس و رد و بدل پیامها توسط انسان نیز قابل فهم میباشد. تکنولوژی وبسرویس اصول مورد نیاز سرویسگرایی که قبلا به آنها اشاره شد، را دارا میباشد و در حال حاضر وبسرویس، تکنولوژی امید بخشی برای معماری سرویسگرا است ، که از استاندارد SOAP برای ارتباطات و از استاندارد WSDL برای توصیف رابطکاربر و از UDDI برای مخزن استفاده مینماید. در ادامه به صورت مختصر به معرفی این سه استاندارد پرداخته شدهاست. در کل این پایاننامه از کلمات سرویس و وبسرویس به یک معنا استفاده میشود. استاندارد WSDL برای نمایش اطلاعات اساسی به روشی آسان و ساختیافته استاندار WSDL معرفی شد. WSDL بهترین استاندارد برای توصیف وبسرویس از نظر بیان مکان، مشخصات متدهای سرویس، پیامهای آن و پروتکلهای که پشتیبانی میکند، میباشد. توصیف WSDL یک سند مبتنی بر XML است که نحوهی برقراری ارتباط و استفاده از یک وبسرویس را بیان میکند. در شکل 2-3 یک WSDL نمونه آورده شدهاست. شکل ‏23 : نمونه WSDL به دلیل استفاده از استاندارد WSDL در فصلهای آتی، به صورت خلاصه اجزای آن با توجه به شکل 2-3 معرفی خواهد شد. Types : این عنصر که در خط سه شروع شدهاست، برای تعریف انواع دادهای استفاده شده توسط سرویس میباشد. نوع داده میتواند از نوع ساده و یا پیچیده باشد. به عنوان مثال TicketOrderRequest نوع پیچیده متشکل از دو نوع ساده، میباشد. Message : از این عنصر برای برقراری ارتباط بین انواع دادهای تعریف شده با متد وبسرویس استفاده میشود. به صورت سادهتر میتوان اینگونه بیان نمود که نوع دادهای که میتوان در ورودی یا خروجی متد استفاده کرد، را تعریف مینماید. به عنوان مثال در خط 11 پیامی با نام OrderTicketInput تعریف شدهاست که از نوع دادهای TicketOrderRequest استفاده مینماید. PortType : در این عنصر میتوان یک یا چند متد تعریف نمود. این بخش تعریف انتزاعی از عملي که به وسیله سرویس انجام میشود را نشان میدهد. Binding : عناصر بالا برای تعریف تئوری سرویس کامل میباشد، اما برای ایجاد امکان دسترسی به آن، نیاز به دو عنصر دیگر میباشد. عنصر اول که وظیفه آن مشخص نمودن بستر انتقال و سبک رمز گذاری پیامها از سمت فرستنده به مقصد میباشد Binding است. در عمل معمولا از متدهای http و soap استفاده میشود. جدا از مشخص نمودن پروتکل انتقالی، سبک پیام را نیز مشخص میسازد. به عنوان مثال در خط 24 سبک RPC مشخص شدهاست. میتوان از سبک document/literal نیز استفاده نمود، این دو در ماهیت مفهومی متفاوت هستند. Service : آخرین عنصر مهم از توصیف وبسرویس، مشخصات خود سرویس میباشد. توسط این بخش پورت، بایندینگ و آدرس سرویس بیان میشود. استاندارد SOAP SOAP پروتکلی مبتنی بر XML است که برای تبادل اطلاعات ساختیافته در محیط غیر متمرکز و توزیع شده طراحی شدهاست. این پروتکل به عنوان خط اتصال نهایی بین تولید کننده وبسرویس و مصرف کننده آن است که در آن چگونگی درخواست به سرویس و گرفتن پاسخ از سرویس مشخص شدهاست. مي‌توان تصور كرد كه سرويس‌ها مانند اشيائي هستند كه دسترسی به آنها توسط SOAP صورت میگیرد. استاندارد UDDI استاندارد UDDI نیز استانداری مبتنی بر XML است و کار مخزن وبسرویس را در مثلث سرویسگرایی انجام میدهد. به نظر میرسد که UDDI نیازمندیهای عملیاتی را برای مخزن وبسرویس دارا باشد. توجه به این نکته الزامی است که این استاندارد تنها امکان ثبت و جستجوی سرویسها را فراهم ساخته و فراخوانی سرویسها بصورت نظیر به نظیر و از طریق ارتباط مستقیم بین خود مشتری و تامین کننده سرویس انجام میگیرد. اما در واقعیت یکسری کاستیهایی وجود دارد که تاثیر منفی بر روی استفاده از پیادهسازی انجام شده برای این استاندارد گذاشتهاست. به یکسری از عوارض جانبی استفاده از UDDI در ادامه اشاره شدهاست : برنامهنویس و مهندسین نرم افزار با دانش کم از تکنولوژی وبسرویس مجبور به یادگیری حداقل بخشی از مدل دادهای UDDI هستند تا بتوانند با موفقیت توصیفات سرویس خود را در مخزن منتشر کنند. در نتیجه ممکن است از انتشار سرویس منصرف شده و توصیف سرویس را به صورت مستقیم به مصرف کننده ارسال نماید، این امر باعث ایجاد چرخه نامطلوب میشود که در شکل2-4 نشان داده شدهاست. شکل ‏24 : چرخه نامطلوب بعد از آشنایی با UDDI، یکسری مشکلات دیگری نیز بروز پیدا مینماید. از دلایل بروز این مشکلات میتوان به عدم امکان انتشار کامل فایل WSDL نام برد. در UDDI از مدخل tmodel برای این کار استفاده میشود. متاسفانه توصیف سرویس با استفاده از tmodel الزاماً مطابق با فایل WSDL نمیباشد. این امر باعث ایجاد مشکل در پردازش اتوماتیک و استخراج داده از UDDI میشود. ساختار پیچیده برای مصرف کننده سرویس هنگام جستجو سرویس نیز یکسری مشکلات بوجود میآورد. و یکی دیگر از مشکلات قابلیت جستجو برای سرویسها میباشد، زیرا جستجو بر اساس محتوای WSDL، به دلیل عدم وجود کامل این فایل در مخزن، صورت نمیگیرد. کشف وبسرویس با توجه به روشی که وبسرویس توسط آن توصیف میشود دو رهیافت برای کشف وبسرویس وجود دارد. در رهیافت اول از مخزن UDDI و یا مخزن ebXML برای کشف سرویس استفاده میشود. در این دسته توصیف متنی وبسرویس با استفاده از یکسری کلید واژه و یا طبقهبندی از قبل تعریف شده ایندکس میشوند. در این مخزنها از محتوای توصیف وبسرویس برای کشف سرویس استفاده نمیشود. روش جستجو بر اساس کلید واژه از دقت کمی برخوردار است و ماهیت کشف وبسرویس احتیاج به روشهایی فراتر از بازیابی بر اساس کلید واژه دارد . این نوع از جستجو به دو دلیل زیر ناکار آمد هستند : لغات نمیتوانند در بردارنده معنای وبسرویس باشند. لغات برای مشخص کردن دقیق نیازهای کاربر کافی نیستند. همچنین استاندارد UDDI هیچ ضمانتی در مورد وجود اطلاعات در مورد ویژگیهای کیفی سرویس ندارد و در نتیجه امکان فراهم شدن مقادیر کیفی برای سرویسهای ثبت شده وجود ندارد. دسته دوم از یکسری راهکار پیشنهاد شده توسط انجمن وب معنایی مثل OWL-S و WSMO استفاده میکنند. در این روشها برای توصیف سرویسها از هستانشناسی استفاده میشود و برای بدست آوردن اطلاعات در مورد سرویس از فرایند استنتاج در حین تطبیق وبسرویس استفاده میشود. حتی اگر این روشها کارایی بیشتری نسبت به روشهایی که از WSDL استفاده میکنند داشته باشند، تعریف کردن توصیف وبسرویس بر اساس منطق تلاش زیادی را از توسعهدهنده وبسرویس میطلبد. همچنین در این روشها ساختار وبسرویس در نظر گرفته نمیشود. بازیابی وبسرویس مشابه و یا به عبارتی جستجوی شباهت یک شاخه از مسئله کشف سرویس است. ویژگیهای کیفی در وبسرویس فراداده به معنی اطلاعات در مورد داده است به عنوان مثال محل سرور ، تاریخ تولید و ... . فراداده در ارتباط با وبسرویس در بردارنده اطلاعاتی است که به صورت مستقیم بر روی عملکرد وبسرویس تاثیری ندارد. زمانی که فرا داده در مورد وبسرویس بیان میشود، گروهی از اطلاعات اهمیت بیشتری پیدا میکنند. یک دسته از این گروه، اطلاعات کیفی سرویس و یا همان QoS میباشد. در محاسبات سرویسگرا ویژگیهای کیفی به تمام ویژگیهای غیرعملکردی سرویس گفته میشود که در محدودهی ویژگیهای خاص کارایی تا اطلاعات در مورد امنیت و قیمت می باشد. امروزه در نظر گرفتن ویژگیهای کیفی سرویسها برای برنامههای کاربردی که از وبسرویسها تشکیل شدهاند امری حیاتی میباشد. اطلاع از ویژگیهای کیفی نقش مهمی را در کشف و انتخاب سرویس ایفا میکند. به دلیل استفاده از ویژگیهای کیفی در فصلها آتی، در ادامه به صورت مختصری به مسائل مربوطه پرداخته خواهد شد. استفاده از وبسرویس در برنامههای کاربردی و فرایندهای سازمانی به سرعت افزایش یافته است. این فرایندها و برنامههای کاربردی یکسری نیازمندی برای ویژگی کیفی سرویسها مثل دسترسپذیری و... قائل هستند. بعضی از تولید کنندگان سرویس ممکن است هیچ ضمانتی روی موارد زمان پاسخ، توان و دسترسپذیری سرویس نداشته باشند. این سیاست ممکن است در موارد کمی قابل قبول باشد ولی در اکثر موارد قابل قبول نمیباشد، مخصوصاً زمانی که وبسرویس نقش مهمی را در برنامه کاربردی داشته باشد. در این حالت تولید کننده خواستار داشتن ارتباط بیشتری با مصرف کننده سرویس است، که این ارتباط منجر به تولید SLA میشود. SLA در حقیقت مانند قراردادی است که در آن معیارهای مختلف کیفی بیان میشود، به عنوان مثال میانگین پاسخ باید کمتر از 5/0 ثانیه باشد و یا 99% سرویس باید در دسترس باشد. بسیاری از سازمانها برای اعتبار سرویسهایی که برای استفاده از آنها هزینه پرداخت مینمایند از این روش استفاده میکنند. برای استفاده از SLA باید از یکی استانداردیهایی که برای آن تا به حال معرفی شدهاست، استفاده نمود. یکی از استانداردهای بیان شده WSLA است. WSLA استانداردی مبتنی بر XML است و به عنوان قرارداد بین تولید کننده وبسرویس و مصرف کننده آن استفاده میشود و میتوان در آن سطوح مختلفی برای ویژگیهای کیفی مختلف تعریف نمود. و یکسری شرط در صورت عدم عملکرد سرویس طبق توافق انجام شده بیان نمود. علاوه بر موارد ذکر شده در WSLA میتوان شرکت سومی را برای مانیتور کردن وبسرویس مشخص نمود تا معیارهای مورد نظر را اندازهگیری نماید و در صورت تخطی از مقادیر مشخص شده در قرارداد طرفین را آگاه سازد. یکی از مشکلات وبسرویسهای کنونی عدم حضور اطلاعات کیفی در توصیفشان است . امروزه وبسرویسها با پیادهسازی استاندارد WS-MetadataExchangeمیتواند اطلاعات کیفی خود را در توصیف سرویس وارد کنند. این ویژگیها شامل دسترسپذیری، تاخیر، زمانپاسخ و ... میباشد. ولی در حال حاضر بسیاری از این مقادیر از قبل مشخص نیستند در صورت وجود این اطلاعات به همراه توصیف وبسرویس، نمیتوان به آنها استناد نمود. حتی اگر بتوان به درستی این اطلاعات اطمینان داشت، که به صورت کاملا صادقانه از طرف تولید کننده سرویس بدست آمدهاست، نمیتوان مطمئن بود که وبسرویس در محیط اجرایی و در شرایط واقعی با وجود بار روی سرور آن، بتواند شرایط کیفی که در ابتدا معرفی شده را حفظ نماید. در نتیجه برای پی بردن به ویژگیهای کیفی واقعی سرویسها نیاز به یکسری مکانیزم برای اندازهگیری این ویژگیها وجود دارد. مکانیزمهای مختلفی برای اندازهگیری این ویژگیهای کیفی وبسرویس در جهان واقعی را میتوان بکار برد ، که هر کدام از آنها معایب و مزایایی دارند، در ادامه به صورت خلاصه به هر یک اشاره خواهد شد : اندازهگیری در سمت تولید کننده : در این روش تمام اندازهگیریها مانند شکل 2-5، در سمت سرویس انجام میگیرد در نتیجه تاخیر شبکه را نمیتوان اندازهگیری نمود. در این حالت مصرف کننده سرویس مجبور است به تولید کننده سرویس اعتماد نماید. شکل ‏25: اندازهگیری در سمت تولید کننده استفاده از واسطه SOAP : در این روش ترافیک مستقیم بین کلانیت و سرور وجود ندارد بلکه واسطهای میان این دو قرار میگیرد و دادههای کیفی را اندازهگیری مینماید. مزیت این روش قابل اعتماد بودن آن میباشد ولی عیب آن ایجاد گلوگاه و در نتیجه ایجاد تاخیر میباشد، شکل 2-6. شکل ‏26: اندازهگیری با استفاده از واسطه گمانه زنی : در این روش اطلاعات مورد نیاز با فرستادن درخواستهایی مجزا از درخواستهای مصرف کننده وبسرویس، مانند شکل2-7 مورد کاوش قرار میگیرند. گمانهزنی از روش دوم سربار کمتری دارد. شکل ‏27 : اندازهگیری با استفاده از گمانه زنی روش سمت کلاینت ( استشمامی) : در این روش تمام پکتهای ورودی/ خروجی به/ از سمت کلاینت طبق شکل 2-8 مورد بررسی قرار میگیرند. مقادیر بدست آمده در این روش خاص مصرف کننده میباشد و نمیتوان سرویس ناشناخته که تا به حال فراخوانی نشدهاست را مورد ارزیابی قرار داد. شکل ‏28 : اندازهگیری در سمت کلاینت تعاریف مختلفی از ویژگیهای کیفی وبسرویس بیان شدهاست. در ادامه تعدادی از این ویژگیها بر اساس تعاریف آمده در کارهای معرفی شدهاند : دسترس پذیری : درصدی از زمان که سرویس اجرا میشود و یا به احتمال بالا بودن و اجرای سرویس گویند. مقدار بالای این ویژگی نشان میدهد که سرویس همیشه برای استفاده آماده میباشد در حالیکه مقدار کم برای آن نشان دهنده عدم توان برای پیش بینی در دسترس بودن سرویس در زمان مشخص میباشد. ویژگیهای امنیتی که شامل وجود مکانیزمهایی برای تشخیص هویت، محرمانگی و یکپارچگی داده پیامهای رد و بدل شده را و عدم انکار درخواستها یا پیامها و مقاومت در مقابل حمله میباشد . زمان پاسخ : مدت زمان سپری شده از زمان ارسال درخواست تا دریافت پاسخ از سمت سرویس را گویند. زمان پاسخ تابعی از شدت بار است که میتوان آن را از روی تعداد درخواستها در ثانیه و یا تعداد درخواستهای همزمان بدست آورد. کارایی : این ویژگی مربوط به جنبهی کیفی سرویس میباشد که از طریق واژههای توان و تاخیر بیان میشود. توان بالاتر و تاخیر کمتر نشان دهنده کارایی خوب وبسرویس است. همچنین میتوان کارایی را تعداد درخواستهای انجام شده سرویس طی زمان مشخصی بیان کرد. تاخیر به زمان دو طرفه بین ارسال درخواست و دریافت پاسخ گفته میشود. قابلیت اطمینان : به درجه توانایی در نگهداری سرویس و کیفیت آن گفته میشود. تعداد دفعات از کار افتادن سرویس در ماه و یا در سال معیاری برای اندازهگیری این ویژگیاست. چارچوب LAP از LAP به عنوان یک چارچوب کاری ارزشمند برای سازماندهی تحقیقات و توسعههای انجام شده روی وبسرویسها استفاده میشود. بر اساس تئوری LAP میتوان یکسری متدهای طراحی برای مدل کردن برنامهها ایجاد نمود که نزدیک به نیاز کاربر باشد. LAP بر اساس تئوری speech act میباشد و در اصل بر اساس ارتباط انسانها برای رسیدن به اهداف سازمانی استوار است. در یک چارچوبکاری الهام گرفته از LAP برای مدیریت و سازماندهی تحقیقات و استاندارهای صورت گرفته در زمینه وبسرویس معرفی شدهاست. میتوان با استفاده از این چارچوب تحقیقات انجام شده در زمینه وبسرویس را بررسی نمود. در این پایاننامه نیز به منظور نشان دادن جایگاه راهکار پیشنهادی برای بازیابی وبسرویس مشابه از این چارچوب استفاده خواهد شد. از این روی در ادامه معرفی بیشتر چارچوبکاری الهام گرفته از LAP بر اساس کار آمدهاست. این چارچوبکاری الهام گرفته از LAP، متشکل از 11 لایه است، که در سه سطح اصلی تقسیم بندی میشود. نمایی از این چارچوب در شکل 2-9 آمده است. شکل ‏29 : چارچوب الهام گرفته از Lap سطح پایینتر در مورد بستر ارتباطات است. و به چگونگی انجام عملیات ارتباطی میپردازد و از سه لایه تشکیل شدهاست. نام این لایهها کانال، پیامرسانی و ضمانت میباشد. سطع بعدی عملیات ارتباطی است که به " چه جنبههایی از ارتباط " میپردازد. در این سطح تعهداتی بین طرفین برای انجام کار صورت میگیرد و در نتیجه یک تفاهم مشترک ایجاد میگردد. برای رسیدن به تفاهم، چهار فاز لازم میباشد، از این روی این سطح از چهار لایه تشکیل شدهاست. لایههای تشکیل دهنده این سطح بیان قابلیت، جستجوی قابلیت، مذاکره و تنظیم قرارداد میباشد. در لایه بیان قابلیت، استانداردهایی از وبسرویس قرار میگیرد که مرتبط به توصیف عملکردی وبسرویس توسط رابطکاربر میباشد. مهمترین استاندار در این لایه WSDL است. لایه جستجوی قابلیت به مسئله کشف سرویس میپردازد، در نتیجه امکان انتشار سرویس در مخزن توسط تولید کننده سرویس و قابلیت جستجو توسط مصرف کننده سرویس در این لایه فراهم میشود. به صورت کلی میتوان گفت تمام رهیافتهای جستجو و کشف مربوط به این لایه هستند. استانداردی UDDI این لایه قرار دارد. دو لایه بعدی به انجام مذاکره و انعقاد قرار داد میپردازند. در هنگام بستن قرارداد میتوان از SLA برای بیان ویژگیها استفاده نمود. البته در این لایه استانداردی از طرف W3C بیان نشدهاست. سطح سوم با نام ارتباط مستدل، در مورد "چرایی عملیات ارتباطی " میباشد و در آن هماهنگیهای لازم بین طرفین بر اساس تعهدات موجود برای رسیدن به هدف نهایی صورت میگیرد. در این سطح مسائلی مثل مدیریت ارتباط مطرح میشود. این سطح نیز از چهار لایه مبادله ، تراکنش ، مدیریت ارتباط و مدیریت قرارداد تشکیل شدهاست. در لایه مبادله، ارتباط میان طرفین طبق الگویی صورت میگیرد. در این رابطه میتوان به رقصآرایی اشاره نمود. در رقصآرایی دنبالهای تعریف میشود و طبق یکسری شرایط پیامهایی میان سرویسها ردوبدل میشوند تا هدف نهایی صورت گیرد. استاندارها در این لایه عبارتند از : WS–CDL، WS–CF و WS–TXM. لایه تراکنش به ترکیب سرویسها میپردازد، تمام ارتباطاتها و جریان پیامها در نظر گرفته میشود ، و در نهایت خود ترکیب نیز به صورت یک سرویس معرفی میکند . استاندارد WS–BPEL در این لایه قرار دارد. لایه مدیریت ارتباط به ایجاد ارتباط و حفظ یا بهبود آن اشاره دارد. در این لایه استانداردی از طرف W3C ایجاد نشدهاست. وظیفه لایه مدیریت قرارداد، ایجاد مکانیزمهایی برای کنترل و مانیتور کردن اجرای وبسرویس میباشد و به صورت کلی به مسئله مدیریت سرویس به عنوان یک منبع میپردازد. جمعبندی در این فصل بصورت مختصر مفاهیم پایهای موجود در پروژه از قبیل معماری سرویسگرا، وبسرویس و تکنولوژیهای مربوط به آن، ویژگیهای کیفی وبسرویس و چارچوب کاری LAP معرفی گردید. آنچه مشخص میباشد این است که هر یک از این مفاهیم میتواند دارای ابعاد فنی و کاربردی بسیار متنوعی باشد که در این فصل سعی بر آن بوده که با دید حاکم براین پایاننامه هر یک از این مفاهیم تشریح گردد. فصل سوم کارهای گذشته مقدمه بازیابی وبسرویس مشابه را یافتن وبسرویس مشابه نیز مینامند. این موضوع نقش مهمی را در محاسبات سرویسگرا دارد و چندین کار روی این موضوع صورت گرفته است. این فصل به بررسی کارهای صورت گرفته در این زمینه میپردازد. در بخش 3-2 دستهبندی کلی از کارهای انجام شده روی این موضوع، ارائه شدهاست و در ادامه در بخشهای 3-3 ،3-4 و 3-5 به صورت مختصر کارهای انجام شده در هر دسته مورد بررسی قرار گرفتهاند و به مزایا و معایب هر کدام اشاره شدهاست. در انتها در بخش 3-6 جمعبندی این فصل بیان میگردد. دستهبندی کلی کارهای گذشته با بررسی کارهای انجام شده در زمینه بازیابی وبسرویس مشابه، مشخص شد سه دسته راهکار کلی برای آن پیشنهاد شدهاست. دسته اول گروهی هستند که به صورت پویا به هنگام آمدن درخواست، اقدام به یافتن سرویس مشابه میکنند. دسته دوم گروهی هستند که در آن به صورت ایستا سرویسهای مشابه وجود دارند، برای هر سرویس تعدادی سرویس مشابه موجود میباشد، و فقط در زمان اجرا در صورت عدم عملکرد یکی از سرویسها، سرویس مشابه برای جایگزینی با توجه به شرایطی مثل مکان کاربر انتخاب میشود. و در دسته سوم برای ارزیابی شباهت رفتار خارجی وبسرویس در نظر گرفته میشود، به عنوان مثال مسیر اجرایی و یا مکالمات وبسرویس با وبسرویسهای دیگر. به دلیل عدم وجود اطلاعات در مورد رفتار خارجی در توصیف معمولی وبسرویسها، در دسته سوم بررسی سرویسها در فرایند ترکیب صورت میگیرد. لازم به ذکر است که بازیابی بر اساس شباهت زیر مجموعهی از مسئله کشف سرویس است. دسته اول کارهای پیشین در دسته بندی کلی کارهای گذشته این دسته به صورت پویا هنگام آمدن درخواست، اقدام به یافتن سرویس مشابه میکنند. کارهای ارائه شده در این دسته از روشهای مختلفی استفاده میکنند. بنابراین میتوان این روشها را نیز گروهبندی نمود. گروه اول از وبسرویسهای معمولی استفاده میکنند، وبسرویسهایی که از استاندارد WSDL برای توصیف رابط کاربرشان، توصیف وبسرویس، استفاده میکنند. گروه دوم روشهایی هستند که از وبسرویس معنایی استفاده میکنند. گروه دوم از فرایند استنتاج روی توصیفات معنایی استفاده میکنند. برای رسمی کردن این روشها معمولا از منطق توصیفی، استفاده میشود که نتیجه آن زبانهایی مانند WSMO وOWL-S میباشد. حتی اگر این روشها کارایی بیشتری نسبت به روشهایی که از WSDL استفاده میکنند داشته باشند، تعریف کردن توصیف وبسرویس بر اساس منطق تلاش زیادی را از توسعهدهنده وبسرویس میطلبد. در این پایاننامه از وبسرویسهایی که از استاندارد WSDL استفاده مینمایند، استفاده خواهد شد. به دلیل خارج بودن وبسرویسهای معنایی از حوزه تحقیقی این پایاننامه، جهت آشنایی صرفا به دو کار که در این حوزه صورت گرفتهاست در پایان این بخش اشاره خواهد شد. لازم به ذکر است که بعضی از کارهای انجام شده در گروه اول نیز به صورت تکمیلی از وبسرویسهای معنایی نیز استفاده نمودهاند. URBE : بازیابی وبسرویس بر اساس ارزیابی تشابه در مقالهیک روش جدید و کارا برای بازیابی وبسرویس مشابه ارائه شدهاست که در آن رابطکاربر وبسرویس، تعریف شده توسط استاندارد WSDL، مورد ارزیابی قرار میگیرد. در این الگوریتم تشابه بین دو وبسرویس با توجه به عناصر WSDL محاسبه میشود. به دلیل استفاده از این روش در فصلهای آتی به صورت مفصلی این کار تشریح شدهاست. یکی از اهداف اصلی بازیابی وبسرویس جایگزینی آن میباشد. این جایگزینی میتواند در دو زمان طراحی و اجرا اتفاق بیفتد. برای امکانپذیر شدن جایگزینی باید رابطکاربر سرویس جایگزین برابر و یا کاملتر از رابطکاربر سرویس اولی باشد. در این رهیافت ارتباط بین عناصر اصلی WSDL مثل portType، متدها و پیامهای ورودی/خروجی متدها در نظر گرفته شدهاست. در این کار هر دو جنبه ساختاری و معنایی وبسرویس را که میتوان از WSDL مشتق نمود در نظر گرفته شدهاست. جنبههای معنایی مربوط به هدف وبسرویس میباشد، که در ارتباط با نامهایی است که برای کل سرویس در نظر گرفته شدهاست مثل نامهای متدها، پارامترها ورودی وخروجی و portType. در عوض جنبههای ساختاری بر اساس سازگاری بین ساختارهای ورودی و خروجی و تطابق پذیری انواع دادهای میباشد. برای شباهت اجزای مختلف وزنهای مختلفی در نظر گرفته شدهاست. درخواست کننده وبسرویس، بعد از ارسال رابطکاربر سرویس مورد نظر خود، میتواند به عنوان خروجی لیستی از سرویسهای مشابه با آن وبسرویس را دریافت نماید. پس از دریافت رابطکاربر مورد نظر مقایسهای با تمام رابطهایکاربر وبسرویسهایی که در مخزن منتشر شدهاند انجام میشود و اگر درجه شباهت بزرگتر از مقدار از بیش تعیین شدهای باشد، آن سرویس به نتیجه اضافه می شود. ارزیابی شباهت در URBE با استفاده از تابع fSim درجه شباهت بین دو وبسرویس محاسبه میشود. این تابع بر اساس دو تابع اصلی nameSim و TypeSim میباشد. تابع nameSim دو نام را در رابطکاربر وبسرویس مقایسه میکند و چگونگی شباهت آنها را ارزیابی میکند و تابع TypeSim شباهت بین دو نوع داده را مشخص میسازد. برای هر دوی این تابعها یک تابع ماکزیمم کننده با نام maxSim تعریف شدهاست. این تابع ماکزیم کننده از مدل برنامهنویسی خطی استفاده میکند و توانایی یافتن تصمیم بهینه در مقایسه را دارد. برای استفاده از آن مسئله به گراف دو قسمتی تبدیل شدهاست و سپس بیشترین شباهت بین عناصر دو گروه یافت می شود. هدف از maxSim با توجه به نوع استفاده از آن متفاوت میباشد، به عنوان مثال اگر دو پارامتر مقایسه شود، maxSim نامها و نوعهای آنها را در نظر میگیرد و در حالتیکه دو متد با هم مقایسه میشود، maxSim بر اساس شباهت بین نام و نوع دادهای متدها و تمام پارامترهای آن میباشد. این رهیافت کمک مینماید که شباهت ماکزیمم سراسری از مقایسه تمام عناصر بدست آورده شود. هدف از فانکشن nameSim بدست آوردن شباهت بین نامها با توجه به نزدیکی نامها در هستانشناسی میباشد. در این قسمت از هستانشناسی مستقل از دامنه استفاده شدهاست که شامل تمام واژههای ممکن میباشد، بدین منظور از Wordnet استفاده شدهاست. در ادامه نمادهای استفاده شده برای مدل کردن مسئله معرفی میشود. : نماد وبسرویس میباشد که توسط نام منحصر به فرد name و مجموعه K تایی از عملیات تعریف میشود. : نماد متد وبسرویس با نام name و l پارامتر ورودی و m پارامتر خروجی است. : پارامتر ورودی با استفاده نام name و نوع دادهای type ، که میتواند به صورت ساده و یا پیچیده باشد، تعریف میشود. : پارامتر خروجی با استفاده نام name و نوع دادهای type ، مانند پارامتر ورودی تعریف میشود. : به عنوان مخزن وبسرویس در نظر گرفته شدهاست. لازم به ذکر است که نماد ، مطابق با portType است. در جدول 3-1، تطبیق عناصر WSDL با نمادهای تعریف شده آورده شدهاست. تابع TypeSim شباهت بین دو نوع دادهای را بدست میآورد. در توصیف وبسرویسها، انواع دادهای توسط XSD بیان میشود. نوع داده میتواند ساده و یا پیچیده باشد. برای مقایسه اگر هر دو نوع داده از نوع ساده باشند بر اساس جدول 3-2، شباهت محاسبه میشود و اگر از دو نوع داده ساده و پیچیده باشند شباهت آن دو صفر است. و اگر دو نوع داده پیچیده باشد به منظور کاهش پیچیدگی کلی الگوریتم روی معانی دادهها به جای ساختار آنها تمرکز شدهاست در نتیجه در این حالت فقط از nameSim استفاده میشود. مشخصا در نظر گرفتن ساختار باعث دقت بیشتری میشود ولی به دلیل انجام این مقایسه به تعداد زیاد ، باید حد واسطی بین زمان اجرا و دقت قائل شد. جدول ‏32 : شباهت نوع دادههای ساده برای بدست آوردن شباهت کلی، هر رابط کاربر وبسرویس به صورت یک درخت سه سطحی مانند شکل 3-1 نمایش داده میشود. این شکل یک دید سطح بالا از تابع ایجاد کردهاست. سطح اول نشان دهنده portType ، ، میباشد. سطح بعدی مجموعهای از متدها، ، هستند و سطح آخر بیانگر پارامترهای متدها،، است. برای محاسبه درجه شباهت کلی، درجه شباهت در سه سطح به صورت تو در تو محاسبه میشود. شکل ‏31 : نمایش سه سطحی و مقایسه تو در تو تابع شباهت ، شباهت بین رابطکاربر دو وبسرویس ورا محاسبه میکند. به صورت جزیی این تابع، شباهت بین دو وبسرویس بر اساس شباهت بین دو portType حساب میکند و شباهت دو portType بر اساس شباهت دو متد ،، است که این شباهت نیز بر اساس شباهت بین پارامترهای ورودی و خروجی ،، میباشد. تابع شباهت در فرمول 3-1 آمدهاست. فرمول ‏3-1 : تابع fSim در فرمول 3-1، بیانگر میزان اهمیت شباهت نام portType نسبت به شباهت بین متدهایی که در این portType وجود دارند. به همین طریق، در سطح متدها، پارامتر درجه اهمیت شباهت نام متد را نسبت به شباهت بین پارامترهای آن در هنگام محاسبه شباهت بین متدها را نشان میدهد. در آخر، نشانگر میزان اهمیت شباهت نام پارامترها نسبت به شباهت نوع دادهای در هنگام محاسبه شباهت بین پارامترها است. یکی از اهداف اصلی برای یافتن سرویس مشابه جایگزینی وبسرویس میباشد، از این روی هر اندازه عدد بدست آمده از بزرگتر باشد زحمت کمتری در هنگام جایگزینی ایجاد خواهد شد. اگر باشد به این معنا است که دو وبسرویس رابطکاربر کاملا مشابهی دارند و اگر باشد رابطکاربر دو وبسرویس کاملا با یکدیگر متفاوت میباشد. شباهت بدست آمده از طریق ، استوار بر جنبههای ساختاری و نحوی است. توسط این تابع شباهت نمیتوان بیان نمود که به ازای یک ورودی هر دو سرویس خروجی یکسانی تولید میکنند. زیرا برای این کار باید دو سرویس از جنبه معنایی کاملا یکسان باشند. این مقاله فقط از جنبه عملکردی به مقایسه میان سرویسها پرداختهاست. از نقاط ضعف این کار میتوان به در نظر نگرفتن ساختار دادههای پیچیده اشاره کرد و اینکه فرض شدهاست که هر وبسرویس یک portType دارد. تطابق معنایی و ساختاری برای سنجیدن تشابه در وبسرویس به علت ناکارا بودن روشهای کشف سرویس به شیوه فهرست گونه در مقاله برای کشف سرویس به شیوهای جدید، یکسری روش برای مشخص نمودن شباهت بین دو توصیف وبسرویس بیان شدهاست. در این کار برای یافتن شباهت بین دو توصیف وبسرویس، یکسری روشهای مکمل بیان شدهاست که از یک طرف ساختار انواع دادهای، پیام ها و متدها مورد بررسی قرار میگیرند و از طرف دیگر معنای شناسهها و توصیفات زبان طبیعی بررسی میشوند. برای یافتن شباهت ساختاری، ساختار داخلی سرویس با سرویسهای موجود مقایسه میشود و شباهت بین سرویسها بدست آورده میشود. برای یافتن شباهت معنایی بین وبسرویسها از توصیفات متنی که در توصیف وبسرویس وجود دارد، استفاده شدهاست. در این خصوص توصیفات متنی سرویسهای موجود با استفاده از ارزیابی شباهت متنی با مدل فضای برداری مقایسه شدهاند. در ادامه به خاطر حل کاستیهای مدل فضای برداری در مورد درنظر گرفتن کلمات در سطح لغوی و چشم پوشی روی اطلاعات معنایی مربوط به مترادفها و متشابهها، این مدل با WordNet توسعه داده شدهاست. روش دیگر تطبیق روی ساختار توصیف وبسرویس را انجام میدهد که شامل مقایسه مجموعه متدهای سرویس میباشد، که از طریق مقایسه ساختار پیامهای ورودی/ خروجی که آن نیز بر پایه مقایسه انواع دادهای میباشد صورت میگیرد. نقطه ضعف این کار در نظر نگرفتن تعداد متدها و پارامترهای وبسرویس میباشد. جستجوی شباهت برای وبسرویسها در مقاله موتور جستجو برای وبسرویسها به نام Woogle بیان شدهاست. در این کار فرض شدهاست که در ابتدا کاربر با کلید واژه جستجو را آغاز میکند و کار را ادامه میدهد تا وبسرویس مورد نیاز خود را پیدا کند. حال اگر به هر دلیلی وبسرویس یافت شده برای کاربر مناسب نباشد، برای جلوگیری از تکرار جستجو توسط کاربر، این امکان ایجاد میشود که کاربر جستجوی برای یافتن متدی مشابه با متد سرویس اولی جایی که ورودی/خروجی مشابه دارند، داشته باشد. در راه حل ارائه شده توسط این مقاله شباهت بین توصیفات متدها و بین نام پارامترهای آن صورت میگیرد. قسمت اصلی این الگوریتم خوشه بندی کردن نام پارامترها در مجموعه وبسرویسها به مفاهیم با معنی میباشد که در ادامه میتوان با مقایسه کردن این مفاهیم نتیجه خوبی از جستجو گرفت. نام پارامترها معمولا دنبالهای از کلمات پیوسته میباشد مثل LocalTimeByZipCodeResult ، به چنین کلماتی ترم میگویند. در این کار از رخداد با هم ترمها در ورودیها/ خروجیها برای خوشهبندی ترمها به مفاهیم با معنی استفاده شدهاست. الگوریتم استفاده شده پالایشی از خوشهبندی agglomerative میباشد. روش خوشهبندی به کار رفته بر اساس تابع تجربی میباشد که در آن اینگونه فرض شدهاست: " پارامترها یک مفهوم را بیان میکنند اگر با یکدیگر معمولا اتفاق بیفتند ". برای خوشهبندی از معیار رخداد با هم واژهها در ورودی/خروجی متدها استفاده شده است. نام پارامترها به مفاهیم با معنی از این طریق دسته بندی شدهاست. در ادامه از این مفاهیم بدست آمده برای محاسبه شباهت بین متدها استفاده میشود. شباهت بین ورودی/خروجی بستگی به شباهت بین نامها و مفاهیم بدست آمده از الگوریتم خوشهبندی دارد. برای شباهت نامها پس از یک پیش پردازش از معیار TF/IDF استفاده شدهاست و برای شباهت مفهومی، به جای هر واژه مفهوماش جایگزین شده و مجدد از TF/IDF استفاده میشود. میتوان از نقطه ضعف این روش به این موضوع اشاره نمود که در آن فقط میتوان یک متد از وبسرویسی را مقایسه نمود. و چون هر وبسرویس میتواند بیش از یک متد داشته باشد میتوان گفت که روش پیشنهادی مقایسه بین دو وبسرویس نیست بلکه مقایسه بین متدهای وبسرویس است. بازیابی وبسرویس با دقت بالا در مقاله سرویسها به صورت مدل فرایند مدل شدهاند. در مرحله اول رفتار سرویس با استفاده از مدل فرایند نشان داده میشود. در این مدل، رفتار سرویس که نشان دهنده کار انجام شده توسط سرویس است، به صورت مجموعهای از زیر فعالیتهای متصل به هم معرفی میشود. وضوح بیشتر مدل فرایندی نسبت به استفاه از کلید واژه برای توصیف وبسرویس باعث افزایش دقت بازیابی میگردد. در ادامه برای جستجو در این مدل، زبان PQL طراحی شدهاست. جستجوهای PQL میتواند موارد تطبیق موجودیتی و هر نوع رابطهای را بین دو موجودیت را مشخص نماید. الگوریتمی بازیابی استفاده شده در جستجوهای PQL، ساده میباشد. نوآوری این کار نحوهی استخراج کردن معانی خاص از به مدل فرایند میباشد. از موارد ضعف روش پیشنهادی میتوان به این موارد اشاره کرد: در دنیای واقعی، تبدیل وبسرویسها به مدل فرایند کار زمانگیری میباشد و باید توسط توسعهدهندگان اولیه سرویسها صورت گیرد. پس در شرایطی که یکسری از سرویسها از قبل ایجاد شدهاند، این امر را ناممکن میکند و حتی در مورد سرویسهای جدید هم ایجاد چنین مدل فرایندی سخت و زمانگیر میباشد. همچنین در این روش ممکن است جستجویی انجام شود که از لحاظ معنایی با سرویسی هم خوانی دارد ولی از نظر لغوی متفاوت باشد، در نتیجه سرویسی یافت نمیشود. جستجو در مخزن سرویسها توسط ترکیبی از تطبیق معنا و هستان شناسی در مقاله استفاده از هستانشناسی مستقل از دامنه و مخصوص به دامنه برای یافتن سرویسهای مشابه بیان شدهاست. ارتباطات مستقل از دامنه با استفاده از فرهنگ جامع بدست میآید. شباهت وابسته به هستان شناسی مخصوص دامنه، توسط استنتاج روی توصیفات معنایی که همراه با توصیفات وبسرویس میباشد صورت میگیرد. در ادامه تطبیق بر اساس دو روش با یکدیگر ترکیب شده و رتبه شباهت کلی بدست آورده میشود. اطلاعات مستقل از دامنه وسعت پوشش روی کلمات متداول را میدهد، در حالیکه هستان شناسی خاص دامنه عمقی از پوشش را بر اساس واژههای خاص برنامه کاربردی و ارتباطات میان آنها ایجاد مینماید. برای یافتن سرویسهای مرتبط با استفاده از ارتباطات مستقل از دامنه، از فرهنگ جامعی مثل WordNet استفاده میشود. برای پیدا کردن ارتباطات عمیقتر بر اساس واژههای خاص صنعت و برنامه کاربردی از هستانشناسی مخصوص به دامنه استفاده گردیدهاست. و در ادامه برای یافتن واژههای مرتبط، از استنتاج بر پایه قانون استفاده شدهاست. در این مدل سه رابطه کلاس معادل، زیر کلاس و کلاس بالاتر در نظر گرفته شدهاست و طرحی ساده برای محاسبه فاصله بین مفاهیم مرتبط در هستانشناسی بیان گردیدهاست. در ادامه نتیجه بدست آمده در دو روش برای تصمیم گیری نهایی استفاده میشود. نقطه ضعف این کار داشتن تمرکز فقط روی واژهها میباشد و ساختار WSDL در نظر گرفته نشدهاست. جستجوی وبسرویس با استفاده ازتطبیق متنی هستهای مقاله به دنبال یافتن معانی پنهان با استفاده از ساختار سرویس میباشد. در روش فرض شده وبسرویس با استفاده از استانداردWSDL نمایش داده میشود. در ادامه برای بررسی شباهت وبسرویس توسط درختی ساختیافته نمایش داده میشود و دو نوع ویژگی از آن استخراج میشود. ویژگی اول شباهت متنی بین اسناد است که با استفاده از مدل فضای برداری محاسبه شدهاست. ویژگی دوم شباهت ساختاری میباشد. برای بررسی شباهت ساختاری از عملیات هستهای n-طیفی استفاده شدهاست. با استفاده از این روش میتوان میزان ارتباط سلسله مراتبی دو درخت را با توجه به میزان اشتراک دو درخت مشخص نمود. بعد از نمایش درختی سرویس و استفاده از روش فضای برداری و عملیات هستهای n-طیفی، مدلی برای تخمین شباهت عملکردی بین سرویسها بیان شدهاست. پارامترهای استفاده شده در این مدل با استفاده از روشهای SVM و Ranking-SVM محاسبه میشوند. از معایب این کار میتوان به بیان نکردن جزئیات کار اشاره نمود . این کار فقط به آوردن نام روشهای بسنده کرده است و به نحوه استفاده از این روشها پرداخته نشدهاست. معماری بهینه عاملگرا برای کشف اتوماتیک سرویس با استفاده از ویژگیهای کیفی با توجه به اهمیت ویژگیهای کیفی برای کاربران وبسرویس روشی در مقاله پیشنهاد شدهاست که در حین کشف سرویس مورد نظر ویژگیهای کیفی نیز در نظر گرفته شود. از این روی فرض شدهاست که تولید کننده وبسرویس در زمان انتشار سرویس در مخزن UDDI ویژگیهای کیفی سرویس خود را هم بیان کند. از طرف دیگر در زمان انتشار سرویس توسط عاملی صحت این اطلاعات چک میشود. سپس کاربر درخواست خود را برای یافتن سرویس مورد نظر همراه با ویژگیهای کیفی مورد نظر ارسال میکند و در ادامه جواب را که بر اساس این دو ویژگی دریافت میکند. از نقاط ضعف این روش میتوان عدم اشاره به نحوه تصمیمگیری و چگونگی محاسبه نزدیکی ویژگیهای کیفی و عملکردی به نیازمندیهای کیفی و عملکردی کاربر اشاره نمود. همچنین در این روش ویژگیهای کیفی سرویسها فقط در لحظه انتشار وبسرویس در مخزن چک میشود در حالیکه وبسرویسها میتوانند رفتار پویایی داشته باشند و این رفتار روی ویژگیهای کیفی آنها تاثیر میگذارد. در نتیجه ممکن است ویژگیهای کیفی عنوان شده برای وبسرویس با مقدار واقعی آنها در طی زمان یکسان نباشد. پس تصمیمگیری بر اساس آنها از دقت بالایی برخوردار نیست. WSXplorer : جستجو برای یافتن وبسرویس مطلوب در مقاله روشی برای شناسایی وبسرویسهای مشابه بیان شدهاست که در آن متدهای وبسرویس مورد بررسی قرار میگیرند. از این روی روشی با نام WSXplorer برای یافتن وبسرویس مشابه بیان شده که ابتدا در آن با استفاده از معیار TF/IDF متدهای مشابه در وبسرویسهای مختلف شناسایی میشوند. به این متدها، متدهای کاندید گفته میشود. در ادامه فرض شدهاست که دو متد کاندید با یکدیگر مشابه هستند اگر نوع دادهای ورودی/خروجی مشابهی داشته باشند. برای بررسی این نوع شباهت، انواع دادهای متدهای وبسرویس به صورت درخت نمایش داده میشود و در ادامه به بررسی شباهت میان درختها پرداختهاست. برای محاسبه فاصله میان درختها از فاصله ویرایشی استفاده شدهاست. با استفاده از فاصله ویرایشی میتوان سه عمل اضافه کردن نود، حذف نود و عوض کردن برچسب نود را انجام داد. همچنین در این مقاله به موضوع یافتن ارتباط میان متدهای سرویسها پرداخته شدهاست. در این راستا فرض میشود که دو متد با یکدیگر در ارتباط هستند، اگر خروجی یکی مشابه با ورودی دیگری باشد. در این کار برای محاسبه شباهت بین انواع دادهای، انواع دادهای ساده را به پیچیده تبدیل کردهاست به عنوان مثال به جای دادهی int از نوع پیچیده userID استفاده میکند. از نقطه ضعف این مقاله میتوان به همین نکته اشاره نمود که چگونه میتوان فقط با در دست داشتن توصیف وبسرویس و بدون هیچ اطلاعی از منطق سرویس نوعهای دادهای ساده را به پیچیده تغییر داد و با توجه به این تغییرات شباهت را ارزیابی نمود. همچنین برای در نظر گرفتن شباهت بین دو متد استفاده از معیار TF/IDF نمیتواند دقیق باشد. زیرا با این روش متدهایی با نامهای مختلف اما با یک معنی را نمیتوان مشابه تشخیص داد. در ادامه به دو کار صورت گرفته در حوزه وبسرویس معنایی برای یافتن سرویس مشابه اشاره خواهد شد. تطبیق بر اساس هستانشناسی ترکیبی برای کشف سرویس مقاله به بازیابی وبسرویسهای معنایی پرداختهاست و از هستانشناسی برای کشف سرویس استفاده شدهاست. راه ارائه شده ترکیبی از استراتژی استنتاجی روی منطق توصیفی میباشد که توسط آن، استنتاج روی دانش هستانشناسی برای فهمیدن نوع انطباق میان سرویسها صورت میگیرد و در قسمتی دیگر شباهت بین نامها را در نظر گرفته شدهاست. برای انجامپذیر شدن این کار یک چارچوب کاری متشکل از سه لایه برای هستانشناسی سرویسها تعریف شدهاست. لایههای مذکور به این صورت هستند : لایه سوم سرویس پیادهسازی شدهاست که قابل فراخوانی میباشد، لایه دوم : سرویس انتزاعی است که کارایی یکسری وبسرویس مشابه را معرفی میکند و لایه اول : سرویسهای انتزاعی را به گروههای استاندارد دستهبندی میکند تا دسترسی موضوعی را ایجاد نماید. رهیافت استنتاجی با توجه به توصیفات معنایی میتواند چند گروه شباهت را تشخیص دهد. از نقاط ضعف به موارد زیر می توان اشاره نمود : این کار به صورت بسیار کلی گفته شده است و به جزییات لازم پرداخته نشدهاست. ساختن منطق توصیفی برای وبسرویس، توانایی زیادی از توسعه دهنده میطلبد. نتیجه این کار پیدا کردن یکسری سرویس با اهداف مشابه است و نمیتوان چیزی در مورد چگونگی رسیدن به هدف بیان کرد. به همین دلیل نمیتواند راه مناسبی برای پیدا کردن سرویس مشابه جهت جایگزینی باشد. انتخاب سرویس ترکیبی با استفاده از تحلیلگر SAWSDL-MX و WSDL یک تطبیق دهنده معنایی ترکیبی برای سرویسهای SAWSDL در مقاله بیان شدهاست. در این روش سه نوع شباهت معنایی برای بررسی شباهت با سرویس درخواستی بیان شدهاست. این سه شباهت بر اساس منطق، شباهت متنی و ساختاری هستند. شباهت کلی بر اساس این سه شباهت بدست آمده محاسبه میشود. برای مقایسه معنایی سرویسها و یا شباهت بر اساس منطق، چهار فیلتر Exact، Plug-in، Subsumes و Subsumed-by تعریف شدهاست و با توجه به توضیحات معنایی که در سرویسها SAWSDL وجود دارد میزان شباهت بر اساس این فیلترها محاسبه میشود. شباهت متنی بعد از تبدیل سرویس درخواستی و سرویسهای موجود به برداری از کلید واژه، شباهت بر اساس معیارTF/IDF بدست میآید. برای محاسبه شباهت ساختاری از روشی که در مقالهبیان شده، استفاده میشود که در آن از توضیحات معنایی موجود صرف نظر میشود. سپس شباهت میان متدهای سرویس با توجه به شباهت بین نام متدها و پیامهای ورودی/خروجی و نوع آنها بدست میآید. در ادامه به دنبال یافتن بهترین ترکیب برای شباهتهای بدست آمده میباشد از این جهت از روش دسته بندی SVM برای آموزش روی دادههای آزمایشی برای فهمیدن ارتباط معنایی بین سرویسها استفاده نمودهاست، در این قسمت دو کلاس مرتبط و غیرمرتبط تعریف میشود. در ادامه از این روش برای فهمیدن شباهت، ارتباط و یا عدم ارتباط با سرویس درخواستی، سرویسهای ناشناخته استفاده میشود. این روش مناسب برای یافتن سرویس مشابه جهت جایگزینی نمیتواند باشد چون توسط این روش سرویسها به دو گروه مرتبط و غیرمرتبط با سرویس درخواستی شناخته میشوند. در حالیکه سرویسها بر اساس شباهت بدست آمده رتبه بندی نمیشوند. اگر سرویسها بر اساس شباهت به دست آمده رتبهبندی شوند، کاربر به راحتی میتواند از میان سرویسهای رتبه بالا یکی را انتخاب نماید و جایگزین سرویس اولیه نماید. اما انتخاب سرویس جایگزین از بین سرویسهایی که فقط ارتباط و یا عدم ارتباطشان مشخص است کاری دشوار میباشد. دسته دوم کارهای پیشین همانطور که قبلا نیز اشاره شد در این دسته از کارها، برای هر سرویس تعدادی سرویس مشابه از قبل موجود میباشد و فقط در زمان اجرا در صورت عدم عملکرد یکی از سرویسها، سرویس مشابه برای جایگزینی با توجه به شرایطی انتخاب میشود. در ادامه به کارهای انجام شده در این دسته اشاره خواهد شد. روش مقیاسپذیر برای انتخاب کیفی وبسرویس در مقاله به انتخاب بهترین سرویس از بین سرویسهای مشابه موجود در فرایند ترکیب سرویسها پرداختهاست. در این روش نیز یکسری سرویس انتزاعی در نظر گرفته میشود. برای هر سرویس انتزاعی گروهی از وبسرویسهایی مشابه با ویژگیهای کیفی متفاوت وجود دارد. در ادامه تعریف انتزاعی و حقیقی از فرایند ترکیب وبسرویسها بیان شدهاست. هدف یافتن ترکیبی است که بهترین کارایی از لحاظ ویژگیهای کیفی را داشته باشد. در ادامه بدنبال یافتن روشی برای این مسئله است که در آن مجبور به چک کردن تمام حالات موجود نباشد. در این روش نیز سرویسها مشابه از قبل وجود دارند، اگر فرض شود برای یافتن سرویس مشابه از نظر کیفی از این روش استفاده شود، هیچ تضمینی وجود ندارد که سرویس انتخاب شده بهترین نزدیکی را با ترجیحات کاربر در این زمینه داشته باشد. چون توسط این روش سرویسهایی انتخاب میشوند که باعث بالا بردن کیفی کل فرایند شوند لذا ممکن است سرویسی انتخاب شود که اصلا مطابق با ترجیحات کیفی کاربر برای وبسرویس مورد نظر نباشد. رهیافتی به سمت جایگزینی وبسرویس در مقاله برای یافتن وبسرویس مشابه و معرفی آن به عنوان سرویس جایگزین پیشنهاد شدهاست که از انجمنی از وبسرویسها استفاده شود. انجمنی از وبسرویس به معنای جمعآوری وبسرویسهایی هست که نیازمندیهای یکسان کاربر را فراهم میسازند ( اگرچه این وبسرویسها ویژگیهای غیر عملکردی متفاوتی دارند مانند تولیدکنندگان متفاوت و پارامترهای کیفی مختلف). دسترسی به سرویسهای موجود در یک انجمن از طریق یک رابط کاربر مشترک تحت عنوان OSC صورت میگیرد. این رابط کاربر مشترک درخواستها را به وبسرویسها منتقل کرده و پاسخ را از آنها دریافت میکند، بدون توجه به اینکه وبسرویسها چگونه تعریف شدهاند، پیادهسازی شدهاند و در کجا قرار دارند. روش پیشنهاد شده برای حل مسئله، دو گام دارد. گام اول وبسرویسهایی که از نظر عملکرد با هم مشابهند را در یک انجمن قرار میدهد، در نتیجه چند انجمن از وبسرویسها شکل میگیرد که هر یک شامل چند وبسرویس مشابه میباشد. در ادامه توسط وبسرویس انتزاعی، واسطی را فراهم میکند که دسترسی به انجمن از طریق آن صورت میگیرد. این واسط عملکرد انجمن را با مجموعهای از عملیات انتزاعی توصیف میکند. در گام دوم برنامههای کاربردی سرویسگیرنده، به واسط هر کدام از انجمنهای متصل میشوند، شکل 3-2. شکل ‏32 : انجمن وبسرویس در ادامه واسطها که همان وبسرویسهای انتزاعی برای هر انجمن هستند در مخزن UDDI/AWS، ثبت میشوند. در هنگام فراخوانی سرویس، وبسرویس انتزاعی فراخوانی میشود و سپس این درخواست به انجمن وبسرویس ارسال میشود و بر اساس ترجیحات کاربر وبسرویس واقعی فراخوانی میشود و با توجه به یکسری قوانین نگاشت تعریف شده از قبل، ورودیها تبدیل به ورودیهای مناسب برای سرویس انتخابی میشود. در این مقاله به صورت ایستا سرویسهای معادل از قبل موجود هستند و فقط یکسری از کارها برای حل مشکلات ناشی از ناسازگاری نام گذاریهای متدها و پارامترهای آنها و همچنین تفاوت در انواع دادهای، از طریق یکسری قوانین نگاشت از پیش تعریف شده انجام میشود. از مشکلات این روش میتوان به ایجاد یک گلوگاه در هنگام فراخوانی هر سرویس اشاره نمود. این روش به علت رویکرد ایستایی که دارد، روش عامی نمیتواند باشد و فقط در شرایط خاصی میتوان از این روش استفاده نمود. علاوه بر این به نحوه استخراج ترجیحات کاربر و ارزیابی شباهت ویژگیهای سرویس با این ترجیحات اشارهای نشدهاست. تغییر مولفه و ترکیبی از سرویسهای آگاه از زمینه بر پایه استفاده از تکنیکهای وب معنایی تاثیر تغییر پویای سرویسها بر روی ترکیب سرویسها در مقاله نشان داده شدهاست و یک چارچوب برای ترکیب وبسرویسها به صورت انعطافپذیر بیان میشود. در روش پیشنهادی سناریوی ترکیبسرویس در سطح معنایی ترجمه میشود و وبسرویسهای مربوطه انتخاب و به آن متصل میشوند. اگر وضعیت کاربر در طی زمان تغییر کند، وبسرویس انتخاب شده نیز با تغییر زمینه کاربر تغییر میکنند. در فرایند ترکیب، سرویسهای انتزاعی با استفاده از فرادادههای معنایی با یکدیگر ترکیب میشوند. در ادامه موتور ترکیب مولـفههـای سرویس منـاسب را کشف نموده و به آنها متصل میشود. در اینجا ترکیب سرویس به صورت انتزاعی و با استفاده از فراداده معنایی، مولفههای مورد نیاز خود را بیان میکند. این امر باعث میشود بتوان سرویسهای با نامهای واسط مختلف ولی به صورت معنایی با کارایی معادل انتخاب نمود. طبق شکل 3-3 ترکیب سرویس که با نماد ST نشان داده شدهاست، میتواند سرویسهای مناسب را از بین سرویسهای کاندید، که با نماد SE نمایش داده میشود ، که به صورت معنایی کارایی معادلی دارند را انتخاب نماید . شکل ‏33 : فرایند ترکیب با استفاده از سرویسهای انتزاعی در شکل3-4 دایرهها، مربعها و شش ضلعیها عملیات معادل از نظر معنایی را نشان میدهند. سرویس مناسب از بین سرویسهای کاندید بر حسب موقعیت کاربر انتخاب شود. برای انتخاب سرویس مناسب روشی پیشنهاد شدهاست که سرویسها را بررسی کرده و به آنها امتیاز میدهد و در نهایت به صورت خودکار یا دستی، سرویسی که بیشترین امتیاز را دارد انتخاب میشود. حال با تغییر موقعیت کاربر، تغییر سرویس امکان پذیر است. این کار با نگهداری سرویسهای مناسب و تغییر آنها در هنگام تغییر موقعیت کاربر امکان پذیر میباشد. در این کار نیز سرویسهای مشابه از قبل مشخص هستند و با توجه به موقعیت کاربر و تغییر آن، سرویس معادل پیدا میشود. در نتیجه باز هم روش ارئهشده یک روش کلی و عام نمیباشد و میتوان از آن فقط در شرایط خاصی استفاده نمود. در این کار به جزئیاتی در مورد چگونگی اطلاع از موقعیت کاربر و ارزیابی شباهت ویژگیهای سرویس با آن پرداخته نشدهاست. جایگزین نمودن وبسرویس بر اساس ترجیحات غیر عملکردی در این مقاله نیز مانند دیگر کارهای انجام شده دسته دوم، یکسری وبسرویس مشابه موجود هستند. حال برای انتخاب میان آنها از خصوصیات کیفی استفاده شدهاست. در این مقاله از شبکه ترجیحات برای نمایش و استنتاج در مورد ترجیحات کاربر در زمینه خصوصیات کیفی استفاده شدهاست. مسئله بیان شده در دو حالت به انتخاب سرویس جایگزین در فرایندی که شامل چند سرویس میباشد، پرداختهاست. در حالت اول به انتخاب سرویس مستقل از فرایند ترکیب پرداختهاست و در حالت دوم برای انتخاب سرویس کل فرایند و تاثیر سرویس جدید روی فرایند در نظر گرفته شدهاست. از نقاط ضعف این کار میتوان به موارد زیر اشاره نمود : در این مقاله به نحوه بدست آوردن ترجیحات کاربر اشارهای نشدهاست. این ترجیحات در چند سطح کم، متوسط و زیاد تعریف شدهاند و در ادامه استدلالها بر اساس این گونه تعریف صورت گرفتهاست. تعریف کردن ترجیحات در چند سطح نمیتواند دقیق باشد. زیرا افراد مختلف تلقی مختلفی از این سطوح دارند. و به خاطر نوع ایستایی که در انتخاب سرویس وجود دارد این روش نیز عمومیت نخواهد داشت. دسته سوم کارهای پیشین این دسته از کارهای پیشین رفتار خارجی وبسرویسها مثل مسیر اجرایی و یا مکالمات سرویس با سرویسهای دیگر را در نظر میگیرد. به دلیل عدم حضور این اطلاعات در توصیف وبسرویس، بررسی سرویسها در فرایند ترکیب صورت میگیرد. تحلیل سازگاری رفتاری و شباهت میان وبسرویسها با استفاده از رهیافت Petri Net مقاله به شباهت رفتاری و یا به عبارتی به سازگاری رفتاری وبسرویسها به منظور جایگزینی وبسرویس در فرایند ترکیب پرداختهاست. شباهت رفتاری به این معنی میباشد که رفتار دو سرویس به اندازهای با هم اشتراک داشته باشد که بتوان یکی را جایگزین دیگری در فرایند ترکیب نمود. در این کار رفتار سرویس توسط مدل رسمی Petri Net بیان شدهاست. مدل Petri Net یک مدل ریاضی میباشد که برای مدل کردن رفتارهای همروند، غیر همزمان و موازی در سیستمهای توزیع شده بکار میرود. امروزه برای مدل کردن رفتار وبسرویسها نیز از این مدل استفاده میشود. با نمایش رفتار سرویس توسط این مدل میتوان علاوه بر مدل کردن منطق داخلی و دنباله پیامهای سرویس، مکانیزمهایی را برای سازگاری و شباهت بین وبسرویسها بیان نمود. در ادامه با توجه به تعریفهایی که برای سازگاری وبسرویسها در این مدل بیان میشود به بررسی سرویسها پرداختهاست. به اذعان خود مقاله روش پیشنهادی پیچیده میباشد. سازگاری سرویسهای الکترونیکی در محیط چند بستری همکارانه فرایند همکارانه یک فرایند کسبوکار پیچیده میباشد که از سازمانهای مختلف تشکیل شدهاست. بر خلاف فرایند جریان کاری قدیمی که تمام فعالیتها بستگی به یک سازمان داشت و یا از یک بستر از قبل تعریف شده استفاده میشد، در فرایند همکارانه فعالیتها میان سازمانهای مختلف شکل میگیرند. هر سرویس در فرایند همکارانه، نشانگر قراردادی از سازمان مربوطه است. حال اگر همان سازمان یا سازمان دیگری سرویس جدیدی را به جای سرویس توافق شده ارائه نماید باید سازگاری سرویس جدید با سرویس قبلی بررسی شود. سازگاری به این معنا میباشد که رفتار سرویس جدید، محدود به رفتار سرویس قبلی باشد. در مقاله الگوریتمی برای چک کردن سازگاری بر اساس رفتار خارجی وبسرویس ارائه شدهاست. در این کار رفتار خارجی وبسرویسها مثل مکالمات آنها مقایسه میشود. برای این کار مکالمات وبسرویس به صورت ماشین حالت در نظر گرفته میشود و در ادامه با مقایسه ماشین حالت سازگاری بین سرویسها ارزیابی میشود. سرویس D میتواند رفتار خود را محدود به رفتار سرویس مشخص دیگری به نام C نماید، اگر بتواند به دنبالهای از رخدادهای سازگار عکسالعمل مشابهای نشان دهد. به صورت کلی سرویس D میتواند عکسالعمل به رخدادهای دیگری را نیز داشته باشد ولی فرایند همکارانهای که از C استفاده میکند میتواند تضمین نماید که چنین رخدادی روی نمیدهد در نتیجه فرایند همکارانه با سرویس D نیز میتواند به درستی کار نماید. بر اساس این تعاریف الگوریتمی برای چک کردن سازگاری بین ماشینهای حالت بیان شدهاست. این الگوریتم مسئول چک کردن این موضوع میباشد : " آیا هر مسیر ممکن در ماشین حالت سرویس C، مسیر سازگاری در ماشین حالت D دارد یا ندارد ". و به این ترتیب سازگاری بین دو سرویس چک میشود. در این روش اشارهای به سازگاری نامها و نوعها نشده و فرض شدهاست یک کارشناس میتواند به صورت دستی شباهتهای ممکن را کشف نماید. این کار فقط به مسئله سازگاری سرویس مشابه به سرویس اولیه تمرکز دارد. معادلیابی وبسرویس فرایندگرا در ترکیب سرویس در مقاله نیز وبسرویس در فرایند ترکیب در نظر گرفته شدهاست و در ادامه با بررسی این فرایندها به دنبال یافتن وبسرویسهای مشابه میباشد. راه حل پیشنهادی مراحل مختلف ترکیب مثل طراحی و اجرا را در نظر گرفتهاست و برای هر مرحله نیازمندیهای مورد نیاز برای برابری وبسرویسها را بیان نمودهاست. از این روی چند اصطلاح برابری، برابری ویژگی و برابری موقعیت را تعریف نمودهاست. منظور از برابری یکسان بودن نام دو سرویس میباشد. برابری ویژگی رفتار فرایند را در حین اجرا بررسی میکند. در این مرحله زمان فراخوانی سرویس در فرایند در نظر گرفته میشود. برابری موقعیت به برابری مکانی که سرویس به فرایند اضافه شدهاست اشاره دارد. مقاله به صورت نظری ایده خود را بیان کرده است و به نحوه اجرایی شدن طرح پیشنهادی نپرداختهاست. اهمیت این روش برای پیبردن به برابری وبسرویس جای سوال دارد. چون در روش پیشنهادی دو وبسرویس را در صورتی برابر به حساب میآورد که در دو فرایند یکسان، و یا نمونههای تغییر یافته از یک فرایند، شباهتهای یاد شده را داشته باشند. در نتیجه روش پیشنهادی روش عامی برای بررسی شباهت نمیباشد. بررسی جنبههای کیفی در جایگزینی وبسرویس مقاله به دنبال یافتن وبسرویس مشابه با توجه به اهمیت ویژگیهای کیفی است. به عبارتی دیگر به دنبال وبسرویسی است که کار یکسانی را با هزینه یکسان انجام دهد. برای یافتن شباهت بین وبسرویسها، رفتار سرویس در ترکیب وبسرویسها را در نظر گرفته شدهاست. در ابتدا یک سری از فعالیتهای BPEL مثل invoke ، receive ، reply و همچنین فعالیت onMessage با یک مولفه جدید به نام هزینهها توسعه داده شدهاست. در مولفه هزینهها میتوان چندین مولفه هزینه برای جنبههای مختلف کیفی که در تعویض به کار میآیند در نظر گرفت. نوع هزینه سرویس در حال حاضر میتواند زمان اجرا و یا هزینه مالی، در نظر گرفته شود. پیشنهاد این مقاله با ابزاری که در شکل 3-4 نشان داده شدهاست، صورت میگیرد. توسط این ابزار فرآیندهای BPEL توسعه یافته به اتوماتای هزینه WSCA تبدیل میشود . شکل ‏34 : تبدیل فرایند BPEL به اتوماتای هزینه در ادامه برای بررسی قابل تعویض بودن وبسرویسها، جنبههای کیفی در نظر گرفته میشود. با بررسی اتوماتای دو سرویس، جایگزینی زمانی امکانپذیر است که هزینه سرویس جایگزین شده هیچگاه بیشتر از سرویس اولیه نشود. در این کار فقط از جنبه هزینه به موضوع نگریسته شدهاست و نیاز به تغییر در استانداردهای موجود است. از این روی امکان پذیر بودن این روش جای بحث دارد. چارچوب کشف سرویس برای سیستمهای سرویسگرا رهیافتی برای مانیتور کردن ارتباطات وبسرویسها به منظور کشف و تعمیر ناهنجاریها در مقاله آمدهاست. چارچوب پیشنهاد شده از چند کامپوننت اصلی تشکیل شدهاست که شامل مانیتور، مدیر SCS ، سیستم سرویسگرا، و ابزار کشف در زمان اجرا میباشد. کامپوننت مانیتور رفتار سیستم را در زمان اجرا چک میکند و در صورت هر گونه انحراف از نیازمندیها، مدیر SCS را با خبر میسازد و در ادامه مدیر SCS تصمیم برای جایگزینی سرویس میگیرد و ابزار کشف، عامل اجرای این تصمیم میباشد. در این کار مجموعهای از سرویسها وجود دارند که توسط فرایند ترکیب BPEL4WS هماهنگ میشوند. به منظور کشف ناهنجاری، در فرایند ترکیب قطعه کدی اضافه میشود تا در هنگام دسترس نبودن سرویس، درخواست برای سرویس جایگزین به SCS ارسال شود و جایگزین سرویس پیشنهاد شده از طرف SCS به صورت پویا انجام گیرد. در این زمان SCS جستجویی را برای یافتن سرویس مناسب ایجاد مینماید که در آن از جنبه رفتاری در نظر گرفته شدهاست. جستجو رفتاری توسط یکسری از مسیرهای اجرا شده مشخص میشود که شامل لیستی از فعالیتها (مثل ارسال، دریافت پیام) به همراه چند متغیر میباشد. این اطلاعات از روی فرایند ترکیبی BPEL4WS با استفاده از قوانین تبدیل خاصی بدست میآید. بعد از انتخاب چند سرویس جایگزین، از رفتار سرویس قبلی در فرایند برای بررسی سرویس جدید استفاده میشود. اگر سرویس جدید بتواند حالات سرویس قبلی را در فرایند فراهم نماید، میتواند به عنوان جایگزین استفاده شود. در این کار به چگونگی انطباق ساختاری سرویس جدید با قبلی اشاره نشدهاست و فقط به مسئله رفتار سرویس در مسیر اجرایی پرداخته است، که این رفتارها در فرایند ترکیب مشخص میشوند. در حالیکه این اطلاعات در توصیف سرویس معمولی وجود ندارد. تحلیل رسمی معادلیابی رفتاری وبسرویسها در مقاله بیان شدهاست که معادلیابی رفتاری وبسرویسها به معنی تشخیص این است که آیا دو سرویس، رفتار تعاملیشان مثل هم است یا خیر. در این مقاله ابتدا رفتار تعاملی وبسرویسها توسط مدل رسمی Picalculus نشان دادهشدهاست و سپس بر اساس رفتار سرویس و استفاده از تئوری شباهت دو طرفه Picalculus، سعی به معرفی یک نظریه برای معادل بودن رفتاری وبسرویسها دارد. به نظر می رسد اثبات درستی این نظریه مشکل میباشد و اثبات دقیقی در مقاله بیان نشدهاست. کشف فرایندگرا شریک کسب وکار در مقاله به موضوع انتخاب سرویس مناسب پرداخته و به جای در نظر گرفتن توصیفات رابط کاربر سرویس، رفتار وبسرویسها را در نظر گرفتهاست. این کار نیاز به یکسری پیش فرض دارد که شامل : تولید کننده سرویس به توصیف سرویس، مدل فرایندی BPEL ، را نیز اضافه نماید. درخواست کننده سرویس، سرویس مطلوب خود را توسط مدل فرایندی BPEL نمایش دهد. واسطی در این میان رفتار فرایندهای ثبت شده را با فرایند درخواستی مقایسه نمایند. برای مقایسه از مدل PetriNet بدون ذکر جزئیات استفاده شدهاست. نیاز به ایجاد تغییر در روشهای متداول استفاده از سرویس از نقاط ضعف این روش میباشد. زیرا در حالت عادی برای توصیف سرویس از مدل فرایندی استفاده نمیشود. همچنین از این روش برای پیدا کردن سرویس مشابه به دلیل عدم دسترسی به مدل فرایندی سرویس اولیهای نمیتوان استفاده نمود. جمعبندی در این فصل کارهای انجام شده به صورت طبقهبندی معرفی شدهاست و به مزایا و معایب هر یک اشاره شد. بعد از بررسی کارهای صورت گرفته برای یافتن سرویس مشابه، تصمیم برای استفاده از وبسرویسهای معمولی به دلایل زیر قطعی شد : اکثر سرویسها در دنیای واقعی از نسخه بدون توصیفات معنایی استفاده میکنند. تعریف هستانشناسی برای زمانیکه سرویسها کارهای پیچیده انجام میدهند دشوار میباشد. اثبات صحت اطلاعات آمده درهستانشناسی دشوار می باشد. در مقایسه بین سه دسته کلی کارهای انجام شده میتوان دستهای که به صورت پویا اقدام به یافتن سرویس مشابه میکنند را دسته اصلی در نظر گرفت. این دسته از پتانسیل موجود در دنیای وبسرویسها استفاده میکنند. بر خلاف روشهای دسته دوم، که به صورت ایستا از قبل سرویس مشابه وجود دارند. در دسته سوم رفتار خارجی وبسرویس مورد بررسی قرار میگیرد. استفاده از این رویکرد در فرایند ترکیب سرویسها امکان پذیر است. از کارهایی که تا به حال در این دسته ارائه شدهاست، نمیتوان به عنوان یک راه مستقل برای یافتن سرویس مشابه استفاده نمود. اما روشهایی که به صورت پویا به ارزیابی شباهت پرداختهاند، همگی از بعد عملکردی به بررسی وبسرویسها پرداختهاند و از جنبههای کیفی برای تصمیمگیری استفاده نکردهاند. از این روی در فصل چهارم، چارچوبی برای بازیابی سرویس مشابه ارائه خواهد شد که به صورت پویا اقدام به یافتن وبسرویس مشابه میکند و در آن برای ارزیابی شباهت از دو جنبه عملکردی و کیفی بهره بردهاست. فصل چهارم روش پیشنهادی مقدمه در این فصل صورت مسئله به صورت خلاصه مورد بررسی قرار میگیرد. در ادامه چارچوب پیشنهادی تدوین شده با ذکر تمام جزئیات و مسائل مربوط به آن بیان میشود. ساختار این فصل به این صورت است : در بخش 4-2 به صورت خلاصه صورت مسئله و اهمیت رویکردی پیشنهادی بیان میشود. در ادامه برای درک بهتر مطلب در 4-3 یک بررسی موردی بیان میگردد. در بخش 4-4 مدل کیفی بیان شدهاست. این مدل به معرفی ویژگیهای کیفی میپردازد که از آنها برای ارزیابی سرویسها استفاده خواهد شد. در ادامه در بخش 4-5 چارچوب ارائه شده برای یافتن وبسرویس مشابه، همراه با جزئیات کامل از نظرتان خواهد گذشت، این بخش شامل چند زیر بخش میباشد. سپس در بخش 4-6 بررسی جایگاه چارچوب پیشنهادی و در 4-7 جمعبندی فصل بیان میشود. بررسی مسئله و راهکار پیشنهادی در محاسبات سرویسگرا کامپوننتهای برنامهکاربردی شبکهای از سرویسهایی با پیوند سست هستند، که از آنها برای توسعه برنامههای کاربردی سریع، قابل اطمینان، قابل توسعه و بسیار توزیع شده استفاده میشود. وبسرویسها در چنین محیطی رفتار بسیار پویایی دارند و ممکن است تغییراتی مانند عدم در دسترس بودن سرویس و یا کاهش کیفیت سرویس در زمان اجرا رخ دهد. در چنین حالتی مصرف کننده سرویس برای رفع نیاز خود مجبور به انجام پروسه کشف مجدد سرویسی مشابه با سرویس اولیه میباشد. سرویس جدید باید نیازمندیهای سرویس قبلی را بر طرف سازد. در نتیجه باید دوباره فرایند یافتن سرویس جدید تکرار شود که فرایندی بسیار زمانبر است. به منظور ایجاد محیط منعطف و با خصوصیات تطبیق خودکار در هنگام بروز چنین مشکلاتی، باید به دنبال روشی بود که در آن کاربر زحمت پیدا کردن سرویس مشابه با سرویس اولیه را نداشته باشد و به صورت اتوماتیک سرویسهای مشابه انتخاب شود و به کاربر معرفی شود. یافتن سرویس مشابه، مشخص کردن یک سرویس مناسب میباشد که نيازمنديهاي سرویس قبلي را مرتفع سازد. از سرویس مشابه در شرایطی که سرويسي از كار بیفتد يا به دلایلی مثل وجود بار زیاد روی میزبان آن قادر به پاسخگویی نباشد، میتوان استفاده نمود. همچنین میتوان از این رویکرد برای طراحی بالا به پایین فرایندهای WS-BPEL استفاده نمود. در این حالت طراح روی تعریف فرایند متمرکز شده و به صورت کلی وبسرویس دلخواه را در نظر میگیرد و در انتها وبسرویس مشابه را با توجه به نیازمندیهای موجود توسط این روش انتخاب میکند. با استفاده از راهکار یافتن وبسرویس مشابه در هنگام بروز مشکلی در ارائه خدمت از سرویسی، میتوان به صورت اتوماتیک سرویسهایی مشابه با سرویس قبلی را بازیابی نمود. در فرایند یافتن سرویس مشابه پس از یافتن چند سرویس که از نظر عملکردی مشابه هستند معیار مهم برای کاربر انتخاب سرویسی میباشد که کیفیت را در سطح خوبی برآورده سازد. برای کاربران وبسرویس در نظر گرفتن مسائل کیفی بسیار اهمیت دارد زیرا کیفیت برنامههای کاربردی و فرایندهای متشکل از این وبسرویسها رابطه مستقیمی با کیفیت تک تک سرویسها دارد. در نتیجه برای یافتن سرویس مشابه تنها در نظر گرفتن خصوصیات عملکردی کافی نمیباشد و لازم است که از خصوصیات کیفی نیز استفاده شود. پس میتوان سرویس مشابه را اینگونه تعریف نمود : " سرویسی که از نظر عملکردی و کیفی مشابه با سرویس اولیه باشد". در نظر گرفتن ترجیحات کاربر در مورد ویژگیهای کیفی سرویس اهمیت بالایی دارد. به عنوان مثال در یک کسبوکار مدت زمان پاسخ باید همیشه کمتر از یک ثانیه باشد، در این حالت نمیتوان از سرویسهای مشابهای استفاده نمود که زمان پاسخ بالایی دارند. و یا در بعضی از کسب و کارها میزان در دسترس بودن وبسرویسها حائز اهمیت است و نباید میزان دسترسپذیری کمتر از 95% باشد. در این حالت نمیتوان سرویس مشابهای را جهت جایگزینی استفاده نمود که میزان دسترسپذیری آن 50% است. زیرا این انتخاب در میزان دسترسپذیری کلی کسبوکار تاثیر خواهد داشت. حالتی تصور شود که این سرویس نقطه عطف کسبوکار است و به عبارتی یک سرویس کلیدی باشد. در این حالت اهمیت این موضوع دو چندان میشود. بدین منظور باید به دنبال راهی بود که بتوان از آن طریق به ترجیحات کاربر در مورد خصوصیات کیفی پی برد. و همچنین بتوان اطلاعات کیفی مورد نیاز را از وبسرویسهای موجود بدست آورد و در هنگام تصمیمگیری در مورد وبسرویس مشابه از آنها استفاده نمود. در اکثر کارهای ارائه شده که در فصل سه معرفی شدند، مثل کارهای ، یافتن سرویس مشابه بر اساس شباهت عملکردی است که تعداد k تا از بهترین سرویسها انتخاب و به کاربر معرفی میشود. درنتیجه کاربر باید در ادامه بر اساس ترجیحات خود در مورد ویژگیهای کیفی وبسرویسها یکی از آنها را انتخاب نماید. بنابراین مجبور است طی فرایندی دیگر وبسرویسهای مشابه را به صورت دستی مورد بررسی قرار دهد. این امر ممکن است بسیار زمانگیر باشد چون از یک طرف به اطلاعات کیفی این وبسرویسهای مشابه دسترسی ندارد و یا در صورت وجود این اطلاعات نحوه استفاده از این اطلاعات مشکل است و باید موازنهای بین دو ویژگی عملکردی و کیفی وبسرویسها برای انتخاب، ایجاد شود به صورتی که دقت انتخاب دستخوش تغییرات نادرست نشود. از این روی چارچوبی ارائه خواهد شد که علاوه بر بررسی شباهت از نظر عملکردی، از ویژگیهای کیفی و شباهت این خصوصیات به ترجیحات کاربر استفاده میکند. استفاده از ویژگیهای کیفی باعث میشود که سرویسهایی که از جهت عملکردی مشابه معرفی شدهاند تغییر رتبه پیدا کنند، در نتیجه بهترین انتخاب از دو جنبه عملکردی و کیفی صورت میگیرد و یافتن سرویس مشابه با کیفیت بهتری عمل خواهد کرد. با استفاده از اطلاعات کیفی میتوان انتخاب سرویس مشابه را بر اساس جنبه مهم دیگری از سرویسها انجام داد که این امر باعث بهینهسازی در انتخاب سرویس میشود و در صورت تغییر هر یک از ویژگیهای کیفی سرویسها، سیستم با شرایط محیط منطبق شده و میتواند بهترین انتخاب برای سرویس مشابه را داشته باشد. به این منظور در راهکار پیشنهادی، چارچوبی متشکل از چهار لایه معرفی خواهد شد که در آن برای بدست آوردن اطلاعات کیفی سرویسها، سرویسها مانیتور و اطلاعات آنها برای استفادههای بعدی ذخیره میشود . هنگام آمدن درخواست جهت یافتن سرویس مشابه ابتدا سرویسها از نظر شباهت عملکردی بررسی میشود. در ادامه سرویسهایی که شباهت عملکردی آنها در حد مطلوبی است از لحاظ کیفی بررسی و نزدیکی این ویژگیها به ترجیحات کاربر بدست آورده میشود و در آخر سرویسها بر اساس شباهتهای بدست آمده رتبهبندی میشود. در ادامه به خاطر بالا بردن دقت در تصمیمگیری از روشهای آماری استفاده شدهاست و همچنین تصمیمگیری نهایی به صورت انعطافپذیری صورت گرفتهاست. در این تصمیمگیری میتوان وزن هر کدام از شباهتهای عملکردی و کیفی را با توجه به نظر کاربر و محیط تغییر داد و نتیجه آن را در جواب نهایی مشاهده نمود. برای استخراج اتوماتیک ترجیحات کاربر در مورد کیفیت از SLA استفاده شدهاست. SLA مکانیزم متداولی برای بیان ویژگیهای کیفی میباشد. به صورت خلاصه میتوان عنوان نمود که نوآوری راهکار بیان شده، استفاده از دو دیدگاه برای بررسی شباهت است. دیدگاه اول، جنبه عملکردی میباشد. در این بخش سعی به یافتن پویای وبسرویسهایی است که از نظر عملکردی مشابه با سرویس اولیه باشند و دیدگاه دوم، جنبه کیفی میباشد که در آن از خصوصیات کیفی برای بررسی سرویسها استفاده خواهد شد. ترجیحات کاربر به صورت اتوماتیک بازیابی میشود و در ادامه نزدیکی ترجیحات کاربر به ویژگیهای کیفی واقعی وبسرویسها بررسی میشود. در این قسمت نیز برای افزایش دقت، نوآوری دیگری با استفاده از روشهای آماری انجام شدهاست. و در نهایت جواب نهایی با استفاده از جوابهای بدست آمده از هر دو دیدگاه توسط روش منعطفی تولید میشود. بررسی موردی در این قسمت برای درک بهتر مطلب بررسی موردی بیان میگردد. این بررسی موردی در حوزه خدماتی تلفنهای همراه بیان شدهاست. در دنیای امروز تلفنهای همراه تنها وسیلهای جهت برقراری ارتباط نبوده و به ابزاری ضروری برای پیشبرد کارهای روزانه افراد تبدیل شدهاند و مشریان به طور مدام خدمات بیشتری را از تلفن همراه خود طلب میکنند، در این شرایط مشتریان به سمت سرویسدهندگانی گرایش پیدا میکنند که این نیازها را بهتر درک کرده و خواستار تعامل با مشتریان خود هستند. سرویسهای ارزش افزوده ،افزوده ارزشی، در صنعت مخابرات به آن دسته از سرویسهایی اشاره دارد که نقشی برای انتقال صدا ندارند و به طور جداگانه میتوانند توسط کاربر استفاده شوند. اپراتورهای تلفن همراه ازسرویسهای ارزش افزوده به عنوان ابزاری برای ایجاد تمایز خود با دیگر اپراتورها و توسعه یک جریان درآمد ساز استفاده میکنند. سرویسهایی مثل گشت وگذار اینترنتی، خواندن خبر، بازی، گوش کردن به موزیک، بررسی موجودی بانک، ارسال فیلم، خرید الکترونیکی، برقراری ویدئوکنفرانس و... . اعتقاد بر این است که سرویس‌های ارزش افزوده برگ برندهی تجارت در زمینه تلفن همراه خواهد بود. در حالیکه بسیاری از این سرویسها در قالب وبسرویس از طرف تامین کنندههای این سرویسها ارائه میشوند. سرویسهای ارزش افزوده توسط سرویسهای داخلی اپراتور تلفن همراه و یا از طریق شرکتهای سوم عرضه میشوند ولی در هر دو صورت اپراتور تلفن همراه خود را موظف میداند که این سرویسهای ارزش افزوده را در قالب معیارهای کیفی مشخصی به کاربران خود ارائه نماید. در شرایط کنونی که بازار رقابتی بین اپراتورهای مختلف تلفن همراه وجود دارد، نحوه عملکرد این سرویسها روی اعتبار اپراتور همراه تاثیر به سزایی دارد و ممکن است در صورت عدم عملکرد مناسب این سرویسها، اپراتور بازار رقابتی خود را از دست بدهد. از این روی در صورت بوجود آمدن هر نقصی در ارائه خدمات از این سرویسها، اپراتور تلفن همراه به دنبال یافتن سرویسهای مشابه رفته و از آنها جهت زنده نگه داشتن کسبوکار خود استفاده مینماید. در این مرحله سرویسی باید انتخاب شود که از لحاظ عملکردی مشابه با سرویس اولیه بوده و همچنین طبق معیارهای کیفی مورد نظر عمل نماید. برای ملموس شدن مطلب، مثال زیر مطرح شدهاست. اپراتوری سرویس ارزش افزوده دریافت خبر را برای مشتریان خود فراهم نموده است. مشتری با ارسال یک پیامک به شماره مشخصی این سرویس را برای خود فعال میسازد. در سمت اپراتور ممکن است ده میلیون مشترک وجود داشته باشند که این سرویس را فعال نموده باشند. این سرویس شامل مشخصات اولیه زیر میباشد: جدیدترین اخبار (اخبار – اطلاعات آب و هوا و هر اطلاع دیگر) ارائه گردد. اخبار در کمتر از 3 ثانیه از زمان درخواست ارائه شود. به ازای هر بار ارسال خبر مقدار مشخصی از شارژ مشتری کاسته شود. در این سناریو ابتدا مشترک درخواست اخبار جدید را از طریق ارسال پیامک به پردازشگر درخواست ارسال مینماید، سپس پردازشگر درخواست، با تشخیص نوع خدمت که در اینجا سرویس اخبار می باشد، درخواست اخبار را به سمت تولید کننده خبر ارسال میکند، پردازشگر منتظر دریافت اخبار در ارتباطی همزمان میماند و به محض دریافت خبر آنرا به مشترک ارسال مینماید. حال ممکن است بنا به وجود مشکلات فنی تولید کننده محتوای خبر، در مدت زمان بیشتری برای مثال 20 ثانیه به درخواست کاربران پاسخ دهد و یا این سرویس از کار بیفتد. در این شرایط میلیونها درخواست خبر از مشترکان در صف انتظار جواب، در سمت سرور پردازشگر این درخواستها وارد میشود. این امر باعث اتلاف منابع اصلی سرور میشود و در برخی موارد با توجه به منابع محدود، سرور را از ارائه سرویس خارج میکند. در نتیجه سرور قادر به ارائه دیگر سرویسهای خود نیز نمیباشد. برای حل مشکل، اپراتور باید به فکر یافتن سرویس مشابه جهت جایگزین کردن سرویس خبر مورد استفاده باشد. ولی برای این انتخاب علاوه بر اینکه باید سعی شود که سرویس مشابه خبری را پیدا نماید باید به نحوی ملاحظات کیفی مثل زمان پاسخ و قیمت سرویس هم در نظر گرفته شود. مدل کیفی واژه کیفیت ،QoS، برای اولین بار در انجمنهای مربوط به شبکه توسط کرولی بیان شد. در سرویسگرایی کیفیت سرویس به ترکیبی از چندین ویژگی کیفی سرویس مثل دسترسپذیری، امنیت، زمانپاسخ و توان اطلاق میشود. در حالت عمومی ویژگیهای کیفی به دو گروه قطعی و غیر قطعی تقسیم شدهاست . ویژگیهای قطعی به ویژگیهایی اطلاق میشود که مقدار آنها قبل از فراخوانی سرویس مشخص باشد مانند قیمت و یا پروتکلهای امنیتی که سرویس پشتیبانی میکند. ویژگیهای غیر قطعی شامل خصوصیاتی است که مقدار دقیق آن تا زمان فراخوانی مشخص نمیباشد ، به عنوان مثال زمانپاسخ. در این قسمت به ویژگیهای کیفی پرداخته میشود که برای ارزیابی شباهت وبسرویسها از جنبه کیفی مورد استفاده قرار خواهند گرفت. این ویژگیهای کیفی باید شرایطی داشته باشد که مهمترین آنها قابل اندازهگیری بودن آنها است، بدین معنا که از طریق مکانیزمهای مانیتورینگ قابل اندازهگیری باشند. به عبارتی هدف استفاده از ویژگیهای کیفی غیر قطعی است. این امر باعث بررسی واقعی سرویسها در محیط عملیاتی شده، در نتیجه نقش مهمی در فرایند یافتن سرویس مشابه دارد. برای ایجاد مدلی باز و عمومی برای سنجیدن ویژگیهای کیفی، همچنین نیاز است خصوصیاتی در نظر گرفته شود که عمومیت بالایی در میان ویژگیهای کیفی وبسرویسها دارند و مقدار مطلوب آنها در SLA ذکر شدهاست، در نتیجه میتوان به صورت اتوماتیک از ترجیحات کاربر در این زمینه آگاه شد. به خصوصیاتی که برای اندازهگیری شباهت کیفی از آنها استفاده خواهد شد معیار گفته میشود. با توجه به نیازمندیهای بیان شده معیارهای دسترسپذیری(A) و زمانپاسخ (R)انتخاب شدهاند. البته امکان اضافه کردن ویژگیهای دیگر نیز وجود دارد. به احتمال بالا بودن سرویس S و در حال اجرا بودن آن، دسترسپذیری گویند، که توسط فرمول 4-1 محاسبه میشود. فرمول ‏4-1 : دسترس پذیری زمانپاسخ برای سرویس S، مدت زمان سپری شده از هنگام ارسال پیام M تا دریافت پاسخ R از سمت سرویس را گویند. اگرte زمان اجرا سرویس و tl زمان تاخیر در شبکه باشد ، یعنی زمان مورد نیاز برای رسیدن درخواست به سرویس/ رسیدن جواب به کاربر، زمان پاسخ با استفاده از فرمول 4-2 محاسبه میشود. فرمول ‏4-2 : زمان پاسخ چارچوب پیشنهادی در این بخش چارچوبی بیان شدهاست که در آن بر اساس شباهت عملکردی و کیفی، سرویسهای مشابه به سرویس اولیه (Sq) بازیابی میشوند. چارچوب پیشنهادی از چهار لایه تشکیل شده است. در شکل 4-1 این چارچوب نمایش داده شدهاست. شکل ‏41 : چارچوب پیشنهادی در چارچوب بیان شده لایه ناظر مسئول مانیتور کردن وبسرویسهای موجود در مخزن وبسرویس () و ثبت دادههای بدست آمده در پایگاهداده است. در دو لایه شباهت عملکردی و شباهت کیفی، بررسی شباهت عملکردی و کیفی سرویسهای موجود در مخزن نسبت به Sq انجام میشود. مسئول هماهنگی میان لایهها و تصمیمگیری نهایی بر عهده لایه تحلیلگر است، این لایه با کاربر بیرونی در ارتباط است و تقاضای پیدا نمودن سرویس مشابه را دریافت و پاسخ نهایی را به کاربر ارسال مینماید. در این چارچوب برای بررسی سرویسها از جنبه عملکردی از روشی استفاده میشود که با استفاده از رابط کاربرسرویس بتواند سرویسهای مشابه با Sq را پیدا نماید و درجه شباهت هر کدام از سرویسها را به Sq مشخص نماید. همچنین برای بررسی سرویسها از جنبه کیفی، معیارهای کیفی تمام سرویسهای مخزن مانیتور شده و اطلاعات بدست آمده ذخیره میشود. در ادامه برای بررسی شباهت کیفی سرویسهای مانیتور شده با معیارهای کیفی مورد نظر کاربر در رابطه با Sq، ابتدا ترجیحات کاربر در مورد معیارهای کیفی استخراج میشود و بعد از بدست آوردن هر یک از این معیارها، بررسی اطلاعات ثبت شده از طریق عملیات مانیتورینگ صورت گرفته و درجه تشابه معیارهای کیفی سرویسها با خواستههای کاربر مشخص میشود. البته برای این کار نیاز به بررسی تمام سرویسها نیست و فقط سرویسهایی از این جنبه مورد ارزیابی قرار میگیرند که شباهت عملکردی آنها از یک حد آستانهای بالاتر باشد. در نهایت سرویسها بر اساس درجه شباهتهای بدست آمده از دو جنبه رتبهبندی میشوند، برای رتبهبندی کردن سرویسها از روش انعطافپذیری استفاده شدهاست. بدین ترتیب بهترین سرویسهای مشابه یافت و به کاربر معرفی میشوند. در شکل 4-2 نمودار کامپوننت چارچوب بالا آمدهاست. شکل ‏42 : نمودار کامپوننت در شکل 4-2، کامپوننت Analyzer مربوط به لایه تحلیلگر است و کامپوننت Functional Similarity Check مربوط به لایه شباهت عملکردی میباشد. و به همین ترتیب کامپوننت QoS Similarity Check مرتبط با لایه شباهت کیفی میباشد و کامپوننتهای Service Monitoring و Scheduler مرتبط با لایه ناظر هستند. در ادامه لایهها با ذکر جزئیاتشان معرفی میشوند. لایه ناظر این لایه مسئول بدست آوردن و ذخیره اطلاعات کیفی وبسرویسها است. یکی از مشکلات وبسرویسهای کنونی عدم حضور اطلاعات کیفی در توصیفشان است. در صورت وجود این اطلاعات به همراه توصیف وبسرویس، نیز نمیتوان به آنها استناد نمود. حتی اگر بتوان به درستی این اطلاعات اطمینان داشت، که به صورت کاملا صادقانه از طرف تولید کننده سرویس بدست آمدهاست، نمیتوان مطمئن بود که وبسرویس در محیط اجرایی و در شرایط واقعی با وجود بار روی آن، بتواند شرایط کیفی داشته باشد که در ابتدا معرفی شدهاست. در نتیجه برای بدست آوردن این اطلاعات باید به دنبال راهکاری بود که در آن اطلاعات مورد نیاز به صورت پویا از طریق مانیتور کردن وبسرویسها بدست آید و اطلاعات بدست آمده را برای استفادههای بعدی ثبت نمود. برای بدست آوردن اطلاعات کیفی نیاز به روشی برای مانیتور کردن سرویسهای موجود در مخزن میباشد که شرایط زیر را داشته باشد: اطلاعات مورد نیاز را فقط با داشتن توصیف وبسرویس بدست آورد، چون در حالت کلی کد و پیادهسازی وبسرویس پوشیده از کاربران است. نیاز به تغییر در وبسرویس نداشته باشد. مستقل از تولید کننده وبسرویس باشد و بتوان از آن برای تمام وبسرویسها استفاده نمود. در ادامه روشهایی که به یافتن ویژگیهای کیفی پرداختهاند، بررسی میشوند و بهترین روش با توجه به نیازمندیهایی که قبلا به آنها اشاره شد، انتخاب خواهدشد. لازم به ذکر است از بهترین روش صرفا جهت بدست آوردن اطلاعات کیفی استفاده خواهد شد. در اکثر کارهایی که به مسائل کیفی در وبسرویسها پرداختهاند، به روش بدست آوردن و ارزیابی این ویژگیها اشارهای نشدهاست، به عنوان مثال در مخزن UDDI با ویژگیهای کیفی توسعه داده شده ولی به چگونگی بدست آوردن ویژگیها اشارهای نشدهاست. در بر اساس شبیهسازی به تحلیل و تخمین ویژگیهای کیفی وبسرویس پرداختهاست به صورتیکه وبسرویس را در شرایط بار کم فراخوانی کرده و از اعداد بدست آمده در مدل شبیهسازی استفاده مینماید و در ادامه از آنها برای تخمین ویژگیهای کیفی وبسرویس در شرایطی که تحت بار زیاد هستند، استفاده میشود. با توجه به رفتار پویای وبسرویسها به نظر میرسد روشهایی که از تخمین استفاده میکنند نمیتوانند دقیق باشند. در نیز به مانیتور و تحلیل ویژگیهای کیفی پرداختهاست. در این روش از شنود پیامهای SOAP برای بدست آوردن این ویژگیها استفاده شدهاست و بیشتر به تحلیل اطلاعات بدست آمده پرداختهاست. در از جنبه کیفی به انتخاب سرویسها نگاه شده و سعی به یکپارچه کردن این خصوصیات در تکنولوژی وبسرویسها دارد. در این کار نیز به نحوه بدست آوردن و ارزیابی ویژگیهای کیفی نپرداختهاست. برای بدست آوردن ویژگیهای کیفی مورد نیاز پس از بررسی روشهای موجود و نیازمندیهایی که در بالا به آن اشاره شد روش ارائه شده در مناسب ارزیابی شد. این روش به صورت غیر تهاجمی است و ویژگیهای کیفی را به صورت پویا و خود راهانداز اندازه گیری مینماید و همچنین این اطلاعات را بدون هیچ دانشی از پیادهسازی سرویس بدست میآورد. تکنیک اندازهگیری بکار رفته در این روش، مکانیزم سمت کلاینت است که مستقل از وبسرویس و تولید کننده سرویس میباشد. در تکنیک سمت کلاینت برای بدست آوردن ویژگیهای کیفی فقط نیاز به دسترسی به توصیف وبسرویس وجود دارد ولی در تکنیک سمت سرور نیاز به دسترسی به سورس کد وجود دارد با توجه به نیازمندیهایی که قبلا به آنها اشاره شد تکنیک سمت سرور مناسب نمیباشد. در از برنامهنویسی جنبهگرا استفاده شدهاست در نتیجه امکان بافتن جنبههای مربوط به اندازهگیری در بایتکد stub وبسرویس فراهم میشود. پس میتوان از این رهیافت به صورت یک بسته مستقل برای مانیتور کردن سرویسها و ثبت اطلاعات مورد نیاز استفاده نمود. با استفاده از دسترسپذیری و زمانپاسخ سرویسها اندازهگیری میشود. نحوه استفاده از این رهیافت باید به گونهای باشد که بار زیادی برای سرویسها ایجاد نکند. اگر تمام سرویسها به صورت دائم مانیتور شوند حجم زیادی از داده باید ذخیره شود و علاوه بر آن ممکن است بار زیادی روی سرویسها بوجود آورد. در نتیجه باید به دنبال روشی برای کاهش مقدار دادهها بود در حالیکه جامعیت دادهها از بین نرود. بدین منظور از روش نمونه برداری برای مانیتور کردن و ثبت دادههای بدست آمده، استفاده میشود. برای این کار باید در برهههای زمانی مشخص و یا به صورت تصادفی سرویسها مانیتور شوند. این کار توسط کامپوننت زمانبند صورت میگیرد که در آن سیاستهای زمانبندی تعریف میشود. در ادامه ویژگیهای اندازهگیری شده برای هر سرویس جمعآوری و در پایگاه داده ثبت شده و در زمان لازم این دادهها مورد پردازش قرار میگیرند. پردازش میتواند به دو صورت برخط و برونخط و یا ترکیبی از این دو نوع باشد . در پردازش برخط در همان لحظه، بلافاصله، دادهها پردازش میشوند و در مدل برونخط پردازش دادهها بعد از ذخیره سازی صورت میگیرد، در مدل برونخط میتوان دادهها را از دیدگاههای مختلف بررسی نمود. در این کار برای جلوگیری از ایجاد سربار برای یافتن ویژگیهای کیفی و بنا به نوع استفادهای که از دادههای مانیتور شده وجود دارد که در ادامه به آن اشاره خواهد شد، از مدل پردازش برونخط استفاده شدهاست. این امر باعث میشود در زمان لازم، این دادهها پردازش شوند در نتیجه سربار کمی تولید میشود. لایه شباهت عملکردی این لایه به بررسی شباهت عملکردی سرویسهای مخزن با Sq میپردازد. منظور از شباهت عملکردی یافتن سرویسهایی است که کار مشابه Sq را انجام میدهند. بدین منظور باید از اطلاعات آمده در توصیف وبسرویس بیشترین استفاده صورت گیرد. این اطلاعات را میتوان از نامها و ساختارهای موجود در رابط کاربرسرویس استخراج نمود. این لایه بعد از دریافت رابطکاربر Sq که از استاندارد WSDL استفاده میکند به اندازهگیری شباهت آن با سرویسهای موجود در مخزن میپردازد و در آخر رتبه شباهت عملکردی هر سرویس را بدست میآورد. سپس سرویسهایی که شباهت آنها از حد آستانه بیشتر میباشد را انتخاب کرده و آنها را در قالب سرویسهای S1…Sk معرفی مینماید. در ادامه بردار از شباهتهای عملکردی بدست آمده برای سرویسهای S1…Sk ایجاد میشود. سرویسهای S1…Sk و بردار F به لایه تحلیلگر ارسال میشود. در مروری که روی کارهای قبلی انجام شد کارهای به صورت پویا و با استفاده از استاندارد WSDL، از نظر عملکردی به بررسی شباهت میان وبسرویسها پرداختهاند. به این کارها در فصل سه اشاره شد. در ادامه به بررسی و انتخاب یکی از آنها به عنوان روش مورد استفاده برای ارزیابی شباهت عملکردی میان وبسرویسها پرداخته میشود. در مقاله نامها به صورت بستهای از کلمات در نظر گرفته میشوند و شباهت بر اساس الگوریتم tf/idf بدست میآید، مفاهیم از نامها استخراج شده و شباهت بین این مفاهیم در نظر گرفته میشود ولی نقطه ضعف این کار، امکان ارسال فقط یک متد برای وبسرویس میباشد و در مقاله تمرکز فقط روی واژهها میباشد و ساختار رابط کاربر سرویس در نظر گرفته نشدهاست که نقطه ضعف این روش میباشد، مقاله مانند به صورت بازگشتی به دنبال محاسبه شباهت بین عناصر توصیف سرویس میباشد ولی ضعف در نظر نگرفتن تعداد متدها و پارامترهای وبسرویس است. مقاله فاقد مشکلات مطرح میباشد و از دقت نسبتاً خوبی برخوردار است در نتیجه برای محاسبه شباهت عملکردی از این روش استفاده خواهد شد. مقاله در فصل سه معرفی شدهاست، در این روش طبق شکل 4-3 رابط کاربر وبسرویس در نظر گرفته میشود. شکل ‏43 : تبدیل WSDL به صورت خلاصه میتوان گفت: روش نام برده هر دو جنبه ساختاری و معنایی وبسرویس را که میتوان از رابطکاربر سرویس مشتق نمود را در نظر گرفتهاست. جنبههای معنایی مربوط به هدف وبسرویس میباشد، که در ارتباط با نامهایی است که برای کل سرویس در نظر گرفته شدهاست مثل نامهای portType ، متدها و پارامترها ورودی وخروجی آن میباشد. در عوض جنبههای ساختاری بر اساس سازگاری بین ساختارهای ورودی و خروجی و تطابقپذیری انواع دادهای میباشد. توسط تابع شباهت ، فرمول 4-3، شباهت بین وبسرویسها محاسبه میشود. فرمول ‏4-3 : تابع شباهت عملکردی fSim به صورت جزیی تابع در فرمول 4-3، شباهت بین دو وبسرویس بر اساس شباهت بین دو portType حساب میکند و شباهت دو portType بر اساس شباهت دو متد،، است که این شباهت نیز بر اساس شباهت بین پارامترهای ورودی و خروجی،، میباشد. در این فرمول پارامتر، بیانگر این موضوع میباشد که چه میزان شباهت نام portType مهمتر از شباهت بین متدهای موجود در این portType است. به همین طریق، در سطح متد، پارامتر درجه اهمیت شباهت نام متدها، نسبت به شباهت بین پارامترهای متدها در هنگام محاسبه شباهت بین متدها را نشان میدهد. در آخر، نشانگرمیزان اهمیت شباهت نام پارامترها نسبت به شباهت نوع دادهای در هنگام محاسبه شباهت بین پارامترها است. مقدار عددی که برای پارامترهای ذکر شده میتوان لحاظ کرد در هنگام پیادهسازی مشخص خواهند شد، از این روی در فصل پنجم روش بدست آوردن این پارامترها پرداخته شدهاست. لایه شباهت کیفی وظیفه این لایه محاسبه شباهت کیفی سرویسهای مخزن به است. برای نیل به این هدف ابتدا باید بردار ترجیحات کاربر (Puq=(auq,ruq)) در مورد خصوصیات کیفی سرویس که شامل دسترسپذیری auq و زمانپاسخ ruq است، بدست آورده شود. و در ادامه از اطلاعاتی که در لایه ناظر اندازهگیری و ذخیره شدهاست برای بررسی وضعیت کیفی این سرویسها استفاده شود. لازم به ذکر است که در این مرحله فقط سرویسهای مورد بررسی قرار میگیرند که از نظر عملکردی مشابه به سرویس هستند. این سرویسها در لایه شباهت عملکردی مورد ارزیابی قرار گرفتهاند و شباهت بدست آمده آنها در سطح مطلوبی میباشد. در ادامه در بخش 4-5-3-1 روش بدست آوردن Puq بیان شده و در 4-5-3-2 به روش محاسبه شباهت کیفی پرداخته شدهاست. ترجیحات کاربر در مورد کیفیت برای کاربران وبسرویس در نظر گرفتن مسائل کیفی از اهمیت بالایی برخوردار است. زیرا کیفیت برنامههای کاربردی متشکل از این وبسرویسها رابطه مستقیمی با کیفیت این سرویسها دارد. بدین منظور باید به دنبال راهی بود که بتوان از آن طریق به ترجیحات کاربر، Puq ، در زمان انتخاب سرویس پی برد. یکی از روشها استفاده از SLA است. میتوان با استفاده از SLA به صورت اتوماتیک از ترجیحات کاربر در زمان انتخاب آگاه شد و از آنها برای انتخاب سرویس مشابه استفاده نمود. SLA قراردادی است که در آن معیارهای مختلف کیفی در هنگام انتخاب وبسرویس بیان میشود. برای استفاده از SLA باید از یکی از استانداردیهایی که تا به حال برای آن معرفی شدهاست استفاده نمود. یکی از استانداردهای بیان شده WSLA است. WSLA یک زبان رسمی برای بیان SLA است که در آن توافق در سطح سرویس بیان میشود. به اجزای اصلی هر WSLA در ادامه اشاره شدهاست : طرف های مشارکت و نقش هایشان : تولید کننده، مصرف کننده و شرکتهای سوم پارامترهای SLA : خصوصیات شی سرویس مانند زمانپاسخ ، توان و... مشاهدات سطح سرویس (SLO): وعدههای داده شده در مورد پارامترهای SLA و الزامات هر یک از طرفین و اقدامات انجام شده در صورت تخطی از این وعدهها از اجزای بالا مشخص میباشد که برای فهمیدن ترجیحات کاربر و تشکیل بردار Puq در مورد خصوصیات سرویس باید از قسمت سوم WSLA یعنی SLO استفاده شود. در WSLA میتوان پارامترهای اختیاری را تعریف نمود و همچنین این امکان وجود دارد که تعریفهای مختلفی برای یک پارامتر مشابه مثل دسترسپذیری بیان شود. در این جا برای جامع بودن روش یک تعریف برای هر پارامتر بیان میشود و در تمام WSLA ها مربوط به سرویسهای مختلف به یک صورت تعبیر میشود. برای درک بهتر نمونهای از SLO در شکل 4-4، آمدهاست: شکل ‏44 : SLO نمونه همانطور که از شکل 4-4 مشاهده میشود، میتوان در بند 1 از حدی که برای پارامترهای کیفی در نظر گرفته شدهاست آگاه شد و از آنها برای تصمیمگیری و پیدا کردن سرویس با نزدیکترین خصوصیات کیفی به سرویس اولیه استفاده نمود. برای هر یک از این ویژگیها مشخص شده که مقدار مطلوب باید بزرگتر یا کوچکتر از عدد ذکر شده باشد. به عنوان مثال دسترسپذیری باید بزرگتر از %95 باشد و زمانپاسخ عددی کمتر از 4 بیان شدهاست. بدین ترتیب بردار Puq از WSLA مربوط به Sq پر میشود. WSLA امکان مشخص نمودن بخشی را جهت مانیتور کردن اطلاعات کیفی سرویس را نیز فراهم میسازد . در نتیجه فرض شدهاست در هنگام عقد قرارداد، بخش ناظر این چارچوب به عنوان این بخش معرفی شدهاست. در نتیجه هنگام مانیتور کردن توسط لایه ناظر، از طرف وبسرویسها و تولید کنندگان آنها مشکلی، از قبیل عدم اجازه برای فراخوانی سرویس، پیش نمیآید. و همچنین فرض شده است که WSLA بین تولید کننده سرویس و مصرف کننده به ازای هر وبسرویس در پایگاه داده ذخیره شدهاست. در WSLA امکان تعریف پارامترها در سطح متد و یا کل سرویس وجود دارد که در این کار فرض بر این است که پارامترها در سطح سرویس تعریف شدهاند. محاسبه شباهت کیفی این قسمت به بررسی کیفی سرویسها پرداختهاست. برای محاسبه شباهت کیفی سرویسها با ترجیحات کاربر در هنگام انتخاب ، لازم است با لایه تحلیلگر ارتباطی برقرار شود. در این ارتباط سرویسها S1…Sk و WSLA سرویس ، WSLAsq ، دریافت میشود، بدین ترتیب بررسی شباهت کیفی بین سرویسهایی که از نظر عملکردی مشابه با هستند صورت میگیرد. در ادامه بردار Puq با مقادیر فیلدهای میانگین دسترسپذیری، میانگین زمانپاسخ از WSLAsq مربوطه پر میشود. همچنین برای محاسبه شباهت کیفی، باید از دادههای ذخیره شده توسط لایه ناظر برای سرویسهای S1…Sk استفاده نمود. به این منظور میانگین دسترسپذیری () و میانگین زمانپاسخ () برای سرویسهای S1…Sk از دادههای ثبت شده طبق فرمول 4-4، محاسبه شده در ماتریس M قرار میگیرد. فرمول ‏4-4 : محاسبه شباهت کیفی در بازیابی دادههای مانیتور شده و محاسبه میانگین دسترسپذیری و میانگین زمانپاسخ از w داده ثبت شده اخیر استفاده میشود. هدف از این کار ایجاد ارزیابی از جدیدترین رفتار سرویس میباشد تا اگر سرویس در گذشته دور کیفیت خوبی داشته ولی اخیرا به خوبی عمل نکردهاست، این تغییر عملکرد در تصمیمگیری نقش داشته باشد و در نتیجه بهترین انتخاب صورت گیرد. حال باید میزان شباهت بردار Puq با ماتریس M را محاسبه کرد. بردار Puq و تک تک عناصر M مانند نقاطی در فضا هستند، شکل4-5، که دو بعد A وR دارند. و باید توجه داشت که واحد اندازهگیری این دو بعد با یکدیگر متفاوت میباشد. شکل ‏45 : ارتباط بین بردار ترجیحات کاربر و عناصر ماتریس M برای محاسبه شباهت بردار Puq با ماتریس M میتوان از فاصله اقلیدسی استفاده نمود. از فاصله اقلیدسی میتوان برای محاسبه شباهت و یا عدم شباهت استفاده نمود . اما قبل از محاسبه شباهت لازم به ذکر است که دادههای Puq سطح آستانه مطلوب دو ویژگی دسترسپذیری و زمانپاسخ از دید کاربر هستند. بدین معنا که کاربر ترجیح میدهد دسترسپذیری سرویس بزرگتر از auq و زمانپاسخ کمتر از ruq باشد و هر چه این اختلاف بیشتر باشد برای کاربر مطلوبتر است. از این روی میتوان از فاصله اقلیدسی برای بدست آوردن شباهت Puq با M استفاده نمود. در واقع محاسبه شباهت در فضای اقلیدسی که در آن بردار Puq و تک تک عناصر M مانند نقاطی در فضا هستند، صورت میگیرد. در هنگام استفاده از فاصله اقلیدسی در صورت تفاوت زیاد در مقدار دادهها و یا تفاوت در واحد اندازهگیری ویژگیها نیاز به نرمالسازی دادهها است، این کار باعث اطمینان از دادن وزن یکسان به تمام ویژگیها میشود . در اینجا نیز به دلیل تفاوت در واحد اندازهگیری دسترسپذیری که به صورت درصد است با واحد اندازهگیری زمانپاسخ که بر حسب ثانیه است، باید دادههای Puq و M نرمال شوند. برای نرمالسازی از رابطه Min-max ، فرمول 4-5، استفاده شدهاست. به عنوان مثال اگر مینیمم مقدار A ، و ماکزیمم آن باشد و مقدار قدیمی ویژگی A باشد طبق فرمول 4-5 مقدار جدید آن ` در محدودهی جدید میشود. فرمول ‏4-5 : نرمال سازی Min-max برای نرمال سازی روشهای متفاوتی وجود دارد ولی چون در رابطه Min-max ارتباط میان دادههای اولیه حفظ میشود، از این فرمول استفاده شدهاست. از فرمول 4-5، برای تک تک عناصر Puq و M استفاده شده و بردار P`uq و ماتریسM` طبق فرمول4-6 ایجاد میشود. در اینجا محدودهی جدید[0 , 1] در نظر گرفته شدهاست. فرمول ‏4-6 : نرمال سازی بردار Pup و ماتریس M حال میتوان میزان شباهت P`uq و M` را با استفاده از فاصله اقلیدسی محاسبه نمود. محاسبه شباهت از طریق تابع QSim طبق فرمول 4-7 صورت میگیرد و جواب بدست آمده در بردار Q ذخیره میشود. فرمول ‏4-7 : تابع شباهت QSim در فرمول 4-7، اگر مقدار با و یا با برابر باشد میزان تفاضل انجام شده برای محاسبه a یاr برابر با صفر میشود و جواب بدست آمده با حالتی که مقدار A کمتر و مقدار R بیشتر از ترجیحات کاربر باشد، به صورت یکسان تعبیر میشود. در حالیکه این مورد، برابری با ترجیحات کاربر، جزء حالتهای مطلوب تلقی میشود و باید امتیازی برای این شرایط قائل شد. از این روی فرمول 4-8 با اندکی تغییر در فرمول 4-7 ایجاد شد. در فرمول 4-8 میزان تفاضل صورت گرفته برای محاسبه a یاr بهعلاوهی یک شدهاست. فرمول ‏4-8 : تابع شباهت QSim با اصلاحات بهینهسازی در بخش قبلی ماتریس M با مقادیر میانگین A و R برای سرویسهای S1…Sk پر شد. اگر در جدول 4-1 دو دنباله R1 و R2 ، L داده آخر بدست آمده در لایه ناظر برای معیار R دو سرویس S1 وS2 به صورت زیر باشند: جدول ‏41 : مقایسه رفتار دو سرویس میانگین دو دنباله R1 و R2 برابر با سه میباشد. اگر ruq در بردار ترجیحات کاربر برابر با سه باشد، دو بردار R1 و R2 میزان زمانپاسخ مطلوبی دارند زیرا هر دو میانگین یکسانی دارند و در تابع شباهت نیز فقط از میانگین استفاده شدهاست، بنابراین برای هر دو شباهت یکسانی بدست میآید. این در حالی است که در دنباله R1 هفت رویداد مقدار کوچکتر از سه دارند، در حالیکه در دنباله R2 فقط چهار رویداد مقدار کوچکتر از سه دارند و اکثر رویدادها در این دنباله بزرگتر از سه هستند. گرچه این دو دنباله مقدار میانگین برابری دارند ولی رویدادهای دنباله R2 میزان پراکندگی ، فاصله ، بیشتری با میانگین دارند. همانطور که از مثال نیز مشخص است، هرچه میزان پراکندگی از میانگین کمتر باشد مقدار میانگین به رویدادهای دنباله نزدیکتر است و استفاده از میانگین دقت بالاتری را در محاسبه جواب نهایی، محاسبه شباهت با بردار ترجیحات کاربر، ایجاد میکند. از این روی، برای محاسبه شباهت P`uq با ماتریسM` در نظر گرفتن میانگین دسترسپذیری و میانگین زمانپاسخ به تنهایی نمیتواند دقت بالایی داشته باشد چون ممکن است میزان پراکندگی دادهها از این دو میانگین زیاد باشد. همانطور که قبلا نیز اشاره شد در برهههای زمانی مختلف از روش نمونه برداری برای مانیتور کردن سرویسها و ثبت دادههای بدست آمده استفاده شدهاست. در بحث آمار برای بدست آوردن نتایج کلی در مورد صفت مورد مطالعه، دادههای بدست آمده را در یک یا چند عدد خلاصه میکنند. به این اعداد شاخص اطلاق میشود. دو نوع شاخص تمرکز و پراکندگی وجود دارد. به وسیله شاخصهای تمرکز میتوان دادهها را در یک عدد خلاصه نمود، مانند میانگین. اما یک مسئله مهم در ارتباط با دادههای آماری میزان تغییرات و پراکندگی آنها است. میزان پراکندگی نشان دهندهی میزان تغییرات از یک نمونه به نمونه دیگر است. در نتیجه برای افزایش دقت باید میزان پراکندگی نسبت به میانگین نیز در نظر گرفته شود. ولی چون دو معیار R و A واحد اندازهگیری متفاوتی دارند و برای تصمیمگیری از هر دوی این معیارها استفاده میشود و باید میزان پراکندگی هر دو معیار در نظر گرفته شود. از این روی باید از شاخصهایی استفاده شود که به واحد اندازهگیری دادهها بستگی نداشته باشند. دو معیار پراکندگی انحراف معیار و واریانس به واحد اندازهگیری دادهها وابستگی دارند ولی شاخص نرخ تغییرات یا همان CV مستقل از واحد اندازهگیری میباشد. در نتیجه برای افزایش دقت از نرخ تغییرات در محاسبه شباهت P`uq به M` و تصمیمگیری نهایی استفاده خواهد شد. مقدار CV کم نشان دهنده سازگاری بین دادهها و مقدار زیاد آن ناسازگاری بین دادهها را نشان میدهد . اگر دادههای X={ x1,x2,…..,xn} موجود باشد مقدار CV با استفاده از فرمول 4-9 بدست میآید : فرمول ‏4-9 : نرخ تغییرات در نتیجه برای افزایش دقت در محاسبه شباهت کیفی، مقدار CV هر یک از معیارهای دسترسپذیری () و زمانپاسخ () برای سرویسهای S1…Sk به صورت مجزا از دادههای ثبت شده در لایه ناظر در برهه زمانی که قبلا به آن اشاره شد، محاسبه میشود. این اعداد در تابع از فرمول 4-8 منظور شده و فرمول 4-10 ایجاد میشود : فرمول ‏4-10 : تابع شباهت بهینه شده بردار Q میزان شباهت کیفی هر یک از سرویسها را به P`uq نشان میدهد. به خاطر بالا بردن دقت فرض شدهاست که مقدار هر یک از و کوچکتر از یک هستند. بنابراین ممکن است که مقدار هر یک از اعضای بردار Q خارج از محدوده [0 , 1] شود لذا لازم است مقدار اعضای بردار Q به بازهی [0 , 1] از طریق فرمول نرمالسازی 4-5 تبدیل شوند. بردار جدید Q` نام گذاری شده و هر کدام از عناصر آن به صورت qsj نماد گذاری میگردد در نتیجهQ` به صورت نمایش داده میشود. حال میتوان از Q` همراه با شباهت عملکردی بدست آمده استفاده نمود و تصمیم گیری نهایی را انجام داد. لایه تحلیلگر لایه تحلیلگر وظیفه هماهنگی بین لایهها و تولید جواب نهایی را دارد. این بخش با کاربر بیرونی در ارتباط است و تقاضای پیدا نمودن سرویس مشابه را دریافت و پاسخ نهایی را به کاربر ارسال مینماید. در زمان آمدن درخواستی برای پیدا کردن سرویس مشابه Sqتحلیلگر رابط کاربر Sq را برای لایه شباهت عملکردی ارسال مینماید و در آنجا ارزیابی شباهت عملکردی صورت میگیرد. جواب که شامل لیستی از سرویسهای مشابه S1…Sk و درجه شباهت هر یک به Sq است به تحلیلگر فرستاده میشود. لازم به ذکر است درجه شباهتهای عملکردی در قالب بردار به تحلیلگر فرستاده میشود. تحلیلگر از لیست سرویسها استفاده مینماید و آنها را برای لایه شباهت کیفی، ارسال مینماید. همچنین برای این لایه، WSLAsq ارسال میکند. در ادامه لایه شباهت کیفی جواب را در قالب بردار تولید میکند که در آن میزان شباهت کیفی هر کدام از سرویسهای S1…Sk بهPuq آمدهاست. در لایه تحلیلگر برای بدست آوردن شباهت کلی سرویسهای S1…Sk به Sq ماتریس Sk ×2 ایجاد شده که ستونهای آن با مقادیر دو بردار F و Q` طبق شکل 4-6 پر میشود . در نهایت در تحلیلگر شباهت کلی سرویسهای S1…Sk به Sq با در نظر گرفتن شباهت عملکردی و کیفی به صورت همزمان محاسبه میشود و سرویسها بر اساس آن رتبهبندی و مرتب میشوند. محاسبه شباهت کلی در بخش4-5-4-1 آمدهاست. محاسبه شباهت کلی برای محاسبه شباهت کلی و رتبه بندی سرویسها باید شباهتهای عملکردی، کیفی و درجه اهمیت هر یک در نظر گرفته شود. از این روی در تحلیلگر برای محاسبه شباهت کلی، برای هر یک از شباهتهای عملکردی و کیفی وزنی در نظر گرفته شدهاست. این وزن از طریق بردار W=[w1 ,w2] که در آن w1+w2=1 است، اعمال میشود. وزن شباهت عملکردی w1 و وزن شباهت کیفیw2 در نظر گرفته شدهاست. با توجه به این نکته که هدف یافتن سرویسی است که کار مشابه را با کیفیت خوبی انجام دهد در نتیجه w1 عدد بزرگتری نسبت به w2 است. نحوه مقدار دهی به این وزنها باید به گونهای باشد که در دقت بازیابی سرویسهای مشابه تاثیر منفی ایجاد نکند. مقدار این دو وزن در زمان پیادهسازی با توجه به وبسرویسهای موجود بدست آورده میشود، در فصل پنجم به این مطلب پرداخته خواهد شد. رتبه شباهت کلی سرویسهای S1…Sk به Sq با استفاده از فرمول 4-11 بدست میآید. فرمول ‏4-11 : محاسبه شباهت کلی هر کدام از اعضای بردار Ascore به صورت فرمول 4-12 خواهد شد. فرمول ‏4-12 : رتبه شباهت کلی رتبه شباهت سرویس j به Sq با توجه به جنبههای عملکردی و کیفی است. در ادامه میتوان بر اساس رتبه شباهت کلی بدست آمده، سرویسها را رتبهبندی نمود. به این صورت که سرویسها بر اساس مقدار بدست آمده به صورت نزولی مرتب و رتبهبندی میشوند. سرویسی که بالاترین را داشته به عنوان مشابهترین سرویس انتخاب و رتبه اول را میگیرد و به این ترتیب لیستی از سرویسهای رتبهبندی شده بر اساس تشکیل و به کاربر ارسال میشود. در نتیجه درخواست کننده وبسرویس، بعد از ارسال رابط کاربر سرویس مورد نظر خود، میتواند به عنوان خروجی لیستی از سرویس ها مشابه با آن وبسرویس را دریافت نماید. بررسی جایگاه چارچوب پیشنهادی جایگاه راهکار پیشنهادی این فصل با توجه به چارچوب کاری LAP را میتوان اینگونه بیان نمود : راهکار پیشنهادی دو سطح دوم و سوم را در نظر گرفتهاست. جایگاه آن در سطح دوم مربوط به لایه جستجوی قابلیت میباشد که در آن به دنبال یافتن وبسرویسی با ویژگیها و تواناییهای عملکردی مشخصی میباشد و در سطح سوم، مربوط به لایه مدیریت قرارداد است. همانطور که قبلا نیز اشاره شد، برای یافتن وبسرویس مشابه، از قرارداد اولیه برای فهمیدن ترجیحات کیفی کاربر مورد بررسی قرار میگیرد و موازی با این کار وبسرویسها نیز مانیتور میشوند و از اطلاعات بدست آمده برای تصمیمگیری استفاده میشود. جمعبندی در این فصل چارچوب پیشنهادی این پایاننامه برای بازیابی وبسرویس مشابه بیان شد. این چارچوب از چهار لایه تشکیل شده و از دو جنبه عملکردی و کیفی سرویسها را مورد بررسی قرار دادهاست. در بررسی سرویسها از جنبه عملکردی رابطکاربر سرویس مورد ارزیابی قرار گرفت. در بررسی سرویسها از جنبه کیفی تمام سرویسهای موجود مانیتور شده و اطلاعات بدست آمده ذخیره شدهاند. در ادامه بعد از بدست آوردن اتوماتیک ترجیحات کاربر در ارتباط با کیفیت سرویس، بررسی شباهت کیفی سرویسها با ترجیحات کاربر صورت میگیرد. در محاسبه شباهت کیفی برای بالا بردن دقت در تصمیمگیری از روشهای آماری استفاده گردیدهاست. و در آخر شباهت کلی بر اساس دو شباهت بدست آمده با استفاده از روش انعطافپذیری محاسبه شدهاست. برای پیاده سازی این چارچوب ابتدا باید مقدار اولیه وزنهای استفاده شده در لایههای مختلف بدست آورده شود. بدین منظور در فصل پنجم ابتدا به مسئله یافتن این وزنها پرداخته شدهاست و در ادامه ارزیابی کار صورت گرفتهاست. فصل پنج پیادهسازی و ارزیابی مقدمه ابتدا در این فصل پیادهسازی چارچوب پیشنهادی بیان شده و در ادامه به ارزیابی و مسائل مربوط به آن پرداخته شدهاست. در این قسمت برای ارزیابی دقیق، از معیارهای مختلفی استفاده شدهاست. توسط این معیارها هم کارایی کلی کار سنجیده شدهاست و هم مقایسهای با سایر کارهای پیشین صورت گرفتهاست. در ادامه در بخش 5-2 اطلاعات کلی در مورد پیادهسازی آورده شده و سپس در بخش 5-3 ارزیابی کار بیان شدهاست. در این بخش نیازمندیهای لازم و روش ایجاد محیط مناسب برای ارزیابی کار بیان گردیدهاست. سپس این بخش با دو قسمت 5-3-1 برای تنظیمات اولیه مورد نیاز و 5-3-2 به منظور ارزیابی کلی چارچوب ادامه یافته است. لازم به ذکر است ارزیابی کلی نیز خود در دو بخش و با استفاده از دو دسته معیار مختلف صورت گرفته است. پیاده سازی چارچوب ارائه شده در فصل چهارم با استفاده از java 6 در محیط Eclipse 3.5.2 پیادهسازی شدهاست. در شکل 5-1 نمودار بستهای آن آمدهاست. این شکل بخشهای اصلی برای محاسبه شباهت میان وبسرویسها و بازیابی سرویس مشابه را نشان میدهد. بسته ir.shbu.Functional.Similarity به بررسی تشابه عملکردی میپردازد. در این بسته از کتابخانه WordNet در جاوا که توسط پیادهسازی شده و از برنامه نویسی خطی LpSolve که تابع شباهت بر آن استوار بود، استفاده شدهاست. بسته ir.shbu.QoS.similarity بررسی شباهت کیفی وبسرویسها به ترجیحات کاربر را انجام میدهد. همانطور که قبلا نیز اشاره شد پردازش روی اطلاعات کیفی سرویسها به صورت برون خط میباشد. بنابراین فرض شدهاست که اطلاعات کیفی بدست آمده از مانیتورینگ وبسرویسها در پایگاه داده موجود میباشد. فقط نیاز است که این اطلاعات بازیابی و برای استفاده یکسری پردازش شوند. این دادهها به صورت تصادفی ایجاد شدهاند. دلیل ایجاد تصادفی این اعداد، نبود یک محیط آزمایشگاهی است که در آن وبسرویسها در حال اجرا باشند و بتوان آنها را فراخوانی نمود. همچنین اطلاعات مورد نیاز از WSLA نیز استخراج شده و بردار ترجیحات کاربر مقداردهی شدهاست. اما در رابطکاربر پیادهسازی شده، امکان ارسال مقادیر جدید برای بردار ترجیحات کاربر نیز فراهم شدهاست تا در صورت دلخواه بتوان این مقادیر را تغییر داد. بسته ir.shbu.similarity.evaluation شباهت کلی را با توجه به شباهتهای بدست آمده کیفی و عملکردی محاسبه میکند و سرویسها را با توجه به شباهت کلی بدست آمده رتبهبندی کرده و به کاربر معرفی مینماید. شکل ‏51 : نمودار بستهای شبهکد الگوریتم کلی برای بازیابی وبسرویس مشابه، در شکل 5-2 آمدهاست. در این شکل به مراحل اصلی اشاره شدهاست و در آن سه الگوریتم دیگر که در شکلهای 5-3 ، 5-4 و 5-5 بیان شدهاند، فراخوانی میشود. شکل ‏52 : شبهکد کلی شبهکد evaluate_Func_Similarities، مربوط به محاسبهی شباهت عملکردی است که در آن رابطکاربر وبسرویس اولیه ، Sq ، با وبسرویسهای موجود در مخزن وبسرویس مقایسه میشود. و سرویسهایی که میزان تشابه آنها از حد آستانهی مشخصی بیشتر باشد، برای ارزیابی در مرحله بعدی در resultVector ذخیره میشوند، شکل 5-3. شکل ‏53 : شبهکد مربوط به شباهت عملکردی شبهکد evaluate_QoS_Similarities در شکل 5-4 مربوط به محاسبهی شباهت کیفی وبسرویسهایی است که در مرحله قبلی از لحاظ شباهت عملکردی در سطح خوبی ارزیابی شدند، این سرویسها ورودی این شبهکد هستند. ورودی دیگر بردار ترجیحات کاربر است. خروجی evaluateQoSSimilarities بردار resultVector است که در آن شباهت عملکردی و کیفی سرویسها به سرویس اولیه ذخیره شدهاست. شکل ‏54 : شبهکد مربوط به شباهت کیفی شبهکد evaluate_Similarity_Score در شکل 5-5 با توجه به میزان اهمیت هر کدام از دو شباهت بدست آمده، رتبه شباهت نهایی سرویسها را به سرویس اولیه محاسبه میکند. شکل ‏55 : شبهکد مربوط به محاسبه شباهت نهایی در ادامه در شکل 5-6 نمایی از رابطکاربر پیادهسازی انجام گرفته، نشان داده شدهاست. شکل ‏56: نمای کلی از رابط کاربر در قسمت "الف" شکل 5-6 میتوان وبسرویس اولیه را انتخاب نمود و با فشردن کلید find عملیات بازیابی وبسرویسهای مشابه آغاز میگردد. در قسمت "ب" این شکل میتوان مقادیر کیفی مورد نظر را وارد نمود و در قسمت "ج" ، پارامترهای اولیه مورد نیاز برای اجرای برنامه را میتوان تنطیم نمود. به روش بدست آوردن مقادیر مناسب برای این پارامترها در بخش ارزیابی پرداخته میشود. قسمت "د" ، جواب نهایی تولید شده را نشان میدهد. این جواب از چهار ستون تشکیل شدهاست. ستون اول لسیتی مرتب از نام وبسرویسهای مشابه است که ترتیب در آن با توجه به رتبه شباهت نهایی SimScore که در ستون دوم نمایش داده شدهاست، ایجاد میشود و در ستونهای سوم و چهارم شباهتهای عملکردی و کیفی بیان میشوند. ارزیابی سیستمهایی که بازیابی اطلاعات انجام میدهند، نیاز به ارزیابی دارند که با استفاده از آن دقت مجموعه جواب بدست آمده مشخص شود، به این نوع از ارزیابی "ارزیابی کارایی بازیابی" گفته میشود . به صورت کلی برای ارزیابی کارایی بازیابی ، سه عنصر اساسی مورد نیاز میباشد : یک مجموعه تست مناسب، که شامل تعدادی جستجوی از پیش تعریف شده و اطلاعاتی در مورد ارتباط سندهای موجود با این جستجوها باشد. یکسری معیار که توسط آنها کارایی جستجو مشخص میشود . از معیارهای بدست آمده برای مقایسه روشها استفاده میشود . بازیابی وبسرویس مشابه نیز به صورتی بازیابی اطلاعات است. از این روی طرحی برای ارزیابی کارایی بازیابی ، یا به صورت خلاصه برای ارزیابی چارچوب پیشنهادی بیان شدهاست. این طرح از دو مرحله تشکیل شدهاست : در مرحله اول تعداد کمی از وبسرویسها در نظر گرفته میشوند و تنظیمات اولیه صورت میگیرد. در این مرحله مقدار پارامترهای بیان شده در قسمتهای مختلف چارچوب، بدست آورده میشود. در مرحله دوم از تعداد زیادتری وبسرویس برای ارزیابی کلی چارچوب پیشنهاد شده، استفاده میشود. در ادامه اجزای اصلی مورد نیاز برای ارزیابی معرفی میشوند. عنصر اول یک مجموعه تست مناسب میباشد. بدین منظور از مجموعه وبسرویسی مناسبی با نام SAWSDL-TC3، استفاده شدهاست. این مجموعه سرویس به منظور ارزیابی الگوریتمهای بازیابی وبسرویس ایجاد شدهاست و شامل 1080 وبسرویس در نه دامنه مختلف آموزش، مسافرت، مراقبت پزشکی، غذا، اقتصاد، جغرافیا، شبیهسازی، اسلحه و ارتباطات میباشد. همچنین در این مجموعه 42 جستجوی تست ، سرویس تست ، به همراه سرویسهای مرتبط با این جستجوها مشخص شدهاست که از آنها برای ارزیابی کارایی طرح پیشنهادی استفاده میشود. در مقاله هم نیز از نسخه قبلی این مجموعه تست، استفاده شدهاست. همانطور که قبلا اشاره شد ابتدا باید مرحله انجام تنظیمات اولیه صورت گیرد. مرحله تنظیمات اولیه به دنبال یافتن وزنهای استفاده شده در مراحل مختلف چارچوب پیشنهادی است در حالیکه بهترین کارایی ایجاد شود. بدین منظور محکی برای دو مرحله تنظیمات اولیه و ارزیابی کارایی ایجاد شده است. برای انجام تنظیمات اولیه از 6 جستجوی تست و از 36 جستجوی تست باقی مانده برای ارزیابی کل کار استفاده خواهد شد. عنصر دوم مورد نیاز برای ارزیابی داشتن یکسری معیار است که توسط آنها کارایی جستجو مشخص میشود. در ادامه به این معیارها اشاره خواهد شد. از دو معیار precision و recall برای ارزیابی کار استفاده شدهاست. معیار precision نسبت وبسرویسهای مرتبطی که بازیابی شدهاند به تعداد وبسرویسهایی که بازیابی شدهاند، میباشد و معیار recall ، نسبت وبسرویسهای مرتبطی که بازیابی شدهاند به تعداد وبسرویسهای مرتبط موجود، میباشد. اگر جستجو ، سرویسهای بازیابی شده باشند و تعداد وبسرویسهای مرتبط موجود به جستجو باشد، به صورت دقیقتر این دو معیار در فرمولهای 5-1 و 5-2 ، تعریف شدهاند : فرمول ‏5-1 : معیار recall فرمول ‏5-2 : معیار Precision توسط این دو معیار میتوان به کارایی بازیابی انجام شده پی برد. همچنین میتوان دقت را تا نقطه خاصی از جواب با استفاده از حالت خاصی از معیار precision بدست آورد. اگر ، n سرویس اول بازیابی شده باشد، ، دقت پاسخ تولید شده تا نقطه n میباشد و به صورت فرمول 5-3 بیان میشود. این معیار به صورتTop n نیز نامگذاری میشود: فرمول ‏5-3 : دقت در نقطه مشخصی در جواب معیار R-Precision طبق فرمول 5-4، دقت بازیابی تا موقعیت R را نشان میدهد ، در حالیکه R برابر با سندهای مرتبط با جستجو میباشد . فرمول ‏5-4 : معیارR-Precision اما در این معیارها ترتیب جوابهای حاصله از بازیابی در نظر گرفته نمیشود . از این روی برای ارزیابی کل کار، با در نظر گرفتن ترتیب در جوابهای تولید شده ، از معیار دیگری با نام DCG استفاده شدهاست. توسط این معیار میتوان بازیابی سرویس مشابه را با توجه به موقعیتی که هر سرویس در پاسخ نهایی دارد، ارزیابی نمود. به تعریف دقیق این معیار و نحوهی استفاده از آن در قسمتهای بعدی اشاره خواهد شد. در ادامه در بخش 5-3-1 مرحله تنظیمات اولیه و در بخش 5-3-2 ارزیابی چارچوب پیشنهادی آورده شدهاست. تنظیمات اولیه در فصل چهار از یکسری پارامتر به عنوان وزن برای تصمیمگیری استفاده شده بود. این پارامترها مربوط به بدست آوردن شباهت عملکردی در لایه شباهت عملکردی و رتبه شباهت نهایی در لایه تحلیلگر هستند. این مرحله به یافتن بهترین ترکیب برای پارامترهای یاد شده میپردازد. در راستای این هدف، به صورت تصادفی 6 جستجوی تست از بین مجموعه تست جستجوی 42 عضوی، انتخاب شدند. این جستجوها مربوط به وبسرویسهای زیر هستند : EBookOrder1.wsdl 1personbicyclecar_price_service.wsdl citycountry_hotel_service.wsdl dvdplayermp3player_price_service.wsdl governmentdegree_scholarship_service.wsdl maxprice_cola_service.wsdl در ادامه ابتدا به روش بدست آوردن پارامترهای مورد استفاده در لایه شباهت عملکردی در بخش 5-3-1-1 و سپس پارامترهای لایه تحلیلگر در بخش 5-3-1-2 پرداخته خواهد شد. تنظیمات اولیه لایه شباهت عملکردی این مرحله به دنبال یافتن بهترین مقدار برای پارامترهای wPTNameSim , wOpNameSim است. بدین منظور برای این دو پارامتر ترکیبات دو به دویی از مقادیر [9/0,7/0 ,5/0, 3/0, 1/0] ، برای هر کدام از 6 جستجوی تست اعمال خواهد شد و نمودار precision-recall (P-R) مربوطه رسم میشود و در ادامه بهترین مقدار برای این دو پارامتر انتخاب خواهد شد. بهترین مقدار در شرایطی ایجاد میشود که منحنی مربوطه بهترین کارایی را داشته باشد و بهترین کارایی مربوط به منحنی میباشد که بیشتر به سمت بالا-راست متمایل باشد. در نمودار P-R محور افقی سطوح استاندارد recall ،{0%,10%,20%,…,100%}، میباشد و محور عمودی نشانگر دقت بازیابی در این سطوح میباشد. برای جلوگیری از پیچیدگی مقدار پارامتر wParNameSim از قبل مقدار 7/0 در نظر گرفته شدهاست. دلیل این انتخاب دادن وزن بیشتر به نام پارامتر نسبت به نوع آن میباشد، زیرا اغلب از نوع داده string برای پارامترها استفاده میشود. برای در نظر گرفتن تمام ترکیبهای دو پارامتر wPTNameSim وwOpNameSim ، برنامه 25 بار برای هر کدام از شش جستجوی تست اجرا گردید و در ادامه میزان کارایی الگوریتم شباهت عملکردی، توسط معیار P-R محاسبه میشود. در هر یک از این تستها فقط لایه شباهت عملکردی فراخوانی میشود و میزان شباهت عملکردی سرویسهای موجود به هر یک از شش سرویس، محاسبه میگردد. در هر بار اجرا میزان P-Rمحاسبه و در نمودار مربوطه رسم میشود. در ادامه جزئیات تستهای انجام شده آورده شدهاست. تست اول : برای اولین سرویس جستجو، 25 ترکیب مختلف برای این دو پارامتر اعمال و در هر بار اجرا میزان P-R محاسبه شد. در شکل 5-7، نمودار بدست آمده برای هر یک از ترکیبها رسم شدهاست. با توجه به این نمودار میتوان دریافت که بازیابی وبسرویس مشابه با چه کارایی برای هر یک از ترکیبها صورت گرفتهاست. برای درک بهتر شکل 5-7، حالتی که در آن دو پارامتر مذکور با مقادیر 9/0-9/0 مقداردهی شدهاند، مورد بررسی قرار میگیرد و در ادامه مقایسهای با ترکیب دیگری انجام میشود. همانطور که قبلا نیز اشارهشد در نمودار P-R محور افقی نشاندهندهی سطوح استاندارد recall و محور عمودی دقت را نشان میدهد. برای ترکیب 9/0-9/0 در سطح recall اول ، 0 % ، دقت برابر با 100% است. این موضوع بیانگر این مطلب است که ده درصد اول سرویسهایی که بازیابی شده و مرتبط با اولین سرویس جستجو میباشند با دقت 100% بازیابی شدهاند. به همین ترتیب در سطح دوم recall، ده درصد دوم سرویسهایی که بازیابی شدهاند و مرتبط با سرویس جستجو هستند، نیز با دقت 100% بازیابی شدهاند. این دقت تا سطح 60% برابر با 100% میباشد. دقت بازیابی در سطح هشتم ،70%، برابر با 85/92% است و در سطوح بعدی به ترتیب دقتها برابر با 23/88% ، 20/3% ، 38/3% میباشد. در ادامه مقایسهای با ترکیب 9/0– 3/0 صورت میگیرد. در این ترکیب نیز در پنج سطح اول recall دقت برابر با 100% میباشد، اما دقت در سطح ششم برابر با 66% است که خیلی کمتر از مورد مشابه در ترکیب اول است. و به همین ترتیب دقت در سطوح بعدی به ترتیب برابر با 68% ، 28/17% ، 29/18% ، 19/3% و 37/3% میباشد. با توجه به دقتهای بدست آمده برای دو ترکیب 9/0-9/0 و 9/0– 3/0میتوان به این نتیجه رسید که ترکیب اولی دقت بالاتری نسبت به ترکیب دوم دارد و از این روی این ترکیب مطلوبتر از حالت 9/0– 3/0 میباشد. شکل ‏57 : نمودار R-P تست اول تست دوم : برای دومین سرویس جستجو نیز تست انجام شد و 25 ترکیب مختلف برای این سرویس اعمال شد و در هر بار اجرا میزان P-R محاسبه میشود و نمودارهای مربوطه رسم گردید. در شکل 5-8 تمام نمودارهای بدست آمده خلاصه شدهاند. برای درک بهتر شکل 5-8 حالتی که در آن دو پارامتر مورد نظر با مقادیر 1/0-1/0 تنظیم شدهاند، مورد بررسی قرار میگیرد. برای این ترکیب در سطح recall اول ، 0 % ، دقت برابر با 100% است. این موضوع بیانگر این مطلب است که ده درصد اول سرویسهایی که بازیابی شده و مرتبط با این سرویس جستجو میباشند با دقت 100% بازیابی شدهاند. به همین ترتیب در سطح دوم recall، ده درصد دوم سرویسهایی که بازیابی شدهاند و مرتبط با سرویس جستجو هستند، نیز با دقت 100% بازیابی شدهاند. این دقت تا سطح 30% برابر با 100% میباشد. دقت بازیابی در سطح پنجم ،40%، برابر با 89/88% است و در سطوح بعدی به ترتیب دقتها برابر با 91/90% ، 31/92% ، 86/92% ، 57/53% ، 29/3% و 48/3% میباشد. شکل ‏58 : نمودار R-P تست دوم تست سوم : برای سومین سرویس جستجو هم تمام تستها انجام گرفت. در شکل 5-9، تمام نمودارهای بدست آمده خلاصه شدهاند. برای این شکل حالتی که در آن دو پارامتر مورد نظر با مقادیر 9/0-5/0 تنظیم شدهاند، مورد بررسی قرار میگیرد. برای این ترکیب در سه سطح اول recall، دقت برابر با 100% است. این موضوع بیانگر این مطلب است که سی درصد سرویسهای اولی که بازیابی شده و مرتبط با این سرویس جستجو میباشند با دقت 100% بازیابی شدهاند. به همین ترتیب در سطح چهارم recall، 30%، ده درصد بعدی سرویسهای مرتبط با سرویس جستجو ، با دقت 5/62% بازیابی شدهاند. دقت بازیابی در سطح پنجم برابر با 6% است و در سطوح بعدی به ترتیب دقتها برابر با 73/1% ، 80/1% ، 29/1% ، 52/1% ، 64/1% و 76/1% میباشد. همانطور که مشخصاست دقت در سطوح آخر بسیار کاهش یافته است. شکل ‏59 : نمودار R-P تست سوم تست چهارم : برای چهارمین سرویس جستجو، تستهای مربوطه انجام گرفت. در شکل 5-10 تمام نمودارهای بدست آمده نمایش داده شدهاست. برای این شکل حالتی که در آن دو پارامتر مورد نظر با مقادیر 1/0-3/0 مقداردهی شدهاند، مورد بررسی قرار میگیرد. برای این ترکیب در شش سطح اول recall دقت برابر با 100% است. این موضوع بیانگر این مطلب است که شصت درصد سرویسهای اولی که بازیابی شده و مرتبط با این سرویس جستجو میباشند با دقت 100% بازیابی شدهاند. به همین ترتیب در سطح هفتم recall،60%، با دقت 96% بازیابی شدهاند. دقت بازیابی در سطح هشتم برابر با 72/52% است و در سطوح بعدی به ترتیب دقتها برابر با 58/16% ، 34/14% و 07/4% میباشد. همانطور که مشخص است این ترکیب از دقت بازیابی بالایی برخوردار است. شکل ‏510 : نمودار R-P تست چهارم تست پنجم : برای پنجمین سرویس جستجو، تستهای مربوطه انجام گرفت. در شکل 5-11 ، تمام نمودارهای بدست آمده نشان داده شدهاست. برای این شکل نیز حالتی که در آن دو پارامتر مورد نظر با مقادیر1/0-3/0 مقداردهی شدهاند، مورد بررسی قرار میگیرد. برای این ترکیب در چهار سطح اول recall، دقت برابر با 100% است. این موضوع بیانگر این مطلب است که چهل درصد سرویسهای اولیه که بازیابی شده و مرتبط با این سرویس جستجو میباشند با دقت 100% بازیابی شدهاند. به همین ترتیب در سطح پنجم recall، 40%، دقت بازیابی 18% میباشد و در سطوح بعدی به ترتیب دقتها برابر با 50/17% ، 82/17% ، 32/3% ،265/3% ،41/3% و 53/3% میباشد. شکل ‏511 : نمودار R-P تست پنجم تست ششم : برای آخرین سرویس جستجو تستهای مربوطه انجام گرفت. در شکل 5-12، تمام نمودارهای بدست آمده نشان داده شدهاست. برای این شکل حالتی که در آن دو پارامتر مورد نظر با مقادیر 1/0-1/0 مقداردهی شدهاند مورد بررسی قرار میگیرد. برای این ترکیب در سه سطح اول recall، دقت برابر با 100% است. این موضوع بیانگر این مطلب است که سی درصد سرویسهای اولی که بازیابی شده و مرتبط با این سرویس جستجو میباشند با دقت 100% بازیابی شدهاند. به همین ترتیب در سطح چهارم recall، 30%، دقت بازیابی 27/77% میباشد و در سطوح بعدی به ترتیب دقتها برابر با 50 % ، 21/48% ، 02/39% ، 83/10% ، 92/7% ، 38/5% و 42/5% میباشد. شکل ‏512 : نمودار R-P تست ششم بعد از انجام شش تست آزمایشی باید بهترین ترکیب برای دو متغیر یاد شده بدست آورده شود. به این منظور باید برای هر یک از دو ترکیب مختلفwPTNameSim , wOpNameSim در بین 6 جستجوی تست انجام شده میانگین P-R محاسبه شود و نمودار حاصله رسم گردد. نمودار حاصله روش مناسبی برای مقایسه میباشد. در ادامه از روی نمودار میانگین بهترین کارایی انتخاب میشود و ترکیبی که بهترین کارایی را بدست آورد به عنوان بهترین ترکیب برای دو پارامتر یاد شده انتخاب میشود. در شکل 5-13 نمودار میانگین P-R آورده شدهاست. ترکیبی بهترین کارایی دارد که منحنی مربوط به آن بیشتر به سمت بالا و راست تمایل داشته باشد. به عبارتی در سطوح recall ، دقت بالاتری داشته باشد. شکل ‏513 : نمودار میانگین P-R همانطور که از شکل 5-13 مشخصاست، کارایی در بسیاری از ترکیبها به هم نزدیک میباشد ولی بهترین کارایی مربوط به ترکیب1/0-3/0 میباشد. در این ترکیب دقت در یازده سطح recall به ترتیب برابر با 100% ، 07/99% ، 38/99% ، 99/86% ، 16/50% ، 45/49% ، 82/43% ، 10/29% ، 18/16% ، 89/6% و 52/4% میباشد. دقت ترکیب 3/0-3/0 نیز به ترکیب اولیه نزدیک میباشد، دقت در یازده سطح recall برای این ترکیب عبارتاست از : 100% ،07/99% ، 38/99% ، 79% ، 54/51% ، 79/46% ، 75/42% ، 13/25% ، 93/15% ، 11/6% و 50/4% . همانطور که مشخصاست دقت این دو ترکیب در سه سطح اول با یکدیگر برابر بوده ولی در بقیه موارد بهجز سطح پنجم، ترکیب اول از دقت بالاتری نسبت به ترکیب دوم برخوردار است. با توجه به این اعداد برایند کلی دقتهای بدست آمده برای ترکیب 1/0-3/0 از ترکیبهای دیگر بیشتر میباشد، در نتیجه مقدار پارامتر wPTNameSim با 3/0 و پارامتر wOpNameSim با 1/0 تنظیم میگردد. تنظیمات اولیه لایه تحلیلگر در لایه تحلیلگر، از دو پارامتر w1 وw2 به عنوان وزنهای موثر دو شباهت عملکردی و کیفی در محاسبهی شباهت کلی استفاده شدهاست. هدف این مرحله یافتن بهترین مقدار برای این دو پارامتر است. همانطور که قبلا نیز اشاره شد w1 ، وزن شباهت عملکردی ، و w2 ، وزن شباهت کیفی ، برای بدست آوردن شباهت کلی اعمال میشود و برای این دو وزن شرط w1+ w2=1 وجود دارد. برای محاسبه شباهت کلی سرویسهایی که از نظر عملکردی مشابه با سرویسSq هستند، از لحاظ کیفی نیز بررسی میشوند و جواب نهایی تولید میشود. در جواب نهایی سرویسها بر اساس این دو فاکتور شباهت رتبهبندی میشوند. به عبارتی هدف یافتن و مرتب کردن سرویسهایی است که کار مشابه را با کیفیت خوبی انجام میدهند. در نتیجه ترتیب مجدد سرویسها نباید دقت بازیابی را پایین بیاورد. اگر سرویسهایی که فقط از جنبه کیفی خیلی خوب هستند نسبت به سرویسهایی که از نظر عملکردی مشابه و از نظر کیفی خوب هستند، ارجحیت پیدا کنند، دقت بازیابی پایین میآید. برای اطمینان از عدم بروز چنین حالتی باید دقت جواب نهایی را بررسی نمود و آن را با دقتی که در زمان یافتن سرویسهای عملکردی مشابه بدست آورده شده مقایسه نمود. از این روی برای بدست آوردن دو پارامتر w1 و w2 ترکیبات مختلفی از آن دو، برای هر کدام از 6 جستجوی تست در نظر گرفته میشود و دقت بدست آمده در هر ترکیب با دقتی که فقط با در نظر گرفتن شباهت عملکردی بدست آورده میشود، مقایسه میشود. و در نهایت ترکیبی برای این دو پارامتر انتخاب خواهد شد که بهترین دقت، مشابهترین به دقت بدست آمده از مقایسه عملکردی، را داشته باشد. از آنجایی که هدف یافتن سرویسی است که کار مشابه را با کارایی خوبی انجام دهد ، بنابراین باید مقدار w1، وزن شباهت عملکردی، بزرگتر از w2 ،وزن شباهت کیفی، باشد. در نتیجه برای w1 دامنه [9/0,8/0,7/0, 6/0,5/0] و برای w2 دامنه [1/0,2/0,3/0, 4/0,5/0] در نظر گرفته شدهاست. در ادامه ترکیبات مختلفی از این دو وزن در نظر گرفته شدهاست. این ترکیبهای مختلف برای شش سرویس جستجو استفاده امتحان میشود و بهترین مقدار برای این دو وزن انتخاب خواهد شد. این الگوریتم پنج بار، با توجه به شرط w1+ w2=1، برای هر کدام از جستجوی تست انجام میشود و میزان P-R برای هر کدام محاسبه میشود و نمودارهای مربوطه رسم میشود. در این نمودارها از منحنی Ideal Precision-Recall برای ارزیابی دقت و انتخاب بهترین ترکیب استفاده شدهاست. منحنیIdeal Precision-Recall مربوط به دقت بدست آمده، فقط با در نظر گرفتن شباهت عملکردی است. ترکیبی به عنوان بهترین ترکیب در نظر گرفته میشود که به منحنی Ideal Precision-Recall نزدیکتر باشد. تست اول : برای اولین سرویس جستجو، تست انجام شد و پنج ترکیب مختلف برای این سرویس اعمال شد و در هر بار اجرا میزان P-R محاسبه شد و نمودارهای مربوطه رسم گردید. همچنین در این نمودار منحنی Ideal Precision-Recall مربوطه نیز لحاظ شدهاست. در شکل 5-14، تمام نمودارهای بدست آمده خلاصه شدهاند. در این شکل دقت منحنی Ideal Precision-Recall در یازده سطح استاندارد recall برابر با دنبالهی 100% ، 44/94% ، 30/96% ، 39/54% ، 53/43% ، 15/42% ، 94/33% ، 62/13% ، 23/14% ، 29/13% ، 83/8% میباشد. در حالیکه ترکیب 5/0-5/0 برای w1-w2 با دقتهای 100% ، 47/89% ، 84% ، 9/50% ، 47/39% ، 98/38% ، 43/30% ، 94/12% ، 23/10% ، 327/9% و 67/8% بیشترین فاصله را با منحنی ایدهآل دارد. شکل ‏514 : مقایسه اول P-R برای بدست آوردن w1-w2 تست دوم : برای دومین سرویس جستجو، نیز 5 ترکیب اعمال شد. در هر بار اجرا میزان P-R محاسبه شده و نمودارهای مربوطه رسم گردید. همچنین در این نمودار منحنی Ideal Precision-Recall مربوطه نیز رسم شدهاست. در شکل 5-15، تمام نمودارهای بدست آمده نشان داده شدهاند. در این شکل دقت منحنی Ideal Precision-Recall در یازده سطح استاندارد recall برابر با دنبالهی 100% ، 100% ،100% ، 100% ، 88/88% ، 90/90% ، 30/92% ، 85/92% ، 57/53% ، 29/3% و 48/3% میباشد. این در شرایطی است که ترکیب 5/0-5/0 برای w1-w2 با دقتهای 100% ، 100% ، 100% ، 100% ، 53/61% ، 66/66% ، 58/70% ، 70% ، 54/20% ، 04/9% ، 92/7% بیشترین فاصله را با منحنی ایدهآل دارد. شکل ‏515 : مقایسه دوم P-R برای بدست آوردن w1-w2 تست سوم : برای سومین سرویس جستجو، تمام ترکیبها اعمال شد. در هر بار اجرا میزان P-R محاسبه شده و نمودارهای مربوطه رسم گردید. همچنین در این نمودار منحنی Ideal Precision-Recall مربوطه نیز لحاظ شدهاست. در شکل 5-16، تمام نمودارهای بدست آمده نمایش داده شدهاند. در این شکل دقت منحنی Ideal Precision-Recall در یازده سطح استاندارد recall برابر با دنبالهی 100% ، 100% ،100% ، 33/83% ، 11/5% ، 88/1% ، 16/1% ، 27/1% ، 5/1% ،61/1% ، 72/1% میباشد. این در شرایطی است که ترکیب 1/0-9/0 برای w1-w2 با دقتهای 100% ، 100% ، 100% ، 5/62% ، 38/5% ، 69/1% ، 89/1% ، 77/1% ، 76/1% ، 57/1% و 68/1% کمترین فاصله را با منحنی ایدهآل دارد. شکل ‏516 : مقایسه سوم P-R برای بدست آوردن w1-w2 تست چهارم : برای چهارمین سرویس جستجو تمام ترکیبها اعمال شد. در هر بار اجرا میزان P-R محاسبه شده و نمودارهای مربوطه به همراه نمودار منحنی Ideal Precision-Recall رسم شدهاست. در شکل 5-17، تمام نمودارهای بدست آمده خلاصه شدهاند. در این شکل دقت منحنی Ideal Precision-Recall در یازده سطح استاندارد recall برابر با دنبالهی 100% ، 100% ،100% ، 100% ، 100% ، 100% ، 96% ، 73/52% ، 58/16% ، 34/14% و 10/4% میباشد. این در شرایطی است که ترکیب 1/0-9/0 برای w1-w2 با دقتهای 100% ، 100% ، 100% ، 100% ، 100% ، 100% ، 96% ، 78/51% ، 32/16% ، 94/12% و 73/6% کمترین فاصله را با منحنی ایدهآل دارد. شکل ‏517 : مقایسه چهارم P-R برای بدست آوردن w1-w2 تست پنجم : برای پنجمین سرویس جستجو نیز، تمام ترکیبها اجرا شد و نمودارهای مربوطه رسم گردید. همچنین در این نمودار منحنی Ideal Precision-Recall مربوطه نیز لحاظ شدهاست. در شکل 5-18، تمام نمودارهای بدست آمده نشان داده شدهاست. در این شکل دقت منحنی Ideal Precision-Recall در یازده سطح استاندارد recall برابر با مقادیر 100% ، 100% ،100% ، 100% ، 33/18% ، 50/17% ، 82/17% ،32/3% ، 26/3% ، 41/3% و 54/3% میباشد. این در شرایطی است که ترکیب 4/0-6/0 برای w1-w2 با دقتهای 100% ، 100% ، 77/77% ، 47/43% ، 37/34% ، 86/16% ، 15% ، 71/8% ، 92/5% ، 37/5% و 0/3% فاصلهی زیادی با منحنی ایدهآل دارد. شکل ‏518 : مقایسه پنجم P-R برای بدست آوردن w1-w2 تست ششم : برای آخرین سرویس جستجو نیز تمام ترکیبها اعمال شد. در هر بار اجرا میزان P-R محاسبه شده و نمودارهای مربوطه رسم گردید. همچنین در این نمودار منحنی Ideal Precision-Recall مربوطه نیز رسم شدهاست. در شکل 5-19، تمام نمودارهای بدست آمده نشان داده شدهاند. در این شکل دقت منحنی Ideal Precision-Recall در یازده سطح استاندارد recall برابر با مقادیر 100% ، 100% ،100% ، 84.21% ، 45.10% ، 44.26% ، 21.71% ، 10.83% ، 7.92% ، 5.38% و 5.42% میباشد. این در شرایطی است که ترکیب 0.1-0.9 برای w1-w2 با دقتهای 100% ، 100% ، 100% ، 80% ، 46.80% ، 42.85% ، 21.62% ، 18.04% ، 8.45% ، 5.27% و 5.32% کمترین فاصله را با منحنی ایدهآل دارد. شکل ‏519 : مقایسه ششم P-R برای بدست آوردن w1-w2 بعد از انجام شش تست آزمایشی باید بهترین ترکیب برای دو متغیر یاد شده بدست آورده شود. به این منظور برای هر یک از دو ترکیب مختلف w1 و w2 در بین 6 جستجوی تست انجام شده میانگین P-R محاسبه شده و نمودار حاصله رسم گردید. نمودار حاصله روش مناسبی برای پی بردن به بهترین ترکیب این دو پارامتر میباشد. از روی در نمودار میانگین، ترکیبی که منحنی آن به منحنی Ideal Precision-Recall نزدیکتر است و در نتیجه دقت بالاتری دارد به عنوان ترکیب مناسب برای دو وزن یاد شده انتخاب میگردد. در شکل 5-20 نمودار میانگین P-R آورده شدهاست. شکل ‏520 : نمودار مقایسه میانگین R-P با حالت ایدهآل با توجه به مقادیر بدست آمده در شکل 5-20 میتوان فهمید که ترکیب 1/0-9/0 نزدیکترین ترکیب به Ideal Precision-Recall است. در نتیجه پارامتر w1 با مقدار 9/0 و پارامتر w2 با 1/0 مقداردهی میشوند. بعد از مشخص شدن بهترین مقادیر برای پارامترها مورد نیاز، میتوان برنامه را اجرا نمود. از این روی در ادامه در شکل5-21 مثالی برای بازیابی سرویسهای مشابه با سرویس citycountry_hotel_service آمدهاست. بردار ترجیحات کاربر در این مثال به صورت (3,90)=Puq است. در این شکل میزان شباهت عملکردی و شباهت کیفی و شباهت نهایی سرویسها آمدهاست و سرویسها بر اساس شباهت نهایی مرتبط شدهاند. در این شکل محور عمودی نشان دهنده مقدار شباهت است و در محور افقی سرویسها بر اساس شباهت نهایی بدست آمده مرتب شدهاند. همانطور که در شکل مشخصاست سرویسهای durationcountrycity_hotel_service، countrycity_hotel_service و towncountry_hotel_service شباهت عملکردی برابری با سرویس اولیه دارند ولی به خاطر تفاوت در شباهت کیفی به ترجیحات کاربر، رتبه دوم و سوم و چهارم در جواب نهایی کسب کردهاند. همچنین در شکل 5-21 سرویس countrycapital-city_hotel_service شباهت عملکردی بهتری نسبت به سرویس country_hotel_service دارد ولی به دلیل شباهت کیفی بسیار خوب آن، در رتبه 8 جواب قرار گرفتهاست و سرویس countrycapital-city_hotel_service در مکان 9 قرار گرفتهاست. شکل ‏521 : یک مثال ارزیابی چارچوب پیشنهادی بعد از مرحله تنظیمات اولیه، نوبت به ارزیابی کل کار رسیدهاست. برای ارزیابی از 36 جستجوی تست باقی مانده استفاده شدهاست. و از نتایج بدست آمده برای ارزیابی کار استفاده خواهد شد. ارزیابی کل کار در دو قسمت 5-3-2-1 و 5-3-2-2 با استفاده از دو دسته معیار مختلف سنجیده خواهد شد و در انتهای هر قسمت مقایسهای با کارهای پیشین صورت خواهد گرفت. در ادامه به صورت اختصار از F&Q به جای چارچوب پیشنهادی در این پایاننامه استفاده میشود. ارزیابی در دسته اول در این قسمت ارزیابی F&Q با استفاده از معیارهایP-R ، R-Precision ،،Top5، و ، Top10، انجام میشود. از آن جایی که مقالات در زمینه بازیابی وبسرویس بحث بر روی نتایج خود را با استفاده از مدلهای مختلفی بیان نمودهاند، در ادامه مقایسه بر اساس این مدلها آورده شدهاست. در حین ارزیابی کارایی کار مقایسهای نیز با کارهای پیشین که پیادهسازی و ارزیابی شدهاند، انجام میشود. لازم به ذکر است هر یک از این روشها از مجموعه وبسرویس متفاوتی استفاده کردهاند. در شکل 5-22 نتایج ارزیابی F&Q ، با استفاده از R-Precision ، Top5 و Top10 نشان داده شدهاست. در این شکل مقایسهای نیز با مدل فضای برداری کلاسیک ( VSM ) و R-VSM بیان شده در صورت گرفتهاست. شکل ‏522 : مقایسه اول F & Q با کارهای پیشین همانطور که از شکل 5-22 مشخص میباشد RPrecisionدر F&Q کمتر از VSM و R-VSM است. ولی Top5 و Top10 ، F&Q بالاتر از روشهای دیگر میباشد. این بدین معنا است که در F&Q پس از ارسال جستجو در اکثر اوقات مشابهترین وبسرویسها در مکانهای اول پاسخ، در حدود 96/80% در 5 جواب اولیه و 90/73% در 10 جواب اول، قرار میگیرند. با توجه به سناریو اصلی برای بازیابی وبسرویس مشابه، کاربر جستجویی را جهت یافتن سرویس مشابه ارسال مینماید. حال مقدار بالا برای Top5 و Top10 به این معنا میباشد که در حین بازیابی مشابهترین سرویسها در مکانهای اولیه، در 5 یا 10 مکان اولیه، قرار میگیرند . در ادامه برای هر یک از 36 جستجوی تست باقی مانده، برنامه دوباره اجرا شد و نمودار P-R برای هر کدام از اجراها بدست آمد و در آخر برای ارزیابی کلی کار میانگین نتایج بدست آمده محاسبه شد. این نمودار میانگین در شکل 5-23 با برچسب F&Q نمایش داده شدهاست. در این شکل کارایی F&Q با نتایج بدست آمده Woogle ، Stroulia ،URBE و WSXplorer مقایسه شدهاست. به صورت خلاصه در Woogle، نامهایی که در توصیف وبسرویس آمدهاند به عنوان بستهای از کلمات در نظر گرفته شدهاست و در ادامه برای محاسبه شباهت از الگوریتم tf/idf استفاده گردیدهاست. در این کار مقایسه بین مفاهیم بعد از فرایند خوشهبندی صورت گرفته است. مفاهیم از نامهایی که در توصیف وبسرویس استفاده شدهاند مشتق شدهاست. کار Stroulia مشابه با کار URBE و F&Q به صورت بازگشتی مقایسه دوبهدویی بین انواع دادهای، پیامها، متدها و تشابه نامهای این اجزا پرداختهاست. ولی در کار F&Q علاوه بر شباهتهای بیان شده، سرویسها از جنبه کیفی نیز مورد بررسی قرار گرفتهاند. در WSXplorer وبسرویس به صورت درختی نمایش داده شدهاند و شباهت بین درختها با استفاده از فاصله ویرایشی محاسبه شدهاست. در شکل 5-23 ارزیابی F&Q و URBE روی یک مجموعه وبسرویس انجام شدهاست ولی سایر کارها روی مجموعههای وبسرویس متفاوتی انجام شدهاند و برای مقایسه از اعداد بیانشده در مقالههای مربوطه استفاده شدهاست. شکل ‏523 : مقایسه دوم F & Q با کارهای پیشین با توجه به شکل 5-23 میتوان دریافت که F&Q بهترین کارایی را نسبت به WSXplorer از لحاظ دقت در سطوح مختلف recall دارد. همچنین در مقایسه با Stroulia ، F&Q از دقت بالاتری در بازیابی وبسرویس مشابه برخوردار است، البته به جزء در سه سطح آخر recall که دقت آن کمی پایینتر میباشد. در F&Q برای سطوح recall کمتر از 50% دقت بالای 70 % است. این بدین معنا است که 50 % از جوابهای درست با دقت بالای 70 % بازیابی میشوند. اما Woogle از دقت بالاتری نسبت به F & Q برخوردار است. این تفاوت میتواند ناشی از روشی باشد که برای ارزیابی شباهت از آن استفاده شدهاست. البته میتوان دلیل دیگری را نیز بیان کرد، مجموعه سرویسی که در Woogle استفاده شدهاست حاوی 431 وبسرویس است در حالیکه مجموعه سرویس استفاده شده در F&Q شامل 1080 وبسرویس است. این درحالی است که تعداد سرویسها استفاده شده تاثیر روی نمودار میگذارد. هر چه تعداد سرویسها بیشتر باشد تنوع آنها و دامنه موضوعی نیز بیشتر میشود، ولی در این شرایط ممکن است تعداد اندکی سرویس مشابه به سرویسهای موجود اضافه شود. اگر به عنوان مثال سرویس "الف" در مجموعه سرویس 431 عضوی 20 سرویس مرتبط و در مجموعه سرویس 1080 عضوی 30 سرویس مرتبط داشته باشد. حال اگر مجموعه اول با استفاده از الگوریتم "1" بازیابی و مجموعه دوم با استفاده از الگوریتم "2" بازیابی شوند و فرض شود هر دو الگویتم سرویس مشابهی را به عنوان آخرین جواب اعلام نمایند. این نقطه در نمودار P-R مربوط به آخرین سطح recall ، یعنی 100% است که در آن تمام سرویسهای مشابه بازیابی شدهاند. الگوریتم "1" و "2" از نظر ضعف مانند هم عمل کردهاند و سرویس مشابهای را به عنوان آخرین جواب، یعنی بیارتباطترین سرویس به جستجو، معرفی کردهاند. دقت یا همان precision در مجموعه اول در هنگام بازیابی آخرین جواب برابر با است. در حالیکه دقت در مجموعه دوم برابر است با . در نتیجه با دو برابر شدن تعداد سرویس حتی در شرایط یکسان دقت تقریبا نصف شده است. عدم وجود یک مجموعه سرویس مشترک، که با استفاده از آن تمام کارهای انجام شده ارزیابی شوند، باعث بروز مشکل در مقایسه کارایی روشها شدهاست. میتوان به صورت دقیق گفت که توسط نمودار R-P فقط میتوان کارایی روش مورد نظر را روی مجموعه داده خاصی ارزیابی نمود. ولی به دلیل مشکلات موجود راهی جز مقایسه اعداد آورده شده در کارهای پیشین در نمودار R-P و مقایسه آن با F&Q وجود ندارد. در حالکیه در F&Q بیشترین تعداد سرویس، حدوداً دو تا سه برابر، نسبت به سایر روشها استفاده شده است، باز هم از دقت خوبی برخوردار است. با توجه به شکل 5-23 میتوان دریافت که دقت دو کار F&Q و URBE بسیار به هم نزدیک است. این امر بیانگر این موضوع میباشد که در نظر گرفتن اطلاعات کیفی علاوه بر شباهت عملکردی تاثیر منفی روی دقت بازیابی نگذاشته است و همچنان روش F&Q با دقت لازم وبسرویسهای مشابه را بازیابی میکند. ارزیابی در دسته دوم همانطور که قبلا اشاره شد با در نظر گرفتن شباهت کیفی، سرویسهایی که از نظر عملکردی مشابه ارزیابی شدهاند، پالایشی دیگر میشوند و این امر سبب تغییر در رتبه شباهت این سرویسها میشود. برای در نظر گرفتن این تغییرات نیاز به معیار دیگری میباشد که در آن بتوان ترتیب جوابهای بدست آمده را ارزیابی نمود. از این روی برای ارزیابی کل کار، با در نظر گرفتن ترتیب در جوابهای تولید شده، از معیار دیگری با نام DCG استفاده شدهاست. توسط این معیار میتوان بازیابی سرویس مشابه را با توجه به موقعیتی که هر سرویس در پاسخ نهایی دارد، ارزیابی نمود. برای استفاده از معیار DCG ابتدا براساس میزان ارتباط جستجو با سندهای موجود یکسری برچسب تعریف میشود، به عنوان مثال برچسب عالی، خوب و متوسط. در ادامه برای هر کدام از برچسبهای تعریف شده، با توجه به میزان رضایتمندی از جوابهای حاصله و اهمیت آنها میزان بهرهای تعریف میشود. سپس میزان بهره هر یک از جوابها بر اساس اینکه متعلق به چه کلاسی هستند، محاسبه میشود. میزان بهرهنهایی با توجه به رضایتمندی حاصل از کل جوابها مشخص میشود. اگر d1, d2, … dk جوابهای مرتب بازگردانده از ارزیابی باشند و (G(i میزان بهرهای باشد که از بازیابیdi بدست میآید. بهره نهایی با استفاده از فرمول 5-5 محاسبه میشود. فرمول ‏5-5 : معیار DCG در کار F&Q برای محاسبه معیار DCG پنج برچسب عالی، خیلی خوب، خوب، متوسط و ضعیف تعریف شدهاست. برچسب عالی : این برچسب مربوط به سرویسهایی است که از نظر عملکردی مشابه با سرویس اولیه هستند و میزان شباهت کیفی آنها نیز با ترجیحات کاربر در سطح عالی است. برچسب خیلی خوب : این برچسب مربوط به سرویسهایی است که از نظر عملکردی مشابه با سرویس اولیه هستند و میزان شباهت کیفی آنها نیز با ترجیحات کاربر خیلی خوب است. برچسب خوب : این کلاس مربوط به سرویسهایی است که از نظر عملکردی مشابه با سرویس اولیه هستند و میزان شباهت کیفی آنها نیز با ترجیحات کاربر خوب است. برچسب معمولی : این برچسب مربوط به سرویسهایی است که فقط از نظر عملکردی مشابه با سرویس اولیه هستند و میزان شباهت کیفی آنها نیز با ترجیحات کاربر در تولید جواب نقشی نداشتهاست. برچسب ضعیف : این برچسب مربوط به سرویسهایی است که از نظر عملکردی مشابه با سرویس اولیه نیستند و ممکن است هر میزان شباهت کیفی به ترجیحات کاربر داشته باشند. در ادامه F&Q برای هر یک از 36 سرویس جستجو، اجرا شد و مقدار معیار DCG با توجه به جوابهای تولید شده محاسبه شد. سپس میانگین این معیار، محاسبه گردید. نمودار حاصله، منحنی F&Q DCG ، در شکل 5-24 نمایش داده شدهاست. در این قسمت نیز بردار ترجیحات کاربر، (3,90)=Puq فرض شدهاست. یعنی کاربر از سرویس مورد نظر انتظار دارد که دسترسپذیری بالای 90% و زمان پاسخ کمتر از 3 ثانیه داشته باشد. شکل ‏524 : نمودار DCG برای حالت بهینه در نمودار DCG، محور افقی نشان دهنده موقعیت در جواب تولید شده و محور عمودی نشان دهنده بهره بدست آمده در هر یک از این موقعیتها میباشد. به عنوان مثال در موقعیت یک از جواب تولیدی بهره بیست بدست آمدهاست. برای ارزیابی توسط معیار DCG، لازم است حالت بهینهای که میتوان برای حل مسئله ارائه نمود در نظر گرفته شود و نمودار مربوطه رسم گردد. در ادامه نمودار DCG حاصل از روش پیشنهادی رسم و با نمودار حالت بهینه مقایسه شود. حالت بهینه برای مسئله بازیابی سرویس مشابه، حالتی است که در آن جوابهای بدست آمده همگی از نظر عملکردی و کیفی مرتبط با سرویس اولیه هستند. به صورت کاملتر برای حالت بهینه ، شرایط زیر در نظر گرفته شدهاست : در مرحله بررسی سرویسها از نظر عملکردی، فقط تمام سرویسهایی که از نظر عملکردی مشابه با Sq هستند، بازیابی شوند. به عبارتی به صورت 100% فقط سرویسهای مشابه عملکردی بازیابی شوند. سرویسهای بازیابی شده بر اساس ویژگیهای کیفی بررسی شوند. در لایه تحلیلگر بر اساس میزان شباهتهای بدست آمده سرویسها مرتب شوند. بعد از ایجاد شرایط مورد نیاز برای حالت بهینه با استفاده از معیار DCG، میزان بهرهای که در این حالت میتوان بدست آورد، محاسبه شد. این منحنی با برچسب Ideal DCG در شکل 5-25 رسم شدهاست. همچنین برای ارزیابی نیاز است نمودار DCG کار پیشین URBE نیز در نظر گرفته شود. از این روی در شکل 5-25 نمودار منحنی URBE DCG علاوه بر منحنی F&Q DCG، رسم شدهاست. برای محاسبهی DCG کلی سه منحنی نمایش داده شده در شکل 5-25، ابتدا برای تکتک 36 جستجوی تست منحنی DCG مربوطه محاسبه شدهاست و در انتها میانگین این منحنیها محاسبه و رسم شدهاست. شکل ‏525 : مقایسه نمودارهای DCG همانطور که از شکل 5-25 مشاهده میشود میزان بهره F&Q بیشتر از بهره URBE میباشد. پس با در نظر گرفتن شباهت کیفی میزان بهره حاصله، نسبت به زمانی که فقط شباهت عملکردی در نظر گرفته شود، افزایش یافتهاست. این افزایش بهره نمایانگر افزایش میزان رضایتمندی از جوابهای تولید شده میباشد. پس تغییر رتبه پیدا کردن سرویسها در پاسخ که نتیجهی در نظر گرفتن شباهت کیفی است، مفید بودهاست و در نهایت سرویسها به بهترین ترتیب به کاربر معرفی میشوند. البته نمودار F&Q هنوز با حالت ایدهآل فاصله دارد، یک عامل اصلی در ایجاد این فاصله ، عدم عملکرد 100% لایه شباهت عملکردی برای یافتن سرویسهای مشابه است. البته این امر موضوع طبیعی میباشد چون تا به امروز هیچ موتور جستجو و یا الگوریتم جستجویی بیان نشدهاست که جوابهای حاصل از آن 100% درست باشند. دقت به این نکته خالی از لطف نیست که کاربر بعد از بازیابی سرویسهای مشابه معمولا از چند سرویس اول یکی را انتخاب مینماید و نیازی به بررسی کل جوابها نسیت. با توجه به شکل 5-25 میتوان دریافت که برای پنج سرویس اول بازیابی شده تقریبا میزان بهره بدست آمده برابر با حالت ایدهآل میباشد. بنابراین بهترین انتخابهای ممکن، در پنج انتخاب اول با استفاده از طرح پیشنهادی فراهم شدهاست. با توجه به نتایج بدست آمده میتوان به صورت کلی کارایی چارچوب پیشنهادی را برای بازیابی سرویس مشابه خوب ارزیابی نمود. جمعبندی در این فصل مسائل مربوط به ارزیابی چارچوب پیشنهادی به صورت تفصیلی بیانشد. در هر قسمت بنا به نیازمندیهای موجود از رویکردهای متفاوتی استفاده شد. در قسمت تنظیمات اولیه از یکسری روش برای یافتن بهترین مقدار برای پارامترهای موجود استفاده شد. در ادامه با توجه به شرایط موجود، برای ارزیابی کار و مقایسه با روشهای پیشین از دو دسته معیار استفاده گردید و چارچوب پیشنهادی توسط این معیارها از نظر کارایی و دقت و میزان بهرهی حاصله مورد سنجش قرار گرفت و در این حین مقایسهای نیز با کارهای گذشته صورت گرفت. فصل ششم نتیجهگیری و کارهای آتی مقدمه در این فصل در ابتدا نتایج حاصل از این پروژه جمعبندی شده و با روشهای ارائه شده دیگر در این زمینه مورد بررسی قرار میگیرد و سپس کارهای آتی قابل انجام در این حوزه معرفی میگردند. نتیجهگیری فعالیت در حوزه محاسبات سرویسگرا، در حقیقت فعالیت در حوزه سیستمهای توزیع شده است و باید در آن علاوه بر حل دغدغههای موجود برای توسعه برنامههای کاربردی چالشهای جدی مانند توزیع شدگی، نامتجانس بودن محیط و منابع و وجود پیوند سست میان اجزا را نیز در نظر گرفت. یکی از اهداف محاسبات سرویسگرا توسعه برنامههای کاربردی جدید با استفاده از وبسرویس میباشد. در محاسبات سرویسگرا کامپوننتهای برنامهکاربردی از سرویسهایی با پیوند سست تشکیل شدهاند. در محیط سرویسگرایی ممکن است تغییراتی از قبیل در دسترس نبودن سرویس، بروز خطا در سرویس و کاهش کیفیت سرویس در زمان اجرا رخ دهد. برای داشتن سیستمهای سرویسگرای انعطاف پذیر و قابل اطمینان و با تطبیق خودکار، لازم است به صورت اتوماتیک سرویسهای مشابه با سرویسای که دچار مشکل شده است انتخاب گردد و به کاربر معرفی شود. در حقیقت یافتن سرویس مشابه با توجه به نیازمندیهای که از سرویس مورد نظر انتظار میرود، بخش حیاتی در محیط سرویسگرایی ایفا مینماید. این امر سبب میشود تا کاربر در فرایند زمانبر کشف مجدد سرویس وارد نشود. از این روی در این پایاننامه به مسئله بازیابی اتوماتیک سرویس مشابه در هنگام بروز مشکلی در خدمت سرویسی، پرداخته شدهاست. یک جنبه مهم در انتخاب سرویس مشابه در نظر گرفتن ویژگیهای کیفی و ترجیحات کاربر در این زمینه میباشد. کیفیت برنامههای کاربردی متشکل از این سرویسها رابطه مستقیمی با کیفیت تک تک سرویسها دارد و برنامههای کاربردی و یا فرایندهایی که از این وبسرویس استفاده میکنند خود را موظف میدانند که در قالب معیارهای کیفی مشخصی به کابران خود خدمت ارائه نماید. به دلیل اهمیت این موضوع چارچوبی معرفی شدهاست که علاوه بر بررسی شباهت عملکردی، ویژگیهای کیفی و ترجیحات کاربر نیز در انتخاب سرویس مشابه در نظر گرفته میشود. چارچوب پیشنهاد شده برای یافتن سرویس مشابه از دو جنبه عملکردی و کیفی سرویسها را بررسی نمودهاست. در بررسی سرویسها از جنبه عملکردی شباهت رابطکاربر دو سرویس مورد ارزیابی قرار گرفته و در این راستا از شباهت ساختاری و معنایی که میتوان از رابط کاربر سرویس استخراج نمود استفاده شدهاست. در بررسی سرویسها از جنبه کیفی، سعی بر بدست آوردن اطلاعات واقعی از وضعیت کیفی سرویسها بوده و برای رسیدن به این هدف تمام سرویسهای موجود در مخزن سرویس مانیتور شده و اطلاعات بدست آمده ذخیره میشوند. در ادامه بعد از بدست آوردن اتوماتیک ترجیحات کاربر در ارتباط با ویژگیهای کیفی سرویس، بررسی شباهت کیفی سرویسها با ترجیحات کاربر صورت میگیرد. در محاسبه شباهت کیفی برای بالا بردن دقت در تصمیمگیری از روشهای آماری بهره برده است. در آخر شباهت کلی بر اساس دو شباهت بدست آمده با استفاده از روش انعطافپذیری محاسبه میشود. ارزیابی همزمان سرویسها از دو بعد یاد شده و همچنین نحوه محاسبه شباهت کیفی از نو آوریهای این پایاننامه میباشد. با استفاده از راهکار پیشنهادی میزان بهره حاصل از ارزیابی سرویس مشابه افزایش یافتهاست. این موضوع نشان دهندهی افزایش رضایت از جوابهای بدست آمده میباشد. در نتیجه میتوان گفت، استفاده از این دادهها باعث بهینهسازی در انتخاب سرویس گردیدهاست و این امر سبب شده که سرویسهای مشابه با بهترین ترتیب به کاربر جهت جایگزینی معرفی شوند. در جدول 6-1 مقایسه میان مهمترین کارهای پیشین صورت گرفتهاست. در این جدول جنبههایی که برای ارزیابی شباهت در نظر گرفته شده و همچنین عناصری از وبسرویس که مورد بررسی قرار گرفتهاند با هم مقایسه شدهاند. چارچوب پیشنهادی در این جدول با برچسب F&Q نشان داده شدهاست. جدول ‏61 : مقایسه با کارهای پیشین همانطور که از جدول 6-1 مشخص است چارچوب پیشنهادی اولین روشی میباشد که از دو جنبه، رفتار سرویسها را مورد ارزیابی قرار دادهاست. با بررسی سرویسها از جنبه عملکردی و کیفی بازیابی وبسرویس مشابه به صورت جامعتری انجام شدهاست و سرویسهای بازیابی شده بر اساس درجه شباهت عملکردی و کیفی با بهترین ترتیب، در پاسخ نهایی قرار میگیرند. با توجه پیادهسازی چارچوب پیشنهادی و ارزیابیهای متعددی که در فصل پنج روی آن صورت گرفته میتوان بیان نمود که برایند روش پیشنهادی، در مقایسه با کارهای پیشین از دقت و کارایی خوبی برخوردار است. توسط این روش میزان بهره حاصله از سرویسهای بازیابی شده نیز افزایش یافتهاست. این امر بیانگر افزایش میزان رضایتمندی از جوابهای تولید شده میباشد. این روش گامی در جهت ایجاد اتوماسیون بیشتر در محیط سرویسگرایی میباشد. و با استفاده از آن میتوان در بستر حرکت به سمت سیستمهای با خصوصیات تطبیق خودکار قرار گرفت. کارهای آتی یکی از اهداف اولیه ایجاد چنین چارچوبی و اجرایی نمودن آن افزایش خودکارسازی در محیط سرویسگرایی میباشد. همانگونه که در فاز تحقیقاتی این پایاننامه مشخص شد روشهای کشف وبسرویس کارآمد نیستند و برای یافتن سرویس مورد نظر فرایند زمانبری باید انجام شود. حال با توجه به این مسئله ممکن است سرویسی انتخاب شود ولی در شرایط اجرایی مطابق با فرضیات زمان طراحی نباشد. هنگام بروز چنین شرایطی اختلال در برنامههای کاربردی و فرایندهایی که از این وبسرویس استفاده میکنند بوجود میآید. برای جلوگیری از توقف و مشکل در فرایندهایی که از این وبسرویس استفاده میکنند و همچنین استفاده از پتانسیل موجود محیط سرویس گرایی روشی برای یافتن سرویسهای مشابه با سرویس نامبرده در این پایاننامه بیان شد. اهمیت ویژگیهای کیفی در بازیابی سرویس مشابه امری حیاتی میباشد، از این روی قصد بر این است که در کارهای آتی مدل کیفیت را با پارامترهای قطعی مثل قیمت ، امنیت و... گسترش داد. در نظر گرفتن هر یک از این پارامترها نیازمندیهای خاص خود را میطلبد و بعد تازهای برای تصمیمگیری ایجاد مینماید. از سوی دیگر برای افزایش دقت بازیابی، در کارهای آتی لایه شباهت عملکردی با استفاده از SAWSDL ، نسخه توضیح دار WSDL که در آن یکسری اطلاعات معنایی به توصیف وبسرویس اضافه شدهاست، گسترش خواهد یافت. یکی از خواستههای محاسبات سرویسگرا ایجاد محیطی است که در آن مشتری سرویس به صورت پویا بتواند به سرویس دلخواه بایند و آن را فراخوانی نماید. از سوی دیگر در هنگام بروز مشکل در ارائه خدمت سرویسی با استفاده از بازیابی وبسرویس مشابه میتوان سرویسهای مشابه به آن را یافت. در عمل بعد از انتخاب یکی از این سرویسها، باید بین برنامه کاربردی اولیه و این سرویس ارتباط برقرار شود. این ارتباط در شرایطی که رابط کاربر دو سرویس کاملا مشابه باشند، بدون ایجاد هیچ زحمتی صورت میگیرد. اما در اکثر اوقات این سرویسها دقیقا رابط کاربر مشابهی با سرویس اولیه ندارند. در نتیجه برای برقراری ارتباط پویا بین برنامهکاربردی و سرویس جدید نیاز به ایجاد واسطی است که توسط آن تفاوتهای موجود پوشانده شود. با تولید این واسط امکان پویای بایند شدن به سرویس جدید فراهم میشود. از این روی قصد بر این است در کارهای آتی به مسئله ایجاد پویای واسط در این شرایط پرداخته شود. An architecture for Web Service Similarity Evaluation based on their Functional and QoS aspects Mahsa Jamal Vishkaei1, Ahmad Baraani-Dastjerdi and Kamal Jamshidi2 1Department of Computer Engineering, University of Sheikhbahaee, Isfahan, Iran 2 Department of Computer Engineering, University of Isfahan, Isfahan, Iran { Abstract By increasing popularity of SOC, using Web services in applications has increased too. SOC creates a loosely coupled environment in which the actual execution environment might differ significantly from the one with the presupposed conditions during application design. Therefore, although an appropriate Web service might have been selected, by passing time, the Web service may not be efficient enough or may not be applicable under specific conditions. For service-oriented systems to be flexible and self-adaptive, it is necessary to automatically select and use a similar service instead of the one which causes the above mentioned problems. Finding a similar service means specifying the proper services which fulfill the same requirements as those fulfilled by the problematic service. In most of the previous works, a number of the best services (k) are selected and ordered based on functional similarity. The user must select one of these services based on his/her preferences. One important metric in selecting a similar service is considering QoS properties and user preferences about QoS. Because of the importance of this issue, in the present paper, an architecture is proposed in which, in addition to functional similarity, QoS properties and user preferences are also considered in selecting a similar service. Keywords Web service, Self-adaptive, Functional Similarity, QoS Similarity &User Preferences 1. Introduction “SOC promotes the idea of assembling application components into a network of services that can be loosely coupled [1] and Web services are currently the most promising SOC based technology [2]. Web services act dynamically in such an environment and therefore, there could be real-time changes in service status such as service unavailability and service quality decline. Such problems may reduce quality or cause failure in processes and applications which use such services. This makes the service consumer to go through the process of rediscovering a service similar to the initial one which could also fulfill the previous requirements. Such a process is much time-consuming. A flexible and self-adaptive Service-oriented system must be able to automatically select the similar services and introduce them to the user so that the user does not have to go through the difficulties of discovering similar services. The present work offers a solution in providing similar services automatically whenever there is a problem in initial service availability. Similar services are considered those which have a close functionality and QoS to the initial one. In the process of finding similar services, after finding some services which have the most functional similarity, the important metric for the user is to select the service which has a satisfactory level of QoS. For Web services users, considering QoS issues is critical since there is a direct relationship between the quality of an application consisted of Web services and the quality of each consisting service. Thus, finding a similar service does not only encompass considering functional features, but also QoS related properties. For this purpose, there is a need to seek a way to know the user’s preferences about QoS. In most studies such as [3,4,5,6], finding similar services is based on functional similarity in which a number of the best services (k) are selected and introduced to the user. The user then has to select one of them based on his/her preferences about QoS. The represented method in this paper, considers QoS properties and user preferences about these properties in addition to functional similarity. Considering QoS properties results in a different rating of functionally similar services and, as a result, the best possible selection is done based on functionality and quality. Using QoS properties, results in a selection based on another important aspect of services which optimizes service selection. In case of any changes in QoS properties of services, the system adapts itself to environmental conditions and automatically selects the best similar service. To gain service quality information, a four layered architecture is introduced in this article which monitors services and stores this information for future use. When there is a request to find a similar service, the first step is to examine services based on functional similarity. The functionally similar services are then examined based on quality and user preferences. At last, services are rated based on all the above similarity metrics. Accuracy is increased by using statistical methods. In addition, each functional and QoS similarity has a weight which could be changed based on user’s opinion and environmental conditions which makes the final decision flexible. User QoS preferences are derived using SLA (Service Level Agreements). SLA is a commonly used mechanism to express Quality features [7]. In the present work, the attempt is to introduce a new method in which: first, using SLA, user-defined parameters and their values are derived and used automatically after discovering functionally similar services; second, the final decision is flexible based on functionality and quality metrics. Thus, the present study attempts to find a similar service based on two aspects. The paper is organized as follows: Section 2 introduces related works. Section 3 explains the QoS model that refers to QoS properties which used for quality evaluation of service. Next, Section 4, presents our Architecture for similarity evaluation in detail. Finally we get conclusion in section 5. 2. Related works Similarity search for Web services, also called Web service retrieval, occupies an important place in SOC and several related works could be found regarding the issue. Generally, there are three major groups of methods for finding similar services. In the first group, there exists a group of previously chosen similar services; when a service fails to work at runtime, it is replaced by another based on user context or QoS [8,9]. In the second group, similar services are selected dynamically [3,4,5,6]. In the third group, the external behavior of a Web service like execution paths or its conversations with other services is considered. In this group, because of lack of information about external behavior of services in their description, service check is done in composition process [10,11,12,13,14]. The second group is considered basic for this article. The reason is, the methods in this group base their work on information existent in service description (WSDL) rather than concerning external behavior or defining a new model for service representation or even choosing similar services in advance. In works [3,4,5,6], calculating similarity is based on functional aspects only and therefore, the user needs to do further refinement pertaining to important QoS features. In [3], both syntactic and semantic aspects of a Web service that could be derived from WSDL are considered. Semantic aspects are related to the purpose of a Web service which is in turn related to the names assigned to the entire service and syntactic aspects are based on input/output structures and data type adaptations. In [4], a search engine named Woogle is established for Web services which uses textual similarity of methods and its parameters in order to examine service similarity. The key element of Woogle is clustering algorithm for identifying the relationships among the terms adopted in the all published Web services. It then compares the concepts encompassing input/output parameters as a measure of similarity. In [5], finding similar services is based on domain-independent and domain-specific ontology. In order to specify domain-independent relations, after a series of pre-processes, WordNet thesaurus is used. Deeper relations based on industry and application-specific terms are found using domain-specific ontology and after that, related terms are found based on rule based inference. Matches due to the two methods are combined to determine an overall similarity score. In [6], because of inefficiency of catalogue style service discovery methods, a new method has been developed in which similarity is sought via comparing the two WDSLs. In this article, in order to find the similarity between two WSDL descriptions, a series of complementary methods are introduced. These methods examine, on the one hand, data type structures, messages and operations and, on the other hand, the meaning of identifiers and natural language descriptions. These methods combine classical information retrieval and WordNet-based technique to increasing the precision of the retrieval mechanism. From the first group, work [15] could be mentioned in which, the assumption is that there is a series of functionally similar services from which, one service is selected based on QoS. It uses preferences networks to represent user preferences and to decide upon QoS using such preferences. The work does not mention how to obtain user preferences but indicates that these preferences can be defined at three levels of low, medium and high. Such a definition cannot be accurate enough since different people may have different conceptions of these three levels. 3. The QoS model The term “QoS” was used for the first time in the networking community by Crawley [16]. In SOC, QoS encompasses a number of qualities or service properties like availability, security, response time and throughput [17]. Generally speaking, QoS attributes are divided into two groups: deterministic and non-deterministic [18]. Deterministic attributes are those that their value is known before a service is invoked, like price or supported security protocols. Non-deterministic attributes are those which their accurate value is unknown until the service is invoked, like response time. In this section, some QoS attributes are introduced which are used to evaluate the extent of similarity among Web services from quality point of view. These features are defined under specific conditions, for example they must be measurable, being measurable means that they could be measured through monitoring mechanisms, to name the most important. Stated simply, the purpose here is to use non-deterministic features. This results in a real evaluation of services in operational environment and thus has an important role in finding similar services. To create a general open model for evaluating QoS, there is also a need to consider features with a high percentage of generality among QoS features of Web services which their desired value is mentioned in SLA so that user preferences are discovered automatically. In this article, those features used to measure QoS similarity are called “metrics”. These metrics include Availability (A) and Response time (R). It is also possible to add other features later. 4. The architecture The architecture proposed in this section finds similar services to the initial service (Sq) based on functional and QoS similarity. This architecture is composed of four layers (Figure 1). Figure 1: Architecture The monitoring layer monitors Web services in the service repository (∑ = {Sp}) and stores obtained data in a Database. In functional similarity and QoS similarity layers, functional and QoS similarity of the Web services in the repository are evaluated compared to Sq. The analyzer layer coordinates all the layers and makes the final decision. This layer communicates with the external user and receives requests to find similar services and sends the final answer to the user. In this architecture, functional similarity is examined through WSDL. Services are examined for QoS through monitoring QoS metrics of all services in repository and storing obtained data. This is followed by evaluating QoS similarity of monitored services with user specified QoS metrics related to Sq through the specification of user preferences about QoS metrics. An examination of the stored information is done through monitoring operation and the degree of similarity between QoS metrics of services with user preferences is identified. Not all services need to be checked at this stage. Only those services whose functional similarity is greater than a defined threshold are examined. Finally, services are rated based on the degree of similarity obtained from two different aspects. Furthermore, this rating is done in a flexible manner and thus, the best possible similar services are found and offered to the user. The component diagram of the architecture is presented in Figure 2. Figure 2: Component Diagram Details about each layer are presented in the following sections. 4.1. The monitoring layer The monitoring layer identifies and stores the QoS information of Web services. One of the problems of the current Web services is their QoS information not being mentioned in their description [17,19]. As a result, there is a need to find a way to monitor services and get such information dynamically so that it could be used in future. To get the required QoS information, the method for monitoring services in the repository ∑ = {Sp}, must: Have the ability to get the required information using Web service description (WSDL), since, the code and implementation of the service is generally invisible to users; Not need to do any change to the Web service; Be independent form Web service provider and be applicable to all Web services. In most works about QoS in Web services, the way to get and evaluate these features is not mentioned; for example, in [20], the UDDI repository for associate QoS to specific Web service is extend without any mentioning of how such values were obtained. In [21], analyzing and estimating the performance of Web services is based on simulation i,e, invoking a Web service under low load conditions and transforms these testing results into simulation model and uses the model to estimate service excepted performance in heavy load. Because Web services act dynamically, it does not seem that methods based on estimation be much accurate. [22] also proposes a framework for QoS monitoring and analysis. This work considers communication level monitoring via SOAP messages interception but has not detail about it and is mostly concerned with analyzing the information. In [23] selecting services is based on QoS and it tries to integrate QoS into Web service technology. But again in this work nothing is mentioned about the way to get and evaluate QoS attributes. After studding the existing methods and the above mentioned requirements, the method in [24] was found suitable. This method is Non-intrusive, it measures QoS properties dynamically and in a bootstrapping way and, in addition, completely service independent and does not have access to Web service implementation. The measurement technique in this method is client-side which is independent from the service itself and the service provider. In client-side technique it is enough to have access to Web service description to get the QoS features of the service while server-side technique need to access the Web service’ source code. Based on what mentioned before, the latter is not a suitable technique here. [24] uses aspect-oriented programming (AOP) which allows weaving performance measurement aspects. Thus, this approach could be used as an independent package for monitoring services and recording the required information. Availability (A) and response time (R) metrics of services could also be measured using this method. It is noticeable that using this method should be so that extra loads are not imposed on services. If all services are monitored all the time, a huge amount of information must be stored; in addition, extra loads may be forced on services. To prevent this, it is necessary to reduce the amount of data without distorting its integrity. This is achieved by sampling in monitoring and data storage. Services are monitored randomly or in static time intervals. A scheduler component, in which scheduling policies are defined, is in charge of sampling. This process is continued by collecting the measured features for each service and storing the data in a Data base and using this data when necessary. When QoS data are collected, it needs to be processed to fulfill its particular purpose. The processing of data could be online or offline or a combination of both [25]. In online processing, the data are processed immediately and in offline processing the data are processed after being stored. Offline processing has the advantage that the data could be studied from various viewpoints. In the present work, based on the objectives of the study and the defined usage for the data, offline processing was preferred. 4.2. The functional similarity layer The functional similarity layer checks the degree of functional similarity between services in repository (∑ = {Sp}) and Sq. Checking functional similarity means finding those services that do the similar task to service Sq. The main source to be used here is WSDL description. The required information can be obtained from main parts of the WSDL, i.e portType, operation and message. After receiving the WSDL of Sq, its similarity to the services in the repository (∑ = {Sp}) is measured and each service is rated based on its functional similarity. Those services that their degree of similarity is higher than the threshold are chosen and named as services S1..Sk. In the next step, the vector of F = (fs1, fs2, …, fsk) is created for services S1.. Sk from their functional similarity. Services S1..Sk and vector F are then sent to the analyzer layer. As mentioned in section 2, in works [3,4,5,6] the similarity between two Web services is measured from functional point of view. In this section, one of these methods is selected for evaluating functional similarity between Web services as follows. In [4], terms are considered as a package of words and similarity is measured based on TF/IDF measure, the concepts are inferred from terms and the similarity among these concepts is noticed. The weakness of this work is that it is possible to send only one method to the Web service. In [5] the focus is only on words and the structure of the WSDL is not considered which is the weakness of this method. [6], like [3], uses a recursive method in measuring similarity between service description elements but its weakness is not considering the number of operations and parameters of Web services. Work [3] does not have the above mentioned problems and is accurate enough; therefore it is used in the present work to measure functional similarity. The latter method considers both syntactic and semantic aspects of Web services that could be derived from WSDL. Semantic aspects are related to the purpose of the Web service which is itself related to the names assigned to the entire service like the names of operations, parameters, port types, parts and inputs and outputs of its methods. Syntactic aspects are related to the conformance between input and output structures and the consistency among data types. 4.3. The QoS similarity layer The QoS similarity layer measures the degree of QoS similarity of services in repository ∑ = {Sp} to Sq. Achieving this goal requires calculating the vector of user preferences (Puq = (auq,ruq)) about service QoS features for Sq in which auq indicates availability and ruq indicates response time. The next step is to evaluate the quality status of services using the information calculated and stored by the monitoring layer. It is noticeable that only those services which are functionally similar to Sq are examined here. In section 4.3.1. how to calculate Puq and in section 4.3.2. how to measure QoS similarity are discussed. 4.3.1. User preferences about QoS For Web service users, considering quality issues are very important because the quality of applications consisting of Web services has a direct relationship with the quality of each service. Therefore, there is a need to calculate Puq. One method is using SLA. By using SLA, one can automatically become aware of user preferences when choosing Sq and use them in finding similar services. SLA is actually a kind of contract in which different metrics for quality is defined [17]; for example, the average response time should be less than 0.5 second or the availability of a service must be more than 99.0 %. In order to use SLA, it is necessary to use one of its defined standards. One standard is WSLA (Web Service Level Agreement) [7] that is a formal language for expressing SLA in which the agreement is made at service level. The basic parts of a WSLA are as follows [7]: Parties and their roles: provider, consumer and third parties. SLA parameters: service object specifications like response time, throughput, etc. Service Level Objectives (SLO): promises made about SLA parameters, obligations of each party and actions taken if these promises and obligations are not observed. It is obvious that in order to realize user preferences and to make the Puq vector about service specifications, one must use the third part of WSLA i.e. SLO. In WSLA, it is possible to define arbitrary parameters. It is also possible to have different definitions for the same parameter like availability. In order for this article to be comprehensive, for each parameter, only one definition is used and in all WSLAs for different services it is interpreted the same. In order to understand better, notice a sample SLO in Figure 3. Figure 3. A sample SLO As is seen in Figure 3, part 1 shows the extent considered for QoS parameters that could be used to find the most similar service in QoS to the initial one. For each attribute, it is specified that the desired value must be greater or lower than the mentioned number. For example, for the average throughput, a number greater than 1000 and for response time, a number less than 10 is specified. This is how the vector of Puq for WSLA concerning Sq is created. In WSLA, it is possible to define parameters at both method-level and service-level. In this work, the assumption is that parameters are defined at service-level and in addition the WSLA between service provider and service consumer for each Web service is stored in Database. 4.3.2. Evaluating QoS similarity In this section, examining services from QoS point of view is discussed. In order to evaluate QoS similarity of services with user preferences about Sq, it is necessary to communicate with the analyzer layer. Through this communication, services S1..Sk and the WSLA of Sq (WSLAsq) are received and the QoS similarity of services that are functionally similar to Sq are evaluated. The vector of Puq is filled with the average availability and the average response time values from WSLAsq. To evaluate the degree of QoS similarity, it is also necessary to use the data stored for services S1..Sk by the monitoring layer. The average availability (asj) and the average response time (rsj) for services S1..Sk are calculated using the stored data and put into matrix M (Figure 4). In recovering the monitored data and calculating the average availability and the average response time a number of recently stored data (w) are used. The purpose is considering the most recent service behavior so that if the service has been acting well previously but not recently, such a fact makes a difference in decision making and at the end the best possible selection is done. Figure 4 Calculating the similarity of vector Puq and matrix M is actually a calculation in Euclidean space in which Puq and each element of M are like points in space with two dimensions of A and R. It is noticeable that data in Puq specifies the two desirable thresholds for availability and response time from user’s point of view; this means that the user prefers service availability be greater than auq and service response time be less than ruq; the more difference between these two, the more satisfied the user. Therefore, Euclidean distance could be used to calculate similarity between Puq and M. In using Euclidean space, if there is great difference among data values or there is a difference in measurement units of specifications, it is necessary to normalize the data; this assures assigning the same weight to all specifications [26]. Here, because of the difference between the measurement scales of availability and response time, Puq and M data must be normalized. The normalization is done using the min-max relation [26], formula 2. For example, if the minimum and the maximum values for A are minA and maxA respectively, and (a) is the old value of A, based on formula 2, the new value of A, in the new range, (new_minA, new_maxA), is a'. For each element of Puq and M, formula 2 is used to create P'uq and M' (Figure 5). Here, the new range is [0, 1]. Figure 5 The degree of similarity can now be calculated using Euclidean distance. Calculating similarity is done using QSim in Formula 3 and the answer is stored in Q vector (Figure 6). Figure 6 4.3.3. Optimization Calculating the similarity between P'uq and M' cannot be only based on average availability and average response time since high data variation from these two may affect accuracy. Therefore, in order to increase accuracy, it is necessary to consider the degree of variation from average as well. Thus, in calculating similarity between P'uq and M', coefficient of variation (CV) is used. Low CV shows consistency among data and high CV shows inconsistency among them [27]. Using data in (or By having a set of data objects) X = {x1,x2,…,xn}, CV is calculated through formula 4 [27] : Therefore, in order to increase accuracy in calculating QoS similarity, the CV value for each of the availability metric (cva) and response time metric (cvr) is calculated for services S1.. Sk from data stored in monitoring through the time span previously mentioned. These numbers are put into QSim (P'uq,M'[j]) in (3) and (5) is created: The Q vector shows the degree of similarity of each service to P'uq. To increase accuracy, the assumption is that cva and cvr are less than one. It is possible that any element of Q be out of [0,1] range, therefore it is necessary to put them back in the boundary using (2). The new vector is named Q' and its elements are named as qsj; thus Q' is represented as Q'(qs1,qs2,…,qsk). Now the final decision is made using Q' and the results of functional similarity evaluation. 4.4. The analyzer layer The analyzer layer is responsible for coordinating all the layers and producing the final result. This layer communicates with external user and receives requests for finding similar services and sends the final answer to the user. When a request to find similar services to Sq is received, the analyzer sends the WSDL of Sq to the functional similarity layer, which checks for functional similarity. The result is a list of services S1..Sk together with their degree of similarity to Sq which is sent back to the analyzer. Notice that this result has the form of F = (fs1,fs2,…,fsk). The analyzer then sends the list of services (S1..Sk) to the QoS similarity layer, which has to check for QoS similarity. It also sends the specific WSLA based on the requesting party, the provider and Sq. the QoS similarity layer produces the result in the form of Q' in which the extent of QoS similarity of services S1…Sk to Puq is presented. In the analyzer layer the overall similarity of services S1…Sk and Sq is calculated by creating a matrix of Skx2whose columns are filled with functional and QoS similarity values previously calculated (Figure 7). Figure 7 Finally, the overall similarity of services S1…Sk to Sq is calculated in the analyzer layer as follows and services are ranked and ordered. The overall similarity means both functional and QoS similarity at the same time. 4.4.1. Calculating the overall similarity In order to calculate the overall similarity and ranking services, it is necessary to consider functional and QoS similarities and their degree of importance. Therefore, in analyzer, a weight is assigned to functional and QoS similarities. This weight is applied through W = [w1,w2] where w1 stands for functional similarity and w2 stands for QoS similarity and w1+w2=1. w1 is always greater than w2 because the purpose is to find a service which does the same work with good quality. Of course these weights could be changed based on the type of work and user’s opinion. Total similarity ranking of services S1…Sk to Sq is done using (6). Each element of Ascore is calculated based on (7). Based on total similarity rank, , services are ranked and ordered. The service with the highest value of is the most similar and its rank is ‘first’; similarly, a list of ranked services based on is created and sent to the user. 5. Conclusion There could be real-time changes in service status such as service unavailability and service quality decline in SOC environment. For service-oriented systems to be flexible and self-adaptive, it is necessary to automatically select and use a similar service instead of the one which causes problems and introduce them to the user so that the user does not have to go through the difficulties of discovering similar services. The present work offers a solution in providing similar services automatically whenever there is a problem in initial service availability. One important metric in selecting a similar service is considering QoS properties and user preferences about QoS. Because of the importance of this issue, in this work, an architecture is proposed in which, additional to functional similarity, QoS properties and user preferences are also considered in selecting a similar service. In our architecture to check functional similarity, WSDL of services is used. Checking functional similarity means finding those services that do the similar task. To check QoS similarity, all services in the repository are monitored and the results are stored in a Database. After automatically obtaining user preferences about QoS, QoS similarity of services to user preferences is checked. In order to increase accuracy in QoS similarity check, statistical methods are used. Total similarity is calculated based on functional and QoS similarity in a flexible way. Considering QoS properties results in a different rating of functionally similar services and, as a result, the best possible selection is done based on functionality and quality. In future works, the objective is to extend QoS model with deterministic parameters like cost, security, etc. References Abstract By increasing popularity of SOA, using Web Services in applications has increased too. SOA creates a loosely coupled environment in which the actual execution environment might differ significantly from the one with the presupposed conditions during application design. Therefore, although an appropriate Web Service might have been selected, by passing time, the Web Service may not be efficient enough or may not be applicable under specific conditions. Such problems may reduce quality or cause failure in processes and applications which use such Services. For Service-Oriented Systems to be flexible, reliable and self-adaptive, it is necessary to automatically select and use a similar service instead of the one which causes the above mentioned problems. Finding a similar service means specifying the proper services which fulfill the same requirements as those fulfilled by the problematic service. Similar services could be used in case of Web service failure or when a service does not respond due to extra load on its host. In most of the previous works, a number of the best services (k) are selected and ordered based on functional similarity. The user must select one of these services based on his/her preferences. One important metric in selecting a similar service is considering QoS properties and user preferences about QoS. Because of the importance of this issue, in the present paper, a framework is proposed in which, in addition to functional similarity, QoS properties and user preferences are also considered in selecting a similar service. Using the proposed framework, gain of retrieving similar services is increased and services similar to the best order will be delivered to users. This will optimize the selection of the similar service. Keywords : Web service, Self-adaptive, Functional Similarity, QoS Similarity &User Preferences UNIVERSITY OF SHEIKHBAHAEE SCHOOL OF ENGINEERING DESIGNING AN EFFICIENT METHOD TO RETRIEVE SIMILAR WEB SERVICES A THESIS SUBMITTED IN PARTIAL FULFILLMENT OF THE REQUIREMENTS FOR THE DEGREE OF MASTER Of M.Sc. IN COMPUTER ENGINEERING (SOFTWARE) By: Mahsa Jamal Vishkaei Supervisor: Dr. Kamal Jamshidi Advisor: Dr. Ahmad Braani Dastjerdi October 2011